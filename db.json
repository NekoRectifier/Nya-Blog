{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"themes/vivia/source/colors.json","path":"colors.json","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-128.png","path":"images/favicon-dark-128.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-180.png","path":"images/favicon-dark-180.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-192.png","path":"images/favicon-dark-192.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-dark-32.png","path":"images/favicon-dark-32.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-128.png","path":"images/favicon-light-128.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-180.png","path":"images/favicon-light-180.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-192.png","path":"images/favicon-light-192.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/favicon-light-32.png","path":"images/favicon-light-32.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/images/tile.png","path":"images/tile.png","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/color.global.min.js","path":"js/color.global.min.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/light-dark-switch.js","path":"js/light-dark-switch.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/load-settings.js","path":"js/load-settings.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/MaterialSymbolsRounded.woff2","path":"css/fonts/MaterialSymbolsRounded.woff2","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Bold.ttf","path":"css/fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Medium.ttf","path":"css/fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/Roboto-Regular.ttf","path":"css/fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/all.css","path":"fontawesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/all.min.css","path":"fontawesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/brands.css","path":"fontawesome/css/brands.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/brands.min.css","path":"fontawesome/css/brands.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/fontawesome.css","path":"fontawesome/css/fontawesome.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/fontawesome.min.css","path":"fontawesome/css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/regular.css","path":"fontawesome/css/regular.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/solid.css","path":"fontawesome/css/solid.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/solid.min.css","path":"fontawesome/css/solid.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/regular.min.css","path":"fontawesome/css/regular.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/svg-with-js.css","path":"fontawesome/css/svg-with-js.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/svg-with-js.min.css","path":"fontawesome/css/svg-with-js.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/v4-font-face.css","path":"fontawesome/css/v4-font-face.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/v4-font-face.min.css","path":"fontawesome/css/v4-font-face.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/v4-shims.css","path":"fontawesome/css/v4-shims.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/v4-shims.min.css","path":"fontawesome/css/v4-shims.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/v5-font-face.css","path":"fontawesome/css/v5-font-face.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/css/v5-font-face.min.css","path":"fontawesome/css/v5-font-face.min.css","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-brands-400.ttf","path":"fontawesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-brands-400.woff2","path":"fontawesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-regular-400.ttf","path":"fontawesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-regular-400.woff2","path":"fontawesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-solid-900.ttf","path":"fontawesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-solid-900.woff2","path":"fontawesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-v4compatibility.ttf","path":"fontawesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-v4compatibility.woff2","path":"fontawesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"source/r-18/index.html","path":"r-18/index.html","modified":0,"renderable":0},{"_id":"source/assets/avatar.webp","path":"assets/avatar.webp","modified":0,"renderable":0},{"_id":"source/assets/banner.webp","path":"assets/banner.webp","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/使用GPG签名commit记录/kleo_gen_setting.png","hash":"a1f7e75923808511b3ff92f1d13b061f5928310a","modified":1691216073574},{"_id":"source/_posts/Android-viewBinding的使用.md","hash":"4329f639b3a9b43202f207075e42d278ae9d9bb9","modified":1691216073521},{"_id":"source/_posts/Clion-中配置-ROS-环境指南.md","hash":"7ad1535d3576c5573cce3b3b54e5ba37c41df0b6","modified":1691216073521},{"_id":"source/_posts/Linux基础命令学习.md","hash":"bd17532d0de10d57b4b6398be6c6f64fff35bfb0","modified":1691216073521},{"_id":"source/_posts/Android权限请求写法.md","hash":"313ccce3f372947f635069cd25f9b49ec52c60d6","modified":1691216073521},{"_id":"source/_posts/Oculus-Quest2-无Facebook账户激活.md","hash":"efeac731d9b98e2a92eec20f7e84310b6ce84124","modified":1691216073541},{"_id":"source/_posts/Office-Word解决卡顿问题.md","hash":"303d40e6744a51d49209818709f3548a2d2f3f42","modified":1691216073541},{"_id":"source/_posts/OpenCV-Android部署指南.md","hash":"efe7d1e522f95123ef7ecc280d8ba5243ffabb6f","modified":1691216073541},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南.md","hash":"211121112e1ed5ea073c0026f4a12c014165d257","modified":1691216073541},{"_id":"source/_posts/Windows-多网卡链路聚合.md","hash":"4bdae5315d3b42499fcf1ac6510caf48db72f98f","modified":1691216073564},{"_id":"source/_posts/Windows10更改用户名.md","hash":"c37034d27abf23582a5e7ca1c5de053aa42b7c61","modified":1691216073568},{"_id":"source/_posts/Windows创建隐藏管理员账户.md","hash":"c749a2145c8b07e928846841982733e3555c6ca8","modified":1691216073568},{"_id":"source/_posts/pandavan上配置clash教程.md","hash":"2199dac8b53f8963a5b8ca2563d72e6a65c42dd4","modified":1695433272203},{"_id":"source/_posts/使用GPG签名commit记录.md","hash":"606bfa6432187f9c8050c8df6a5cc55080a4e83d","modified":1695433272205},{"_id":"source/_posts/使用John-The-Ripper破解压缩文件密码.md","hash":"b1db7dc2142ef1edfdb5c6470be0260b18c9adac","modified":1691216073574},{"_id":"source/_posts/在termux上部署VSCode Codespace.md","hash":"a0573c708f11a314f21bfd87f499f4f2a87b6579","modified":1691216073578},{"_id":"source/_posts/如何在中git回退版本并提交.md","hash":"7e8eb1bd458f7f925847aea42b1c4426617f55b6","modified":1691216073578},{"_id":"source/_posts/解决Windows蓝牙连接不稳定问题.md","hash":"8859056ccdd997fe948dc04c968ce3c34b805ee8","modified":1691216073578},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/workflow.png","hash":"e7611afed5cee82035a4add8844596f82f3c7bab","modified":1691216073548},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/compress_bag.png","hash":"af8a4e9b44d4260c7dbf80e18ea93ad1c0a4f7c6","modified":1691216073548},{"_id":"source/_posts/Windows-多网卡链路聚合/g_a.png","hash":"a424f88a9dd5e0a49bd71964c6b2517efb981cc1","modified":1691216073564},{"_id":"source/_posts/Windows-多网卡链路聚合/wllj.png","hash":"22a574bb30f2431f52c89cebab8351dabe026446","modified":1691216073568},{"_id":"source/_posts/Windows创建隐藏管理员账户/reglist.png","hash":"641cf01709950b1cff77bc8484a65dc4358ff570","modified":1691216073571},{"_id":"source/_posts/pandavan上配置clash教程/1.png","hash":"f4e31920933ea3d7dc9d727d664f8b6ba5de4357","modified":1691216073571},{"_id":"source/_posts/使用GPG签名commit记录/kleo_advanced.png","hash":"5c4d5f8e3543723dadf353b9c1aef55436a7e50f","modified":1691216073574},{"_id":"source/_posts/使用GPG签名commit记录/no_secret_key.png","hash":"54eab3ca8a1051ce1ca19db1e72e6e48138e869a","modified":1691216073574},{"_id":"source/_posts/资源索引.md","hash":"6603a3b9422f9bc3688c056b8f95ae8e81ea468a","modified":1691216073581},{"_id":"source/about/index.md","hash":"a5b97b0291d29c92cbe3586e87d0c4b3f48ef08e","modified":1697036485815},{"_id":"source/r-18/index.html","hash":"566d448bdb4a609ea28a8972876fd05650417912","modified":1697036221435},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/file_exe.png","hash":"137ade474e183f3f0f22350f811836b6f524f39e","modified":1691216073544},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/firmware_disable.png","hash":"3461c8a483b2d16c06b0aeec5bfa0d4c86ccf660","modified":1691216073544},{"_id":"source/_posts/OpenCV-Android部署指南/afterde.png","hash":"7a6284e0943908372a6d138522d409b26012bd0a","modified":1691216073541},{"_id":"source/_posts/OpenCV-Android部署指南/nativ.png","hash":"ac77471c83b5229f070d3233f08b5f7d5dd60e04","modified":1691216073541},{"_id":"source/_posts/OpenCV-Android部署指南/projlist.png","hash":"609ef708091587f5660d73b1fdf51ac13cc698b9","modified":1691216073541},{"_id":"source/_posts/Meizu-E3-解锁-刷机指南/orides.png","hash":"3127c0bb3886c719d487da3a1a0aa975cf6aed89","modified":1691216073538},{"_id":"source/_posts/OpenCV-Android部署指南/projstru.png","hash":"a25de2f27368ceada634d4ef3515318b0d9f36ac","modified":1691216073541},{"_id":"source/_posts/MATLAB-Cheat-Sheet/xticklabel.png","hash":"0df243434409ce0c7a24c1f67f0a220a4de5f845","modified":1691216073528},{"_id":"source/_posts/MATLAB-Cheat-Sheet/scattercolor.png","hash":"0c2ee246d5e267305ff54a1eb870cd7a4f8c069c","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/plotmatrix.png","hash":"7e17a6ccda81c38f1f4996c7bca99d019a886efe","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/plot3.png","hash":"1ae4d997e5b871b994667d85619ee89b053330d4","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/matrixplotting.png","hash":"8e2e171d5f5a0e985d2a9f67e62f5e8661fbd668","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/linearidtosubid.png","hash":"b6eac8e8de47b7714554305a4ec53ea4a7ff4498","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/legend.png","hash":"f74616676259d93254d2ea489489b99583ed2852","modified":1691216073521},{"_id":"source/_posts/MATLAB-Cheat-Sheet/colonoperatorandlinspace.png","hash":"d0d0b7c7d50cc2c244ed9a7f424f6fe3e67ec75d","modified":1691216073521},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验.md","hash":"44f3730303c58788f2a4c9bac97d99c46dea7e0a","modified":1691216073544},{"_id":"source/_posts/Meizu-E3-解锁-刷机指南.md","hash":"d75e32403bc770eef47cf20e820c2b455c6e2430","modified":1691216073528},{"_id":"source/_posts/MATLAB-Cheat-Sheet/concatenation.png","hash":"befbb7550a1e249ceb28e08f348f9f92b4469244","modified":1691216073521},{"_id":"source/_posts/MATLAB-Cheat-Sheet/bargroup.png","hash":"fd3756625897c136a031d5f364c7b22aec5ea3a1","modified":1691216073521},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置.md","hash":"9fbd8eb9695f3bf84dddb332c4454f00b45f10f4","modified":1691216073578},{"_id":"source/_posts/Windows-Terminal-优化指北.md","hash":"da26583b457b8df08e53b841e9cfa8f5f3e23f1e","modified":1691216073554},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南.md","hash":"a67150802fda90ff942d027fc68d0ce4e69be426","modified":1691216073548},{"_id":"source/_posts/MATLAB-Cheat-Sheet.md","hash":"beb2dcc62bc546d7176ea2e817e20ce7c0769b52","modified":1691216073521},{"_id":"source/_posts/使用GPG签名commit记录/kleo_fingerprint.png","hash":"62d2dd41e004f974c60fbe30fc83ac97241770c2","modified":1691216073574},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/add-im.png","hash":"6b0e48bb62e0610db3acf23a7390ed1c8a96fbf8","modified":1691216073578},{"_id":"source/_posts/Windows-Terminal-优化指北/new_ps.png","hash":"c8a4ab7a45ee7ebaaa9cf14a79e7a2a71a77adf7","modified":1691216073554},{"_id":"source/_posts/Windows-Terminal-优化指北/ori_ps_ver.png","hash":"c8e5ae7f1f95f0909d1fb600ba21d95855e39dc8","modified":1691216073554},{"_id":"source/_posts/Windows-Terminal-优化指北/Windows_Terminal_v1.0.png","hash":"3022259160b8de51d829bdcdde16a31118ae556b","modified":1691216073554},{"_id":"source/_posts/Windows创建隐藏管理员账户/binvalue.png","hash":"aa5167609ddb9d08cc4898a4987e70b8ac649010","modified":1691216073571},{"_id":"source/_posts/Windows创建隐藏管理员账户/regeditperm.png","hash":"0f2e6456c1c0ae304a39e87abffc62a7b931c816","modified":1691216073571},{"_id":"source/_posts/pandavan上配置clash教程/2.png","hash":"d0e162146f89c33927ede1335ad7f19b18749ad9","modified":1691216073571},{"_id":"source/_posts/使用GPG签名commit记录/expire_setting.png","hash":"b07ac3a028d6b078da42bf11d8df5438049a2030","modified":1691216073574},{"_id":"source/_posts/使用GPG签名commit记录/fake.png","hash":"693c62fd63911f93b8e305b54afd9aecb28eec9e","modified":1691216073574},{"_id":"source/_posts/使用GPG签名commit记录/gpg_install.png","hash":"50a8e87596eff1df75b2097ecf4745ab6c931055","modified":1691216073574},{"_id":"source/_posts/使用John-The-Ripper破解压缩文件密码/change_encode.png","hash":"115c5ac54577b27f8e8fb2e44d2f33960f0e4162","modified":1691216073578},{"_id":"source/_posts/解决Windows蓝牙连接不稳定问题/power_setting.png","hash":"7e4ac8d53701a171ee770085edc6f758e84a2ab8","modified":1691216073578},{"_id":"source/_posts/Office-Word解决卡顿问题/settings.png","hash":"2b17ef0e6a2c5537ea6a7c66ac92e831ed2e748a","modified":1691216073541},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/file_right_click.png","hash":"8118887bdf9b4c0a5a06ab482f723f34a2035d19","modified":1691216073544},{"_id":"source/_posts/OpenCV-Android部署指南/build.png","hash":"d7ce4e849454666cd3d64a138055fc5fd481022c","modified":1691216073541},{"_id":"source/_posts/OpenCV-Android部署指南/importmodule.png","hash":"52103c77499c1ed62edb6d9c81ad9aefb9f69264","modified":1691216073541},{"_id":"source/_posts/MATLAB-Cheat-Sheet/surfc.png","hash":"f28366a4de2d82fc4185321b86b2fa8c35a2d231","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/mutlibyelementormartrix.png","hash":"abdf9b3ad0b5b8a1975c13f2c00cc85a5f806cd4","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/meshz.png","hash":"f35136614142a23c35664c21c932706baea4fdd1","modified":1691216073524},{"_id":"source/_posts/MATLAB-Cheat-Sheet/meshc.png","hash":"5a08815b47b68c6635398dcbe119d6d6f4f7f041","modified":1691216073524},{"_id":"source/_posts/Android权限请求写法/req.jpg","hash":"8d1c6158529b55e3413dba02f7c6f76ab0de43eb","modified":1691216073521},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/rime.png","hash":"181696575c45458724a8b201d8ff482c5c5fd4c1","modified":1691216073581},{"_id":"themes/vivia/README.zh-CN.md","hash":"81c833e4d189d56504680a6d85387e6de654d1d3","modified":1691286549680},{"_id":"themes/vivia/_config.yml","hash":"bc429e8233e26aad0b578ec0d5f87bab9156653c","modified":1691286549680},{"_id":"themes/vivia/package-lock.json","hash":"28f79d75bf971f115d57b9f72d8739f1c59abc90","modified":1691286549680},{"_id":"themes/vivia/package.json","hash":"a65767a8cfc4127026f9c6a1c76610cd1ee04ea5","modified":1691286549680},{"_id":"themes/vivia/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1691286549680},{"_id":"themes/vivia/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1691286549680},{"_id":"themes/vivia/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1691286549680},{"_id":"themes/vivia/languages/en.yml","hash":"b4b55e56a0554bfdc383650742c2038cef777142","modified":1691286549680},{"_id":"themes/vivia/languages/zh-CN.yml","hash":"89154c7877fa274d340e2adb2241167abda71c60","modified":1691286549680},{"_id":"themes/vivia/languages/zh-TW.yml","hash":"9098818e791e19d9921e256c771664b2cd999e13","modified":1691286549680},{"_id":"themes/vivia/languages/zh.yml","hash":"e56bebd19d2abd1698e9aa87d337941957977468","modified":1691286549680},{"_id":"themes/vivia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1691286549680},{"_id":"themes/vivia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1691286549680},{"_id":"themes/vivia/layout/index.ejs","hash":"c947599054a0c5ac3f3c6b09189df3ca6f7e1566","modified":1691286549680},{"_id":"themes/vivia/layout/layout.ejs","hash":"2b4dd8df26bdb5693e61cb71ec56787da194b53d","modified":1695649172108},{"_id":"themes/vivia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1691286549680},{"_id":"themes/vivia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1691286549680},{"_id":"themes/vivia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1691286549680},{"_id":"themes/vivia/source/colors.json","hash":"c8c30ce6908c3de0e6aa94b20321742115aa4fc7","modified":1691286549693},{"_id":"themes/vivia/scripts/archive-helper.js","hash":"a0fcc99f909f668c1d3d2dd63e9911266f23fa57","modified":1691286549693},{"_id":"themes/vivia/scripts/categories-process.js","hash":"603034deb7876e6ca0056a17bb02e48c371634d8","modified":1691286549693},{"_id":"themes/vivia/scripts/color-generate.js","hash":"a8a77ffd8019d036a958486f9d052df074f590c0","modified":1691286549693},{"_id":"themes/vivia/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/archive.ejs","hash":"e9dfdc1f072e61a9444ff8075ae30c707ddf2155","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/article.ejs","hash":"a4a598ea1cedf3b3a3248438d6786e81dfa9b9e0","modified":1691303970089},{"_id":"themes/vivia/layout/_partial/banner.ejs","hash":"7f9c0b7d10238b45c1c1a65df7f801c904ae898c","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/footer.ejs","hash":"e78a36c94879f70df2ec615ccc2b5d459eeb4fe7","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/back-to-top.ejs","hash":"a58fa2b2c4cf3329479af2930fa25a0c0acb4be6","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/head.ejs","hash":"af502c51ad2219b01a1e5a2571649d25be19ca96","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/navbar.ejs","hash":"df35d292522a2d32d0c7976fd0b7a5607284fb9a","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/sidebar.ejs","hash":"97eee27bfb59ccc109fcd9ce87963f686c2b6ba9","modified":1691286549680},{"_id":"themes/vivia/layout/_widget/archive.ejs","hash":"1dd3efd775f09f3e5a0e0205ddb8388851dfad57","modified":1691286549680},{"_id":"themes/vivia/layout/_widget/color.ejs","hash":"ee30d420d07fe98789f202cdcdec86b67a000773","modified":1691286549680},{"_id":"themes/vivia/layout/_widget/profile.ejs","hash":"ccd8c2442f3437b6752946f4d573edefaf2cd4c0","modified":1691286549680},{"_id":"themes/vivia/layout/_widget/recent_posts.ejs","hash":"647f4151e7fca48af2b727228b84deb0652a6376","modified":1691286549680},{"_id":"themes/vivia/layout/_widget/tag.ejs","hash":"f231a62130014c07dc1888ed30399bcfde3ed0c0","modified":1691286549680},{"_id":"themes/vivia/layout/_widget/category.ejs","hash":"cc465be58bf6aeee7947e9cf9563c651e42e7a5d","modified":1691286549680},{"_id":"themes/vivia/source/css/_extend.styl","hash":"cc37f2c5f8ccdb77f87cf8ed35ea71a2d66c9605","modified":1691286549693},{"_id":"themes/vivia/source/css/_variables.styl","hash":"c7793e26651a7b99ab909cb1f8de3f2f63d66520","modified":1691286549693},{"_id":"themes/vivia/source/css/style.styl","hash":"74cf7aa018626f319deadecc06af3e1ae8741f9f","modified":1691286549703},{"_id":"themes/vivia/source/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1691286549710},{"_id":"themes/vivia/source/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1691286549710},{"_id":"themes/vivia/source/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1691286549710},{"_id":"themes/vivia/source/js/color.global.min.js","hash":"8140005be5afebb828b2890ce6e686ece34e78df","modified":1691286549710},{"_id":"themes/vivia/source/js/light-dark-switch.js","hash":"371eacee9af459d04de60190c549fe7f8374be36","modified":1691286549710},{"_id":"themes/vivia/source/js/load-settings.js","hash":"f420677aad3d200b4f92fca60ab5cb47c7db9a21","modified":1691286549710},{"_id":"themes/vivia/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1691286549710},{"_id":"themes/vivia/layout/_partial/post/category.ejs","hash":"9f06ff87e50ff5005080c6bdebf4a0bbaf550aba","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/post/date.ejs","hash":"760970e719ef973c18ac36c9fc9e13d0edaaaa5a","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/post/gallery.ejs","hash":"0282d116251bd60b91e05c786386e4d570035996","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/post/nav.ejs","hash":"86886e1ca10aec7087b44048f92719d24ac738f4","modified":1691286549680},{"_id":"themes/vivia/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1691286549680},{"_id":"themes/vivia/source/css/_partial/archive.styl","hash":"5838931ac564544dad607f3cf2c939e12523626c","modified":1691286549693},{"_id":"themes/vivia/layout/_partial/post/title.ejs","hash":"14e34508135bf83763d8c1f1f8d8467dff689002","modified":1691286549680},{"_id":"themes/vivia/source/css/_partial/article.styl","hash":"22dbae8676ac5c3526934354755442a97cd75e97","modified":1691300830366},{"_id":"themes/vivia/source/css/_partial/back-to-top.styl","hash":"5c0308c4941128dca3e9860fb4af2ab57fda2dfd","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/comment.styl","hash":"ea207b827907dffb17548a74bda41713d0f1e49c","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/footer.styl","hash":"9800ababf4c348395b150543e922ac1f4d22f123","modified":1695433272249},{"_id":"themes/vivia/source/css/_partial/header.styl","hash":"f515a719b83eda6cd36a66cdd9f3ff5d745db49b","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/highlight.styl","hash":"a8ca23517206f5300f7402af5638211c45e11197","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/main-title.styl","hash":"9b3d8c299d8924f3067f7bfb9fe1203e6656d187","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/settings.styl","hash":"c21f06efa6323aafb86965c28a6f3242cbe8d865","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/sidebar-aside.styl","hash":"b87274771ffd23649cee8188c0a3804fae69fd38","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1691286549693},{"_id":"themes/vivia/source/css/_partial/sidebar.styl","hash":"69a08fe059c5e2ee00760ae61f1123d61d90c39a","modified":1691303198022},{"_id":"themes/vivia/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1691286549693},{"_id":"themes/vivia/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1691286549693},{"_id":"themes/vivia/source/fontawesome/css/brands.css","hash":"8c4c541bc40f83787c6987e3ac681e4d3faa54c1","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/css/brands.min.css","hash":"18b8f500bb4f772c7d7f39c3fab1478a74825339","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/css/regular.css","hash":"f9334e2a68dce5b03b07148ac9a93c5ad98fe99e","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/solid.css","hash":"28c2b2461ee1078694ce253ae772f125ae4fa0ac","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/solid.min.css","hash":"876c898134a50c7b8e42314fba36fdfef7df3a6e","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/regular.min.css","hash":"659c14600584effc4b93be03a0160b21a90923b8","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/svg-with-js.css","hash":"fb14f74f1ee5072ca4b6d79850616816d57789dd","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/svg-with-js.min.css","hash":"b488e7f51b974eb12138921b606359553e7b6d3d","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/v4-font-face.css","hash":"b266ee63ab30304fefbf89faff2bc8d0c61b9149","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/v4-font-face.min.css","hash":"f32930ff09bccce04156af99f31231387af624f6","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/v4-shims.css","hash":"2e9933089ede320ba8c67509e0355aab49c5d293","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/v4-shims.min.css","hash":"791742cd5dd90f208489f835d3924ee325695920","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/v5-font-face.css","hash":"f5fac79059b214cf7e82de28544d9685cc1db3bc","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/v5-font-face.min.css","hash":"9b1d63f200b06ff5c6a306bd4c4404db38e78866","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-regular-400.ttf","hash":"dad3ad71b383789bb62c249742ef59e34685e7d0","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-regular-400.woff2","hash":"3119676750af0e0bc338cc4aad220bdc72c56cc5","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-v4compatibility.woff2","hash":"dd7e4a76de26e9e39168dfac3fbb8a34a87b76bc","modified":1691286549710},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-v4compatibility.ttf","hash":"52a84a6495e27f43e9762f2c2a9531d9fe15e9ee","modified":1691286549710},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/extension_settings.png","hash":"1ece20a20017d811e7ae1c8355212ee1619b0194","modified":1691216073551},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/version_test.png","hash":"e4e677f4887fbf1e5f76e14ce5b955e4e8113b4a","modified":1691216073554},{"_id":"source/_posts/Windows-Terminal-优化指北/wt_settings.png","hash":"3a02eb15bc771f70b450e4df0b5c58b9240b44d5","modified":1691216073564},{"_id":"source/_posts/Windows10更改用户名/setttingsofuseraccount.png","hash":"0159a000e1cd40c8e16384458292496ff2583c33","modified":1691216073568},{"_id":"source/_posts/使用GPG签名commit记录/export_key.png","hash":"3b53b389285772f77119ddd80ff6a63872611e1c","modified":1691216073574},{"_id":"source/_posts/使用GPG签名commit记录/github_add.png","hash":"0ce718bdefafba6b9b1493a9b7e7ab030e600cb8","modified":1691216073574},{"_id":"source/_posts/解决Windows蓝牙连接不稳定问题/bl_adapter.png","hash":"d7b95e9d5688d5ed6b716bd38456b310ace4e199","modified":1691216073578},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/double_pinyin.png","hash":"5d70056a98ea97de98e246eea8c0902b8d360634","modified":1691216073581},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/degrade_failed.png","hash":"ec37ba5dd3bd6d4095a29c693854c91688347666","modified":1691216073544},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/com_mgr.png","hash":"25eabc6a23b323b0ef97b5c6c2e956a56993c618","modified":1691216073541},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/manjaro-hello-install.png","hash":"0ace01b27442b3d65e0517a22d306d1de71d9322","modified":1691216073581},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/keyboard-add.png","hash":"09dd2c50fde416d32f2dcf95f0d3956633dc8107","modified":1691216073581},{"_id":"themes/vivia/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1691286549710},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1691286549703},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/css/all.min.css","hash":"686e3160cff3fb1be2de10779754b40f15948208","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/css/fontawesome.css","hash":"f1239ac4cd2cf265ed3fa0e5ca8733d9a10ffd68","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/css/fontawesome.min.css","hash":"24ae04e00c6b58ae5b6dfcf7ca06acb3bd92d7e5","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-brands-400.woff2","hash":"b99813b3c531d8fe90aed3b75d2ed71f8e0c87f4","modified":1691286549707},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/install_cr.png","hash":"82cd15b63cb7f8eb4638b80e36e49d3bd84eb05c","modified":1691216073551},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/path_settings.png","hash":"aa49bc615b7ea9b227eaddeedbf2ed73c4d94d20","modified":1691216073554},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/termux-properties.png","hash":"c88749dd710eee67820bccb26ef5071ecd960de0","modified":1691216073544},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/termux-tmoe.png","hash":"c473e83a538b71d1ae8eabb6720d0825bfe8619c","modified":1691216073548},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/tmp.png","hash":"442ff703553531bf7e94ab0170d902b53c52e4aa","modified":1691216073548},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/tmoe-con-edit.png","hash":"deeb6bafd3aa9172a3f9bf4f9db4f2eb5d87fe0b","modified":1691216073548},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/kbd.png","hash":"8e28c963c2b0530f660b9d8f49da05ac28df9108","modified":1691216073581},{"_id":"themes/vivia/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1691286549693},{"_id":"themes/vivia/source/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1691286549700},{"_id":"themes/vivia/source/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1691286549700},{"_id":"themes/vivia/source/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1691286549700},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1691286549700},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/css/all.css","hash":"e487581ce484a609b9cfe6c6e3faf70f933c7628","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-brands-400.ttf","hash":"a14a91d8c170fc9e159040f6794369d829e0859e","modified":1691286549707},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-solid-900.woff2","hash":"c0e6e76b4a02c34656ff2a41b671e02f2821829b","modified":1691286549710},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/exec_map.png","hash":"6e4d95bb5df39a1632cea018c5051db1fefe0b27","modified":1691216073551},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/image.png","hash":"0f3c22e97d5db490759820e5546d09f7c082db7f","modified":1691216073581},{"_id":"themes/vivia/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1691286549703},{"_id":"themes/vivia/source/fontawesome/webfonts/fa-solid-900.ttf","hash":"3eb9b4b2ea22711b96e3b356196fd20b4f17fb0e","modified":1691286549710},{"_id":"source/_posts/Windows-Terminal-优化指北/posh_theme.png","hash":"ba2e25d5347846bca0f60bda31f132492fb9e98a","modified":1691216073558},{"_id":"source/_posts/Windows-多网卡链路聚合/gst.png","hash":"809698564399159ac1392291f08197c170af4df6","modified":1691216073568},{"_id":"source/_posts/Windows-Terminal-优化指北/ps_finish.png","hash":"16f0610c4708c3d65ac5fc0c420b8ffe96c42ddd","modified":1691216073564},{"_id":"source/_posts/使用John-The-Ripper破解压缩文件密码/crack.png","hash":"c517c9525fc2069cc9079f61cc92060d15504f87","modified":1691216073578},{"_id":"source/_posts/Windows创建隐藏管理员账户/wt.png","hash":"3fccf5eaf75cbcb1ffe376f91dcb011db678df0b","modified":1691216073571},{"_id":"themes/vivia/source/css/fonts/MaterialSymbolsRounded.woff2","hash":"1fbd100a3bc6e16b9d3c7206d61777c7ef579af9","modified":1691286549697},{"_id":"themes/vivia/preview/home-dark.png","hash":"19241ba3c47eee63970e7e67b3c1e72d0b157f13","modified":1691286549687},{"_id":"themes/vivia/preview/home.png","hash":"3ce381e75cbd68efbac0f401cec8d18330401ed8","modified":1691286549693},{"_id":"source/_posts/Meizu-E3-解锁-刷机指南/meizue3.png","hash":"d30f6f33f1ac6953463d20204a865460912c3511","modified":1691216073538},{"_id":"themes/vivia/source/images/bg.png","hash":"085247fd6fefc441ccdc71bd6f08dc1c5b1c708b","modified":1688615185149},{"_id":"source/assets/banner.png","hash":"085247fd6fefc441ccdc71bd6f08dc1c5b1c708b","modified":1688615185149},{"_id":"source/.DS_Store","hash":"f804caf179839007c9c4b5e6104b4ab72a4ea8dc","modified":1696948873347},{"_id":"source/_posts/.DS_Store","hash":"956022baf5ed0b02cb92ea3bdb67a11f48e99d7a","modified":1696948873346},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro.md","hash":"dd607bdd111ca716f68df64efa8d7b3773d5bc49","modified":1696949375262},{"_id":"source/assets/banner.webp","hash":"0354f727df4ad9477c6fc34b4dd54c36118c36b1","modified":1697012508523},{"_id":"source/assets/avatar.webp","hash":"306ce75067d461eb5039a147f810ae6a27671bb8","modified":1697012359184},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/kernalsu-manager.png","hash":"c23c5a92911c610c8446a1491df2e7db48411ff1","modified":1696948827000},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/lsposed-activated.png","hash":"2419c7e1a80815711bec2778e228ead88e5c9e8f","modified":1696948827000},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/system-version.png","hash":"ebe40ed2b77790290d17b0fae2ab2fd8cf43ed65","modified":1696948827000},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/crack.png","hash":"b69aab22cebb3a73da6fe95553e9d5fdcf8dfbf8","modified":1696948827000}],"Category":[],"Data":[],"Page":[{"title":"About","_content":"\n其实没有太多好讲的，不是个很喜欢说话的人。喜欢聊聊的话就到 [X](https://twitter.com/NekoRectifier) 上来找我玩吧。\n","source":"about/index.md","raw":"---\ntitle: About\n---\n\n其实没有太多好讲的，不是个很喜欢说话的人。喜欢聊聊的话就到 [X](https://twitter.com/NekoRectifier) 上来找我玩吧。\n","date":"2023-10-11T15:01:25.815Z","updated":"2023-10-11T15:01:25.815Z","path":"about/index.html","_id":"clkysewuh00002qbh7r3kdt1k","comments":1,"layout":"page","content":"<p>其实没有太多好讲的，不是个很喜欢说话的人。喜欢聊聊的话就到 <a href=\"https://twitter.com/NekoRectifier\">X</a> 上来找我玩吧。</p>\n","site":{"data":{}},"length":34,"excerpt":"","more":"<p>其实没有太多好讲的，不是个很喜欢说话的人。喜欢聊聊的话就到 <a href=\"https://twitter.com/NekoRectifier\">X</a> 上来找我玩吧。</p>\n"}],"Post":[{"title":"Android viewBinding的使用","date":"2022-02-13T02:42:29.000Z","_content":"\n## 前言\n\n`viewBinding`相当于`dataBinding`的精简版。功能上能够方便的获取视图组件的实例，避免了`findViewById()`的繁琐操作，但是不能将数据绑定到视图组件上。不过在开发轻量级应用时，这个功能足够满足需求了。  \n关于`dataBinding`，在网上关于它的讲解不少。如：[Android DataBinding 从入门到进阶](https://juejin.cn/post/6844903609079971854)。  \n\n## 开始使用\n\n在Android Studio中默认生成项目中的java中有这么几行：\n\n```java\n    private <xml名称>Binding binding;\n\n    @Override\n    public View onCreateView(\n            @NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState\n    ) {\n\n        binding = <xml名称>Binding.inflate(inflater, container, false);\n        return binding.getRoot();\n    }\n```\n\n而且有了以上代码，对应布局文件中的组件就可以直接通过`binding.<id>`获取到了。使用起来十分方便。\n\n### 具体食用方法\n\n1. 开启viewBinding功能\n    在`build.gradle(Module)`中添加以下代码：\n\n    ```gradle\n        android {\n\n            ...\n\n            buildFeatures {\n                viewBinding true\n            }\n        }\n    ```\n  \n    > 注意你所使用的gradel版本，写法可能与我有所不同。\n\n2. 修改布局文件\n    在布局文件中的**根**组件中，添加以下代码：\n\n    ```xml\n      tools:context=\".NationalGovernmentPlatformFragment\"\n    ```\n\n    总体看起来是这样：\n\n    ```xml\n    <androidx.constraintlayout.widget.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/fragment_communication_trip_code\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".NationalGovernmentPlatformFragment\" >\n\n        ...\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n    ```\n\n3. 在对应java文件中添加`binding`变量\n    在对应java文件中添加以下代码：(这是在Fragment中的情况)\n\n    ```java\n    private <xml名称>Binding binding = <xml名称>Binding.inflate(inflater, container, false);\n    ```\n\n    > xml名称首字母需大写, 如：`FragmentCommunication`\n\n4. 最后就可以通过`binding.<id>`获取到对应的组件了。\n\n    ```java\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        binding.tvTitle.setText(\"我是标题\");\n    }\n    ```\n\n    > 注意：`binding.<id>`中的`<id>`是根据布局文件中的组件的id来写的。\n\n","source":"_posts/Android-viewBinding的使用.md","raw":"---\ntitle: Android viewBinding的使用\ndate: 2022-02-13 10:42:29\ntags: \n    - Android\n---\n\n## 前言\n\n`viewBinding`相当于`dataBinding`的精简版。功能上能够方便的获取视图组件的实例，避免了`findViewById()`的繁琐操作，但是不能将数据绑定到视图组件上。不过在开发轻量级应用时，这个功能足够满足需求了。  \n关于`dataBinding`，在网上关于它的讲解不少。如：[Android DataBinding 从入门到进阶](https://juejin.cn/post/6844903609079971854)。  \n\n## 开始使用\n\n在Android Studio中默认生成项目中的java中有这么几行：\n\n```java\n    private <xml名称>Binding binding;\n\n    @Override\n    public View onCreateView(\n            @NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState\n    ) {\n\n        binding = <xml名称>Binding.inflate(inflater, container, false);\n        return binding.getRoot();\n    }\n```\n\n而且有了以上代码，对应布局文件中的组件就可以直接通过`binding.<id>`获取到了。使用起来十分方便。\n\n### 具体食用方法\n\n1. 开启viewBinding功能\n    在`build.gradle(Module)`中添加以下代码：\n\n    ```gradle\n        android {\n\n            ...\n\n            buildFeatures {\n                viewBinding true\n            }\n        }\n    ```\n  \n    > 注意你所使用的gradel版本，写法可能与我有所不同。\n\n2. 修改布局文件\n    在布局文件中的**根**组件中，添加以下代码：\n\n    ```xml\n      tools:context=\".NationalGovernmentPlatformFragment\"\n    ```\n\n    总体看起来是这样：\n\n    ```xml\n    <androidx.constraintlayout.widget.ConstraintLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:tools=\"http://schemas.android.com/tools\"\n        android:id=\"@+id/fragment_communication_trip_code\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".NationalGovernmentPlatformFragment\" >\n\n        ...\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n    ```\n\n3. 在对应java文件中添加`binding`变量\n    在对应java文件中添加以下代码：(这是在Fragment中的情况)\n\n    ```java\n    private <xml名称>Binding binding = <xml名称>Binding.inflate(inflater, container, false);\n    ```\n\n    > xml名称首字母需大写, 如：`FragmentCommunication`\n\n4. 最后就可以通过`binding.<id>`获取到对应的组件了。\n\n    ```java\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        binding.tvTitle.setText(\"我是标题\");\n    }\n    ```\n\n    > 注意：`binding.<id>`中的`<id>`是根据布局文件中的组件的id来写的。\n\n","slug":"Android-viewBinding的使用","published":1,"updated":"2023-08-05T06:14:33.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuk00012qbh4f30chk5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>viewBinding</code>相当于<code>dataBinding</code>的精简版。功能上能够方便的获取视图组件的实例，避免了<code>findViewById()</code>的繁琐操作，但是不能将数据绑定到视图组件上。不过在开发轻量级应用时，这个功能足够满足需求了。<br>关于<code>dataBinding</code>，在网上关于它的讲解不少。如：<a href=\"https://juejin.cn/post/6844903609079971854\">Android DataBinding 从入门到进阶</a>。  </p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>在Android Studio中默认生成项目中的java中有这么几行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;xml名称&gt;Binding binding;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@NonNull</span> LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    binding = &lt;xml名称&gt;Binding.inflate(inflater, container, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binding.getRoot();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而且有了以上代码，对应布局文件中的组件就可以直接通过<code>binding.&lt;id&gt;</code>获取到了。使用起来十分方便。</p>\n<h3 id=\"具体食用方法\"><a href=\"#具体食用方法\" class=\"headerlink\" title=\"具体食用方法\"></a>具体食用方法</h3><ol>\n<li><p>开启viewBinding功能<br> 在<code>build.gradle(Module)</code>中添加以下代码：</p>\n <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    buildFeatures &#123;</span><br><span class=\"line\">        viewBinding <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意你所使用的gradel版本，写法可能与我有所不同。</p>\n</blockquote>\n</li>\n<li><p>修改布局文件<br> 在布局文件中的<strong>根</strong>组件中，添加以下代码：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tools:context=&quot;.NationalGovernmentPlatformFragment&quot;</span><br></pre></td></tr></table></figure>\n\n<p> 总体看起来是这样：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/fragment_communication_trip_code&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.NationalGovernmentPlatformFragment&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在对应java文件中添加<code>binding</code>变量<br> 在对应java文件中添加以下代码：(这是在Fragment中的情况)</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;xml名称&gt;<span class=\"type\">Binding</span> <span class=\"variable\">binding</span> <span class=\"operator\">=</span> &lt;xml名称&gt;Binding.inflate(inflater, container, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>xml名称首字母需大写, 如：<code>FragmentCommunication</code></p>\n</blockquote>\n</li>\n<li><p>最后就可以通过<code>binding.&lt;id&gt;</code>获取到对应的组件了。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onViewCreated</span><span class=\"params\">(View view, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">    binding.tvTitle.setText(<span class=\"string\">&quot;我是标题&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<code>binding.&lt;id&gt;</code>中的<code>&lt;id&gt;</code>是根据布局文件中的组件的id来写的。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"length":408,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p><code>viewBinding</code>相当于<code>dataBinding</code>的精简版。功能上能够方便的获取视图组件的实例，避免了<code>findViewById()</code>的繁琐操作，但是不能将数据绑定到视图组件上。不过在开发轻量级应用时，这个功能足够满足需求了。<br>关于<code>dataBinding</code>，在网上关于它的讲解不少。如：<a href=\"https://juejin.cn/post/6844903609079971854\">Android DataBinding 从入门到进阶</a>。  </p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>在Android Studio中默认生成项目中的java中有这么几行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;xml名称&gt;Binding binding;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@NonNull</span> LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState</span></span><br><span class=\"line\"><span class=\"params\">)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    binding = &lt;xml名称&gt;Binding.inflate(inflater, container, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binding.getRoot();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而且有了以上代码，对应布局文件中的组件就可以直接通过<code>binding.&lt;id&gt;</code>获取到了。使用起来十分方便。</p>\n<h3 id=\"具体食用方法\"><a href=\"#具体食用方法\" class=\"headerlink\" title=\"具体食用方法\"></a>具体食用方法</h3><ol>\n<li><p>开启viewBinding功能<br> 在<code>build.gradle(Module)</code>中添加以下代码：</p>\n <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    buildFeatures &#123;</span><br><span class=\"line\">        viewBinding <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意你所使用的gradel版本，写法可能与我有所不同。</p>\n</blockquote>\n</li>\n<li><p>修改布局文件<br> 在布局文件中的<strong>根</strong>组件中，添加以下代码：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tools:context=&quot;.NationalGovernmentPlatformFragment&quot;</span><br></pre></td></tr></table></figure>\n\n<p> 总体看起来是这样：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/fragment_communication_trip_code&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.NationalGovernmentPlatformFragment&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>在对应java文件中添加<code>binding</code>变量<br> 在对应java文件中添加以下代码：(这是在Fragment中的情况)</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;xml名称&gt;<span class=\"type\">Binding</span> <span class=\"variable\">binding</span> <span class=\"operator\">=</span> &lt;xml名称&gt;Binding.inflate(inflater, container, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>xml名称首字母需大写, 如：<code>FragmentCommunication</code></p>\n</blockquote>\n</li>\n<li><p>最后就可以通过<code>binding.&lt;id&gt;</code>获取到对应的组件了。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onViewCreated</span><span class=\"params\">(View view, Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onViewCreated(view, savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">    binding.tvTitle.setText(<span class=\"string\">&quot;我是标题&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：<code>binding.&lt;id&gt;</code>中的<code>&lt;id&gt;</code>是根据布局文件中的组件的id来写的。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Clion 中配置 ROS 环境指南","date":"2022-06-22T12:10:44.000Z","_content":"\n# 前言\n\n网上的指南大多是搬运 Clion 官网或 ROS Wiki 的内容，且在解决环境变量的问题时通通采用继承当前终端的环境变量的方法。给不使用终端来启动 Clion 的用户带来很大不便。\n本文将在结合上述内容，并提供另外一种设置 Clion 环境变量的方式。\n\n# 步骤\n\n## 1. 创建 ROS 包\n\n具体过程可参考：ROS Wiki 的 [构建ROS软件包](https://wiki.ros.org/cn/ROS/Tutorials/BuildingPackages)\n\n确保你的工作目录为以下（或相似）的结构：\n```bash\ntree catkin_working_dir\n├── CMakeLists.txt\n├── build\n├── devel\n├── src\n│   ├── {your_package_name}\n│   │   ├── CMakeLists.txt\n│   │   ├── src\n│   │   ├── ...\n\n```\n\n## 2. 设置 Clion Cmake 相关设置\n\n- 启动 Clion，找到CMake设置（File > Settings <keyboard>Ctrl+Alt+S</keyboard> > Build, Execution, Deployment > CMake）\n\n- 将“Build directory”设为：`<你的工作区目录>/build`\n将“CMake Option”设为： `-DCATKIN_DEVEL_PACKAGE_PREFIX=<你的工作区目录>/devel`\n\n## 3. 设置环境变量\n\n### 3.1. 设置环境变量（Clion 内设置）\n\n- 打开终端（保证该终端已 **source** 所需的 `setup.bash` 等）\n\n- 输入 `printenv | grep CMAKE` 并复制 `CMAKE_PREFIX_PATH` 备用\n\n- 用 Clion 打开你的工作区目录，并选择 `<你的工作区目录>/src/CMakeLists.txt` 打开。\n\n- 再次打开步骤 2 中的 CMake 设置界面，并将复制的内容粘贴至 `Environment` 中。\n```plain\n    CMAKE_PREFIX_PATH=......\n```\n\n### 3.2 设置环境变量（终端）\n\n见：[Clion 给的教程](https://www.jetbrains.com/help/clion/ros-setup-tutorial.html#launch-in-sourced)\n\n\n# 参考链接\n【1】https://www.jetbrains.com/help/clion/ros-setup-tutorial.html\n【2】https://blog.csdn.net/qq_42731705/article/details/123858765","source":"_posts/Clion-中配置-ROS-环境指南.md","raw":"---\ntitle: Clion 中配置 ROS 环境指南\ndate: 2022-06-22 20:10:44\ntags: \n    - Clion\n    - ROS\n---\n\n# 前言\n\n网上的指南大多是搬运 Clion 官网或 ROS Wiki 的内容，且在解决环境变量的问题时通通采用继承当前终端的环境变量的方法。给不使用终端来启动 Clion 的用户带来很大不便。\n本文将在结合上述内容，并提供另外一种设置 Clion 环境变量的方式。\n\n# 步骤\n\n## 1. 创建 ROS 包\n\n具体过程可参考：ROS Wiki 的 [构建ROS软件包](https://wiki.ros.org/cn/ROS/Tutorials/BuildingPackages)\n\n确保你的工作目录为以下（或相似）的结构：\n```bash\ntree catkin_working_dir\n├── CMakeLists.txt\n├── build\n├── devel\n├── src\n│   ├── {your_package_name}\n│   │   ├── CMakeLists.txt\n│   │   ├── src\n│   │   ├── ...\n\n```\n\n## 2. 设置 Clion Cmake 相关设置\n\n- 启动 Clion，找到CMake设置（File > Settings <keyboard>Ctrl+Alt+S</keyboard> > Build, Execution, Deployment > CMake）\n\n- 将“Build directory”设为：`<你的工作区目录>/build`\n将“CMake Option”设为： `-DCATKIN_DEVEL_PACKAGE_PREFIX=<你的工作区目录>/devel`\n\n## 3. 设置环境变量\n\n### 3.1. 设置环境变量（Clion 内设置）\n\n- 打开终端（保证该终端已 **source** 所需的 `setup.bash` 等）\n\n- 输入 `printenv | grep CMAKE` 并复制 `CMAKE_PREFIX_PATH` 备用\n\n- 用 Clion 打开你的工作区目录，并选择 `<你的工作区目录>/src/CMakeLists.txt` 打开。\n\n- 再次打开步骤 2 中的 CMake 设置界面，并将复制的内容粘贴至 `Environment` 中。\n```plain\n    CMAKE_PREFIX_PATH=......\n```\n\n### 3.2 设置环境变量（终端）\n\n见：[Clion 给的教程](https://www.jetbrains.com/help/clion/ros-setup-tutorial.html#launch-in-sourced)\n\n\n# 参考链接\n【1】https://www.jetbrains.com/help/clion/ros-setup-tutorial.html\n【2】https://blog.csdn.net/qq_42731705/article/details/123858765","slug":"Clion-中配置-ROS-环境指南","published":1,"updated":"2023-08-05T06:14:33.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewum00022qbhc56dc912","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上的指南大多是搬运 Clion 官网或 ROS Wiki 的内容，且在解决环境变量的问题时通通采用继承当前终端的环境变量的方法。给不使用终端来启动 Clion 的用户带来很大不便。<br>本文将在结合上述内容，并提供另外一种设置 Clion 环境变量的方式。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-创建-ROS-包\"><a href=\"#1-创建-ROS-包\" class=\"headerlink\" title=\"1. 创建 ROS 包\"></a>1. 创建 ROS 包</h2><p>具体过程可参考：ROS Wiki 的 <a href=\"https://wiki.ros.org/cn/ROS/Tutorials/BuildingPackages\">构建ROS软件包</a></p>\n<p>确保你的工作目录为以下（或相似）的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree catkin_working_dir</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── build</span><br><span class=\"line\">├── devel</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── &#123;your_package_name&#125;</span><br><span class=\"line\">│   │   ├── CMakeLists.txt</span><br><span class=\"line\">│   │   ├── src</span><br><span class=\"line\">│   │   ├── ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-设置-Clion-Cmake-相关设置\"><a href=\"#2-设置-Clion-Cmake-相关设置\" class=\"headerlink\" title=\"2. 设置 Clion Cmake 相关设置\"></a>2. 设置 Clion Cmake 相关设置</h2><ul>\n<li><p>启动 Clion，找到CMake设置（File &gt; Settings <keyboard>Ctrl+Alt+S</keyboard> &gt; Build, Execution, Deployment &gt; CMake）</p>\n</li>\n<li><p>将“Build directory”设为：<code>&lt;你的工作区目录&gt;/build</code><br>将“CMake Option”设为： <code>-DCATKIN_DEVEL_PACKAGE_PREFIX=&lt;你的工作区目录&gt;/devel</code></p>\n</li>\n</ul>\n<h2 id=\"3-设置环境变量\"><a href=\"#3-设置环境变量\" class=\"headerlink\" title=\"3. 设置环境变量\"></a>3. 设置环境变量</h2><h3 id=\"3-1-设置环境变量（Clion-内设置）\"><a href=\"#3-1-设置环境变量（Clion-内设置）\" class=\"headerlink\" title=\"3.1. 设置环境变量（Clion 内设置）\"></a>3.1. 设置环境变量（Clion 内设置）</h3><ul>\n<li><p>打开终端（保证该终端已 <strong>source</strong> 所需的 <code>setup.bash</code> 等）</p>\n</li>\n<li><p>输入 <code>printenv | grep CMAKE</code> 并复制 <code>CMAKE_PREFIX_PATH</code> 备用</p>\n</li>\n<li><p>用 Clion 打开你的工作区目录，并选择 <code>&lt;你的工作区目录&gt;/src/CMakeLists.txt</code> 打开。</p>\n</li>\n<li><p>再次打开步骤 2 中的 CMake 设置界面，并将复制的内容粘贴至 <code>Environment</code> 中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMAKE_PREFIX_PATH=......</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-2-设置环境变量（终端）\"><a href=\"#3-2-设置环境变量（终端）\" class=\"headerlink\" title=\"3.2 设置环境变量（终端）\"></a>3.2 设置环境变量（终端）</h3><p>见：<a href=\"https://www.jetbrains.com/help/clion/ros-setup-tutorial.html#launch-in-sourced\">Clion 给的教程</a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】<a href=\"https://www.jetbrains.com/help/clion/ros-setup-tutorial.html\">https://www.jetbrains.com/help/clion/ros-setup-tutorial.html</a><br>【2】<a href=\"https://blog.csdn.net/qq_42731705/article/details/123858765\">https://blog.csdn.net/qq_42731705/article/details/123858765</a></p>\n","site":{"data":{}},"length":334,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上的指南大多是搬运 Clion 官网或 ROS Wiki 的内容，且在解决环境变量的问题时通通采用继承当前终端的环境变量的方法。给不使用终端来启动 Clion 的用户带来很大不便。<br>本文将在结合上述内容，并提供另外一种设置 Clion 环境变量的方式。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"1-创建-ROS-包\"><a href=\"#1-创建-ROS-包\" class=\"headerlink\" title=\"1. 创建 ROS 包\"></a>1. 创建 ROS 包</h2><p>具体过程可参考：ROS Wiki 的 <a href=\"https://wiki.ros.org/cn/ROS/Tutorials/BuildingPackages\">构建ROS软件包</a></p>\n<p>确保你的工作目录为以下（或相似）的结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree catkin_working_dir</span><br><span class=\"line\">├── CMakeLists.txt</span><br><span class=\"line\">├── build</span><br><span class=\"line\">├── devel</span><br><span class=\"line\">├── src</span><br><span class=\"line\">│   ├── &#123;your_package_name&#125;</span><br><span class=\"line\">│   │   ├── CMakeLists.txt</span><br><span class=\"line\">│   │   ├── src</span><br><span class=\"line\">│   │   ├── ...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-设置-Clion-Cmake-相关设置\"><a href=\"#2-设置-Clion-Cmake-相关设置\" class=\"headerlink\" title=\"2. 设置 Clion Cmake 相关设置\"></a>2. 设置 Clion Cmake 相关设置</h2><ul>\n<li><p>启动 Clion，找到CMake设置（File &gt; Settings <keyboard>Ctrl+Alt+S</keyboard> &gt; Build, Execution, Deployment &gt; CMake）</p>\n</li>\n<li><p>将“Build directory”设为：<code>&lt;你的工作区目录&gt;/build</code><br>将“CMake Option”设为： <code>-DCATKIN_DEVEL_PACKAGE_PREFIX=&lt;你的工作区目录&gt;/devel</code></p>\n</li>\n</ul>\n<h2 id=\"3-设置环境变量\"><a href=\"#3-设置环境变量\" class=\"headerlink\" title=\"3. 设置环境变量\"></a>3. 设置环境变量</h2><h3 id=\"3-1-设置环境变量（Clion-内设置）\"><a href=\"#3-1-设置环境变量（Clion-内设置）\" class=\"headerlink\" title=\"3.1. 设置环境变量（Clion 内设置）\"></a>3.1. 设置环境变量（Clion 内设置）</h3><ul>\n<li><p>打开终端（保证该终端已 <strong>source</strong> 所需的 <code>setup.bash</code> 等）</p>\n</li>\n<li><p>输入 <code>printenv | grep CMAKE</code> 并复制 <code>CMAKE_PREFIX_PATH</code> 备用</p>\n</li>\n<li><p>用 Clion 打开你的工作区目录，并选择 <code>&lt;你的工作区目录&gt;/src/CMakeLists.txt</code> 打开。</p>\n</li>\n<li><p>再次打开步骤 2 中的 CMake 设置界面，并将复制的内容粘贴至 <code>Environment</code> 中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMAKE_PREFIX_PATH=......</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-2-设置环境变量（终端）\"><a href=\"#3-2-设置环境变量（终端）\" class=\"headerlink\" title=\"3.2 设置环境变量（终端）\"></a>3.2 设置环境变量（终端）</h3><p>见：<a href=\"https://www.jetbrains.com/help/clion/ros-setup-tutorial.html#launch-in-sourced\">Clion 给的教程</a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】<a href=\"https://www.jetbrains.com/help/clion/ros-setup-tutorial.html\">https://www.jetbrains.com/help/clion/ros-setup-tutorial.html</a><br>【2】<a href=\"https://blog.csdn.net/qq_42731705/article/details/123858765\">https://blog.csdn.net/qq_42731705/article/details/123858765</a></p>\n"},{"title":"Android 权限请求写法","date":"2022-03-26T03:18:41.000Z","_content":"\n## 前言\n\n在 Android 中进行权限获取向来不是件容易事，尤其是在 API 23 后 Android 引入了运行时权限的机制，这个机制的原理是通过检查应用程序的权限状态来控制应用程序的行为。同样也使得开发者在开发应用程序时需要更多考虑权限的问题。  \n以下便是在 StackOverflow 上看到的比较好的一个处理方法。\n\n## 替代 `onRequestPermissionsResult()`\n\n在AndroidX时代，我们可以使用`registerForActivityResult()`来代替`onRequestPermissionsResult()`，这个方法可以让我们更加方便地处理权限请求的结果。\n\n```Java\n\n// 写在Fragment的onViewCraeted()方法外就行\n\n    private final ActivityResultLauncher<String> permission_result = registerForActivityResult(\n            new ActivityResultContracts.RequestPermission(),\n            result -> {\n                if (result) {\n                    //granted\n                } else {\n\n                }\n            }\n    );\n```\n\n然后在`onCreate()`/`onViewCreated()`方法中调用`permission_result.launch(permission)`即可。\n\n```Java\n\npublic void onCreate(Bundle savedInstanceState) {\n    permission_result.launch(Manifest.permission.CAMERA);\n    permission_result.launch(Manifest.permission.ACCESS_FINE_LOCATION);\n    permission_result.launch(Manifest.permission.ACCESS_COARSE_LOCATION);\n    permission_result.launch(Manifest.permission.READ_PHONE_STATE);\n}\n```\n\nKotlin实现：\n\n```Kotlin\nval permReqLuncher = registerForActivityResult(ActivityResultContracts.RequestPermission()){\n  if (it) {\n     // Good pass\n  } else {\n     // Failed pass\n  }\n}\n```\n\n## 请求结果\n\n![req](req.jpg)\n\n就如图片所示，代码中请求的提示框会一个一个的弹出给用户提示。\n\n## 参考链接\n\n[1] https://stackoverflow.com/questions/66551781/android-onrequestpermissionsresult-is-deprecated-are-there-any-alternatives\n","source":"_posts/Android权限请求写法.md","raw":"---\ntitle: Android 权限请求写法\ndate: 2022-03-26 11:18:41\ntags: \n    - Android\n---\n\n## 前言\n\n在 Android 中进行权限获取向来不是件容易事，尤其是在 API 23 后 Android 引入了运行时权限的机制，这个机制的原理是通过检查应用程序的权限状态来控制应用程序的行为。同样也使得开发者在开发应用程序时需要更多考虑权限的问题。  \n以下便是在 StackOverflow 上看到的比较好的一个处理方法。\n\n## 替代 `onRequestPermissionsResult()`\n\n在AndroidX时代，我们可以使用`registerForActivityResult()`来代替`onRequestPermissionsResult()`，这个方法可以让我们更加方便地处理权限请求的结果。\n\n```Java\n\n// 写在Fragment的onViewCraeted()方法外就行\n\n    private final ActivityResultLauncher<String> permission_result = registerForActivityResult(\n            new ActivityResultContracts.RequestPermission(),\n            result -> {\n                if (result) {\n                    //granted\n                } else {\n\n                }\n            }\n    );\n```\n\n然后在`onCreate()`/`onViewCreated()`方法中调用`permission_result.launch(permission)`即可。\n\n```Java\n\npublic void onCreate(Bundle savedInstanceState) {\n    permission_result.launch(Manifest.permission.CAMERA);\n    permission_result.launch(Manifest.permission.ACCESS_FINE_LOCATION);\n    permission_result.launch(Manifest.permission.ACCESS_COARSE_LOCATION);\n    permission_result.launch(Manifest.permission.READ_PHONE_STATE);\n}\n```\n\nKotlin实现：\n\n```Kotlin\nval permReqLuncher = registerForActivityResult(ActivityResultContracts.RequestPermission()){\n  if (it) {\n     // Good pass\n  } else {\n     // Failed pass\n  }\n}\n```\n\n## 请求结果\n\n![req](req.jpg)\n\n就如图片所示，代码中请求的提示框会一个一个的弹出给用户提示。\n\n## 参考链接\n\n[1] https://stackoverflow.com/questions/66551781/android-onrequestpermissionsresult-is-deprecated-are-there-any-alternatives\n","slug":"Android权限请求写法","published":1,"updated":"2023-08-05T06:14:33.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuq00052qbhg68d0hpt","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 Android 中进行权限获取向来不是件容易事，尤其是在 API 23 后 Android 引入了运行时权限的机制，这个机制的原理是通过检查应用程序的权限状态来控制应用程序的行为。同样也使得开发者在开发应用程序时需要更多考虑权限的问题。<br>以下便是在 StackOverflow 上看到的比较好的一个处理方法。</p>\n<h2 id=\"替代-onRequestPermissionsResult\"><a href=\"#替代-onRequestPermissionsResult\" class=\"headerlink\" title=\"替代 onRequestPermissionsResult()\"></a>替代 <code>onRequestPermissionsResult()</code></h2><p>在AndroidX时代，我们可以使用<code>registerForActivityResult()</code>来代替<code>onRequestPermissionsResult()</code>，这个方法可以让我们更加方便地处理权限请求的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写在Fragment的onViewCraeted()方法外就行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActivityResultLauncher&lt;String&gt; permission_result = registerForActivityResult(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ActivityResultContracts</span>.RequestPermission(),</span><br><span class=\"line\">            result -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//granted</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>onCreate()</code>/<code>onViewCreated()</code>方法中调用<code>permission_result.launch(permission)</code>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.CAMERA);</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.ACCESS_FINE_LOCATION);</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.ACCESS_COARSE_LOCATION);</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.READ_PHONE_STATE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin实现：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> permReqLuncher = registerForActivityResult(ActivityResultContracts.RequestPermission())&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Good pass</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Failed pass</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h2><p><img src=\"/2022/03/26/Android%E6%9D%83%E9%99%90%E8%AF%B7%E6%B1%82%E5%86%99%E6%B3%95/req.jpg\" alt=\"req\"></p>\n<p>就如图片所示，代码中请求的提示框会一个一个的弹出给用户提示。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://stackoverflow.com/questions/66551781/android-onrequestpermissionsresult-is-deprecated-are-there-any-alternatives\">https://stackoverflow.com/questions/66551781/android-onrequestpermissionsresult-is-deprecated-are-there-any-alternatives</a></p>\n","site":{"data":{}},"length":274,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在 Android 中进行权限获取向来不是件容易事，尤其是在 API 23 后 Android 引入了运行时权限的机制，这个机制的原理是通过检查应用程序的权限状态来控制应用程序的行为。同样也使得开发者在开发应用程序时需要更多考虑权限的问题。<br>以下便是在 StackOverflow 上看到的比较好的一个处理方法。</p>\n<h2 id=\"替代-onRequestPermissionsResult\"><a href=\"#替代-onRequestPermissionsResult\" class=\"headerlink\" title=\"替代 onRequestPermissionsResult()\"></a>替代 <code>onRequestPermissionsResult()</code></h2><p>在AndroidX时代，我们可以使用<code>registerForActivityResult()</code>来代替<code>onRequestPermissionsResult()</code>，这个方法可以让我们更加方便地处理权限请求的结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写在Fragment的onViewCraeted()方法外就行</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ActivityResultLauncher&lt;String&gt; permission_result = registerForActivityResult(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">ActivityResultContracts</span>.RequestPermission(),</span><br><span class=\"line\">            result -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//granted</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>onCreate()</code>/<code>onViewCreated()</code>方法中调用<code>permission_result.launch(permission)</code>即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.CAMERA);</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.ACCESS_FINE_LOCATION);</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.ACCESS_COARSE_LOCATION);</span><br><span class=\"line\">    permission_result.launch(Manifest.permission.READ_PHONE_STATE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Kotlin实现：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> permReqLuncher = registerForActivityResult(ActivityResultContracts.RequestPermission())&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (it) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Good pass</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Failed pass</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"请求结果\"><a href=\"#请求结果\" class=\"headerlink\" title=\"请求结果\"></a>请求结果</h2><p><img src=\"/2022/03/26/Android%E6%9D%83%E9%99%90%E8%AF%B7%E6%B1%82%E5%86%99%E6%B3%95/req.jpg\" alt=\"req\"></p>\n<p>就如图片所示，代码中请求的提示框会一个一个的弹出给用户提示。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://stackoverflow.com/questions/66551781/android-onrequestpermissionsresult-is-deprecated-are-there-any-alternatives\">https://stackoverflow.com/questions/66551781/android-onrequestpermissionsresult-is-deprecated-are-there-any-alternatives</a></p>\n"},{"title":"MATLAB Cheat Sheet","date":"2021-12-18T08:15:39.000Z","_content":"\n# Misc (杂项)\n\n*   用 `\"` 来标识字符串(String); 用 `'` 来表示字符类型(Char)  \n\n*   优雅的MATLAB脚本是有 `;` 作为休止符的\n    > 对赋值命令使用 `;` 则其复制结果不会出现在命令区。\n\n*   使用 `clear` 来清空变量, `clc` 来情况命令区输出\n\n*   `.*` 通过将对应的元素相乘来将数组 A 和 B 相乘。A 和 B 的大小必须相同或兼容。(<i>即 A和 B都是数组之类的玩意 ?</i> )\n\n    > 作图时貌似是很重要的玩意, 必须要有。\n\n![mutlibyelementormartrix](mutlibyelementormartrix.png)\n\n*   使用`format`来控制变量显示的精度  \n    如: `format long`   显示15位小数  \n        `format short`  再切换回4位小数\n\n*   `linspace()` 与 `:` 的区别  \n    ![colonoperatorandlinspace](colonoperatorandlinspace.png)\n    -   `linspace(a,b,N)` 作用:   \n        用于产生从 `a` 到 `b` 之间的N点行线性的矢量。其中 `a` 、`b` 、`N` 分别为起始值、终止值、元素个数。若默认无 `N` ，默认点数为100。  \n    -   `a:S:b` 作用:\n        用于产生从 `a` 到 `b` 之间的矢量。其中 `S` 指代每个数之间的间隔单位。\n    > 可以使用 `x'` 将横向数组换成纵向数组。\n\n*   `meshgrid()` 的使用\n    范例: `[X,Y,Z] = meshgrid(x,y,z)`  \n    > 当只有 `X` 和 `Y` 参数时, 返回二维坐标点, 反之亦然。  \n\n    作为参数的 `x` 和 `y` 的定义应如下所示: `x = 1:3`\n\n*   获取函数的多个输出 : 用`[]`  \n    `[row, col] = size(x)`  \n    得到数组的横纵长度值  \n    `[value, index] = max(x)`  \n    得到数组最大值和其索引值\n\n*   `numel()`  \n    <b>Number of array elements</b>  \n    用于获得数组/矩阵的元素个数\n\n*   `length()`  \n    获取数组/矩阵(未查证)的长度\n\n# 矩阵相关\n\n## 常用函数\n\n### `rand(x,y)`\n\n用于生成随机数的矩阵, `x` 指代行 `y` 指代列。\n### `zeros(x,y)`\n\n用于生成 `0` 的矩阵, `x` 指代行 `y` 指代列。\n\n### `size(x)`\n\n查看矩阵的大小,返回 `行 · 列`的格式。\n### 统计函数\n\n|函数|用途|\n|---|----|\n|`min`|最小值|\n|`max`|最大值|\n|`mean`|平均数|\n|`median`|中位数|\n|`mode`|众数|\n|`std`|标准差|\n|`var`|方差|\n|`sum`|求和|\n|`prod`|元素乘积|\n\n> 可以用已有的矩阵的大小来创建新的数列。如: `rand(size(x))`。\n\n## 矩阵操作\n\n### 清空指定位置的元素值\n\n`data({索引}) = []`\n\n### 排序\n\n`[xSorted,idx] = sort({v},\"descend\")`\n\n*   `xSorted` 是已排序的数组, 顺序有后面的 `descend` 决定\n*   `idx` 是正确顺序的针对现有数组的索引\n*   `descend` -> 递减 `ascend` -> 递增\n*   可以指定 `\"MissingPlacement\"` 的值为 `\"last\"`来放置不太正常的值到排序后数组的最下面\n\n### 通过索引提取特定值\n\n#### 一维数组\n\n使用 `x(index)` 来指定即可。\n\n#### 二维数组 / 矩阵\n\n使用 `x(row,column)` 来指定。\n\n> 指定后可以对特定值直接进行赋值操作。\n\n*   \n    使用 `end` 关键字可以指定\"最后\"的行或列  \n    如: `x = data(end, 3);`\n\n*   使用 `:` 可代表所有\"行\"或\"列\"  \n    如: `x = data(:,3);`\n\n*   如果只使用一种索引 `x` (线性索引), 则它将按顺序从上到下遍历每列。\n\n*   索引可以是非连续的 如: `x = data([1 4 6])`\n\n*   可以构建出比较复杂的索引 如: `x = M([1 2], [1 end])`  \n    如上的代码会选出矩阵中第1,2行的最前和最后的元素\n\n![lineartosub](linearidtosubid.png)\n\n#### 使用逻辑索引来提取\n\n`x = data(data > {数值})`  \n\n这样就会将满足条件的元素添加到 `x` 中去\n\n同样的,这个也支持逻辑运算符 `&`; `|`; `~`  \n如: `x = v1(v1>6 | v1<2)`\n\n*   `isnan(v)` 输出逻辑向量来说明被判断的值是否为空 (1代表空)\n\n### 数组运算\n\n#### 基础运算\n\n*   数组支持基于相同大小的数组的四则运算  \n    `sum = x + y;`\n\n*   或是任意数组与任意标量的运算  \n    `a = x + 2;`\n\n    > 此处隐含着 \"标量扩张\" ([Scalar Expansion](https://blogs.mathworks.com/loren/2006/02/22/scalar-expansion-and-more-take-2/)) 的概念\n\n*   同样的任意大小的数组也支持进行各种函数运算  \n    如: `sin(data)` 和 `sqrt(data)`\n\n#### 求平均值\n\n`mean({v})`\n\n-   针对矩阵的使用: 指定对行还是对列  \n    -   对行: `mean({v},2)`\n    -   对列: `mean({v},1)`\n\n-   针对存在 `NaN` 的解决方案:  \n    1. 使用 `isNaN()` 进行确认\n    2. 使用 `mean({v},\"omitnan\")`计算\n\n    > 可使用 `nnz({v}})` 获知具体的 `NaN` 数量\n\n\n### 数组串接 (Concatenation)\n\n![串接 (Concatenation)](concatenation.png)\n\n1.  横向串接  \n    `x = [A, B]`  \n    *   要求两矩阵的行数(`row`)相同即可\n    *   貌似不要 `,` 也行, 直接 `x = [A B]`\n2.  纵向串接\n    `x = [A; B]`\n    *   要求两矩阵的纵数(`col`)相同即可\n\n### 矩阵构建\n\n#### 函数生成\n\n*   `rand({row},{col})`    生成随机的(0-1)矩阵\n\n*   `zeros({row},{col})`   生成全是0的矩阵\n\n*   `ones({row},{col})`    生成全是1的矩阵\n\n#### 格式转换\n\n*   `reshape({ori},{row},{col})`  \n    将一维的 `vector` 转化为矩阵, 或将原有矩阵改变形状\n    \n    >   `{row}` 或 `{col}` 可采用 `[]` 作为通配符代替\n\n    常见转换: matrix to one col `x(:)` & `reshape(x,[],1)`\n\n# 制图相关\n\n<b>[总指南](https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html)</b>\n\n## 标识与图例\n\n*   `xlabel()` 与 `ylabel()` 分别给 `x` 轴和 `y` 轴添加标识。\n\n*   `title()` 用于给图表添加标识。\n\n*   `legend(\"{sth1}\",\"{sth2}\")` 用于添加图例。  \n    ![legend](legend.png)\n\n*   `xtick()` 和 `xticklabel()`  \n    ![xticklabel](xticklabel.png)\n    `xtick()` 中指明要添加 `label` 的列即可 (index直接指明)  \n    `xticklabel()` 中直接写要添加的文本内容即可\n\n    > 指明的列和文本数量不需匹配\n## 2D制图\n\n### 图表类型\n\n*   折线图 `plot()`  \n    使用方法:  \n    -   `plot(x,y)`\n    -   `plot(x1,y1,x2,y2)` 或 `plot(x,[y1 y2 ...]`\n    -   `plot({matrix})` 效果见图:  \n    ![plotmatrix](plotmatrix.png)\n\n*   散点图 `scatter()`  \n    基本输入与 `plot()` 相同\n    -   更改点的大小 (第三个参数)  \n        `scatter(x,y,{size})`  \n        看起来好像没有上限的样子, 要做成随图像变化的样子则需要标记大小参数长度与 `x` 和 `y` 相同\n    -   更改点的颜色 (第四个参数)\n        `scatter(x,y,[],{color})`  \n        颜色必须为一个 RGB 三元组、每个散射点对应一种颜色的 RGB 三元组所组成的 m×3 矩阵或每个散点对应一个值的 m×1 向量。  \n        不过我做出来都是这种颜色:  \n        ![scattercolor](scattercolor.png)\n    -   更改点  \n        1. 在最后加 `filled` 属性即可实现填充点的效果\n        2. 在最后加 `d` 或其他可以指定点的形状\n*   阶梯图 `stairs()`  \n    与 `plot()` 相同\n*   主干图 `stem()`  \n    与 `plot()` 相同\n*   面积图 `area()`\n    与 `plot()` 相同  \n    *(就是 `plot`加了面积而已*\n*   柱状图 `bar()`  \n    大体与 `plot()` 相同\n    -   堆叠式  \n        添加 `stacked` 属性\n    -   分组  \n        ![bargroup](bargroup.png)\n*   饼图 `pie()`\n\n\n### 以矩阵作图\n\n![matrixplotting](matrixplotting.png)  \n<center>`plot({matrix})`</center>\n\n如果采用 `plot(data)`, 则将\"Month\"视为x轴;  \n而如果是 `plot(data')`, 则\"Years\"为x轴  \n\ny轴是由元素值自动生成的\n\n### 作图相关\n\n* 改变图线: 通过在函数的第三个参数中指定颜色/样式/端点形状.  \n格式如下:  \n\n|颜色|样式|形状|\n|----|----|----|\n|r|--|o|\n|g|:|+|\n|b|-.|*|\n|c|-|.|\n|m|'none'|>|\n\n*   使用 `\"linewidth\",{线宽}` 作为最后的参数可设置线宽。\n\n*   绘制多图: 在 `plot()` 完后,执行 `hold on` 再去 `plot()` 下一个。\n\n*   `xlim` 与 `ylim`  \n    用于手动设置图像范围. 用法: `x/ylim([{起始} {终止}])`\n\n*   `axis tight`  \n    使图像范围适应到数据的最大值和最小值\n\n## 3D制图\n\n### 图表类型\n\n*   标准曲面图  \n    `surf(X,Y,F);`.\n\n    ![`surfc()` 的样子](surfc.png)\n\n*   曲面点图\n    `mesh(X,Y,F);`\n\n    > 还有 `meshc()` 和 `meshz()` , `c` 是等高线; 而 `z` 是底部加固体填充. 具体见图片.\n\n![`meshc()`](meshc.png)\n\n![`meshz()`](meshz.png)\n\n![`plot3()`](plot3.png)\n\n>   `surfc()` 相比原来的 `surf()` 是多加了个等高线在 `X-Y` 面上.\n\n*   等高线图\n    `contour()`\n\n- 使用 `colorbar` 来添加颜色栏 \n\n## 子图绘制 `subplot`\n\n```MatlabScript\n    subplot(m,n,p);\n    subplot(m,n,p,'replace');\n    subplot(m,n,p,'align');\n```\n\n>   `m` / `n` 指代建立的网格横纵数  \n    `p` 指代该图像放在网格的位置 (从左到右数)  \n\n# 编程与脚本\n\n## 创建脚本\n\n使用 `edit [文件名]` 即可.\n\n## 添加注释\n\n在行首添加 `%` .\n\n## 运行脚本\n\n在命令区内输入脚本名称\n\n## 循环语句\n\n```MatlabScript\n    for n = 0:{MAX}\n        [Other codes]\n    end\n```\n\n以上代码展示了自变量 `n` 由0遍历至MAX值的循环语句\n\n> 看起来是使用严格的缩进和\"开始\",\"结束\"标识符来进行代码的分层\n\n## 判断语句\n\n```MatlabScript\n    if num > 100\n        a = 1000\n    elseif num < 0\n        a = -1\n    else\n        a = 0\n    end\n```\n\n(不做过多解释)\n\n","source":"_posts/MATLAB-Cheat-Sheet.md","raw":"---\ntitle: MATLAB Cheat sheet\ndate: 2021-12-18 16:15:39\ntags: \n    - MATLAB\n    - 笔记\n---\n\n# Misc (杂项)\n\n*   用 `\"` 来标识字符串(String); 用 `'` 来表示字符类型(Char)  \n\n*   优雅的MATLAB脚本是有 `;` 作为休止符的\n    > 对赋值命令使用 `;` 则其复制结果不会出现在命令区。\n\n*   使用 `clear` 来清空变量, `clc` 来情况命令区输出\n\n*   `.*` 通过将对应的元素相乘来将数组 A 和 B 相乘。A 和 B 的大小必须相同或兼容。(<i>即 A和 B都是数组之类的玩意 ?</i> )\n\n    > 作图时貌似是很重要的玩意, 必须要有。\n\n![mutlibyelementormartrix](mutlibyelementormartrix.png)\n\n*   使用`format`来控制变量显示的精度  \n    如: `format long`   显示15位小数  \n        `format short`  再切换回4位小数\n\n*   `linspace()` 与 `:` 的区别  \n    ![colonoperatorandlinspace](colonoperatorandlinspace.png)\n    -   `linspace(a,b,N)` 作用:   \n        用于产生从 `a` 到 `b` 之间的N点行线性的矢量。其中 `a` 、`b` 、`N` 分别为起始值、终止值、元素个数。若默认无 `N` ，默认点数为100。  \n    -   `a:S:b` 作用:\n        用于产生从 `a` 到 `b` 之间的矢量。其中 `S` 指代每个数之间的间隔单位。\n    > 可以使用 `x'` 将横向数组换成纵向数组。\n\n*   `meshgrid()` 的使用\n    范例: `[X,Y,Z] = meshgrid(x,y,z)`  \n    > 当只有 `X` 和 `Y` 参数时, 返回二维坐标点, 反之亦然。  \n\n    作为参数的 `x` 和 `y` 的定义应如下所示: `x = 1:3`\n\n*   获取函数的多个输出 : 用`[]`  \n    `[row, col] = size(x)`  \n    得到数组的横纵长度值  \n    `[value, index] = max(x)`  \n    得到数组最大值和其索引值\n\n*   `numel()`  \n    <b>Number of array elements</b>  \n    用于获得数组/矩阵的元素个数\n\n*   `length()`  \n    获取数组/矩阵(未查证)的长度\n\n# 矩阵相关\n\n## 常用函数\n\n### `rand(x,y)`\n\n用于生成随机数的矩阵, `x` 指代行 `y` 指代列。\n### `zeros(x,y)`\n\n用于生成 `0` 的矩阵, `x` 指代行 `y` 指代列。\n\n### `size(x)`\n\n查看矩阵的大小,返回 `行 · 列`的格式。\n### 统计函数\n\n|函数|用途|\n|---|----|\n|`min`|最小值|\n|`max`|最大值|\n|`mean`|平均数|\n|`median`|中位数|\n|`mode`|众数|\n|`std`|标准差|\n|`var`|方差|\n|`sum`|求和|\n|`prod`|元素乘积|\n\n> 可以用已有的矩阵的大小来创建新的数列。如: `rand(size(x))`。\n\n## 矩阵操作\n\n### 清空指定位置的元素值\n\n`data({索引}) = []`\n\n### 排序\n\n`[xSorted,idx] = sort({v},\"descend\")`\n\n*   `xSorted` 是已排序的数组, 顺序有后面的 `descend` 决定\n*   `idx` 是正确顺序的针对现有数组的索引\n*   `descend` -> 递减 `ascend` -> 递增\n*   可以指定 `\"MissingPlacement\"` 的值为 `\"last\"`来放置不太正常的值到排序后数组的最下面\n\n### 通过索引提取特定值\n\n#### 一维数组\n\n使用 `x(index)` 来指定即可。\n\n#### 二维数组 / 矩阵\n\n使用 `x(row,column)` 来指定。\n\n> 指定后可以对特定值直接进行赋值操作。\n\n*   \n    使用 `end` 关键字可以指定\"最后\"的行或列  \n    如: `x = data(end, 3);`\n\n*   使用 `:` 可代表所有\"行\"或\"列\"  \n    如: `x = data(:,3);`\n\n*   如果只使用一种索引 `x` (线性索引), 则它将按顺序从上到下遍历每列。\n\n*   索引可以是非连续的 如: `x = data([1 4 6])`\n\n*   可以构建出比较复杂的索引 如: `x = M([1 2], [1 end])`  \n    如上的代码会选出矩阵中第1,2行的最前和最后的元素\n\n![lineartosub](linearidtosubid.png)\n\n#### 使用逻辑索引来提取\n\n`x = data(data > {数值})`  \n\n这样就会将满足条件的元素添加到 `x` 中去\n\n同样的,这个也支持逻辑运算符 `&`; `|`; `~`  \n如: `x = v1(v1>6 | v1<2)`\n\n*   `isnan(v)` 输出逻辑向量来说明被判断的值是否为空 (1代表空)\n\n### 数组运算\n\n#### 基础运算\n\n*   数组支持基于相同大小的数组的四则运算  \n    `sum = x + y;`\n\n*   或是任意数组与任意标量的运算  \n    `a = x + 2;`\n\n    > 此处隐含着 \"标量扩张\" ([Scalar Expansion](https://blogs.mathworks.com/loren/2006/02/22/scalar-expansion-and-more-take-2/)) 的概念\n\n*   同样的任意大小的数组也支持进行各种函数运算  \n    如: `sin(data)` 和 `sqrt(data)`\n\n#### 求平均值\n\n`mean({v})`\n\n-   针对矩阵的使用: 指定对行还是对列  \n    -   对行: `mean({v},2)`\n    -   对列: `mean({v},1)`\n\n-   针对存在 `NaN` 的解决方案:  \n    1. 使用 `isNaN()` 进行确认\n    2. 使用 `mean({v},\"omitnan\")`计算\n\n    > 可使用 `nnz({v}})` 获知具体的 `NaN` 数量\n\n\n### 数组串接 (Concatenation)\n\n![串接 (Concatenation)](concatenation.png)\n\n1.  横向串接  \n    `x = [A, B]`  \n    *   要求两矩阵的行数(`row`)相同即可\n    *   貌似不要 `,` 也行, 直接 `x = [A B]`\n2.  纵向串接\n    `x = [A; B]`\n    *   要求两矩阵的纵数(`col`)相同即可\n\n### 矩阵构建\n\n#### 函数生成\n\n*   `rand({row},{col})`    生成随机的(0-1)矩阵\n\n*   `zeros({row},{col})`   生成全是0的矩阵\n\n*   `ones({row},{col})`    生成全是1的矩阵\n\n#### 格式转换\n\n*   `reshape({ori},{row},{col})`  \n    将一维的 `vector` 转化为矩阵, 或将原有矩阵改变形状\n    \n    >   `{row}` 或 `{col}` 可采用 `[]` 作为通配符代替\n\n    常见转换: matrix to one col `x(:)` & `reshape(x,[],1)`\n\n# 制图相关\n\n<b>[总指南](https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html)</b>\n\n## 标识与图例\n\n*   `xlabel()` 与 `ylabel()` 分别给 `x` 轴和 `y` 轴添加标识。\n\n*   `title()` 用于给图表添加标识。\n\n*   `legend(\"{sth1}\",\"{sth2}\")` 用于添加图例。  \n    ![legend](legend.png)\n\n*   `xtick()` 和 `xticklabel()`  \n    ![xticklabel](xticklabel.png)\n    `xtick()` 中指明要添加 `label` 的列即可 (index直接指明)  \n    `xticklabel()` 中直接写要添加的文本内容即可\n\n    > 指明的列和文本数量不需匹配\n## 2D制图\n\n### 图表类型\n\n*   折线图 `plot()`  \n    使用方法:  \n    -   `plot(x,y)`\n    -   `plot(x1,y1,x2,y2)` 或 `plot(x,[y1 y2 ...]`\n    -   `plot({matrix})` 效果见图:  \n    ![plotmatrix](plotmatrix.png)\n\n*   散点图 `scatter()`  \n    基本输入与 `plot()` 相同\n    -   更改点的大小 (第三个参数)  \n        `scatter(x,y,{size})`  \n        看起来好像没有上限的样子, 要做成随图像变化的样子则需要标记大小参数长度与 `x` 和 `y` 相同\n    -   更改点的颜色 (第四个参数)\n        `scatter(x,y,[],{color})`  \n        颜色必须为一个 RGB 三元组、每个散射点对应一种颜色的 RGB 三元组所组成的 m×3 矩阵或每个散点对应一个值的 m×1 向量。  \n        不过我做出来都是这种颜色:  \n        ![scattercolor](scattercolor.png)\n    -   更改点  \n        1. 在最后加 `filled` 属性即可实现填充点的效果\n        2. 在最后加 `d` 或其他可以指定点的形状\n*   阶梯图 `stairs()`  \n    与 `plot()` 相同\n*   主干图 `stem()`  \n    与 `plot()` 相同\n*   面积图 `area()`\n    与 `plot()` 相同  \n    *(就是 `plot`加了面积而已*\n*   柱状图 `bar()`  \n    大体与 `plot()` 相同\n    -   堆叠式  \n        添加 `stacked` 属性\n    -   分组  \n        ![bargroup](bargroup.png)\n*   饼图 `pie()`\n\n\n### 以矩阵作图\n\n![matrixplotting](matrixplotting.png)  \n<center>`plot({matrix})`</center>\n\n如果采用 `plot(data)`, 则将\"Month\"视为x轴;  \n而如果是 `plot(data')`, 则\"Years\"为x轴  \n\ny轴是由元素值自动生成的\n\n### 作图相关\n\n* 改变图线: 通过在函数的第三个参数中指定颜色/样式/端点形状.  \n格式如下:  \n\n|颜色|样式|形状|\n|----|----|----|\n|r|--|o|\n|g|:|+|\n|b|-.|*|\n|c|-|.|\n|m|'none'|>|\n\n*   使用 `\"linewidth\",{线宽}` 作为最后的参数可设置线宽。\n\n*   绘制多图: 在 `plot()` 完后,执行 `hold on` 再去 `plot()` 下一个。\n\n*   `xlim` 与 `ylim`  \n    用于手动设置图像范围. 用法: `x/ylim([{起始} {终止}])`\n\n*   `axis tight`  \n    使图像范围适应到数据的最大值和最小值\n\n## 3D制图\n\n### 图表类型\n\n*   标准曲面图  \n    `surf(X,Y,F);`.\n\n    ![`surfc()` 的样子](surfc.png)\n\n*   曲面点图\n    `mesh(X,Y,F);`\n\n    > 还有 `meshc()` 和 `meshz()` , `c` 是等高线; 而 `z` 是底部加固体填充. 具体见图片.\n\n![`meshc()`](meshc.png)\n\n![`meshz()`](meshz.png)\n\n![`plot3()`](plot3.png)\n\n>   `surfc()` 相比原来的 `surf()` 是多加了个等高线在 `X-Y` 面上.\n\n*   等高线图\n    `contour()`\n\n- 使用 `colorbar` 来添加颜色栏 \n\n## 子图绘制 `subplot`\n\n```MatlabScript\n    subplot(m,n,p);\n    subplot(m,n,p,'replace');\n    subplot(m,n,p,'align');\n```\n\n>   `m` / `n` 指代建立的网格横纵数  \n    `p` 指代该图像放在网格的位置 (从左到右数)  \n\n# 编程与脚本\n\n## 创建脚本\n\n使用 `edit [文件名]` 即可.\n\n## 添加注释\n\n在行首添加 `%` .\n\n## 运行脚本\n\n在命令区内输入脚本名称\n\n## 循环语句\n\n```MatlabScript\n    for n = 0:{MAX}\n        [Other codes]\n    end\n```\n\n以上代码展示了自变量 `n` 由0遍历至MAX值的循环语句\n\n> 看起来是使用严格的缩进和\"开始\",\"结束\"标识符来进行代码的分层\n\n## 判断语句\n\n```MatlabScript\n    if num > 100\n        a = 1000\n    elseif num < 0\n        a = -1\n    else\n        a = 0\n    end\n```\n\n(不做过多解释)\n\n","slug":"MATLAB-Cheat-Sheet","published":1,"updated":"2023-08-05T06:14:33.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuq00062qbhabvib018","content":"<h1 id=\"Misc-杂项\"><a href=\"#Misc-杂项\" class=\"headerlink\" title=\"Misc (杂项)\"></a>Misc (杂项)</h1><ul>\n<li><p>  用 <code>&quot;</code> 来标识字符串(String); 用 <code>&#39;</code> 来表示字符类型(Char)  </p>\n</li>\n<li><p>优雅的MATLAB脚本是有 <code>;</code> 作为休止符的</p>\n<blockquote>\n<p>对赋值命令使用 <code>;</code> 则其复制结果不会出现在命令区。</p>\n</blockquote>\n</li>\n<li><p>  使用 <code>clear</code> 来清空变量, <code>clc</code> 来情况命令区输出</p>\n</li>\n<li><p><code>.*</code> 通过将对应的元素相乘来将数组 A 和 B 相乘。A 和 B 的大小必须相同或兼容。(<i>即 A和 B都是数组之类的玩意 ?</i> )</p>\n<blockquote>\n<p>作图时貌似是很重要的玩意, 必须要有。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/mutlibyelementormartrix.png\" alt=\"mutlibyelementormartrix\"></p>\n<ul>\n<li><p>使用<code>format</code>来控制变量显示的精度<br>  如: <code>format long</code>   显示15位小数  </p>\n<pre><code>  `format short`  再切换回4位小数\n</code></pre>\n</li>\n<li><p><code>linspace()</code> 与 <code>:</code> 的区别<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/colonoperatorandlinspace.png\" alt=\"colonoperatorandlinspace\"></p>\n<ul>\n<li><code>linspace(a,b,N)</code> 作用:<br>  用于产生从 <code>a</code> 到 <code>b</code> 之间的N点行线性的矢量。其中 <code>a</code> 、<code>b</code> 、<code>N</code> 分别为起始值、终止值、元素个数。若默认无 <code>N</code> ，默认点数为100。  </li>\n<li><code>a:S:b</code> 作用:<br>  用于产生从 <code>a</code> 到 <code>b</code> 之间的矢量。其中 <code>S</code> 指代每个数之间的间隔单位。<blockquote>\n<p>可以使用 <code>x&#39;</code> 将横向数组换成纵向数组。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>meshgrid()</code> 的使用<br>  范例: <code>[X,Y,Z] = meshgrid(x,y,z)</code>  </p>\n<blockquote>\n<p>当只有 <code>X</code> 和 <code>Y</code> 参数时, 返回二维坐标点, 反之亦然。  </p>\n</blockquote>\n<p>  作为参数的 <code>x</code> 和 <code>y</code> 的定义应如下所示: <code>x = 1:3</code></p>\n</li>\n<li><p>获取函数的多个输出 : 用<code>[]</code><br>  <code>[row, col] = size(x)</code><br>  得到数组的横纵长度值<br>  <code>[value, index] = max(x)</code><br>  得到数组最大值和其索引值</p>\n</li>\n<li><p><code>numel()</code><br>  <b>Number of array elements</b><br>  用于获得数组/矩阵的元素个数</p>\n</li>\n<li><p><code>length()</code><br>  获取数组/矩阵(未查证)的长度</p>\n</li>\n</ul>\n<h1 id=\"矩阵相关\"><a href=\"#矩阵相关\" class=\"headerlink\" title=\"矩阵相关\"></a>矩阵相关</h1><h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"rand-x-y\"><a href=\"#rand-x-y\" class=\"headerlink\" title=\"rand(x,y)\"></a><code>rand(x,y)</code></h3><p>用于生成随机数的矩阵, <code>x</code> 指代行 <code>y</code> 指代列。</p>\n<h3 id=\"zeros-x-y\"><a href=\"#zeros-x-y\" class=\"headerlink\" title=\"zeros(x,y)\"></a><code>zeros(x,y)</code></h3><p>用于生成 <code>0</code> 的矩阵, <code>x</code> 指代行 <code>y</code> 指代列。</p>\n<h3 id=\"size-x\"><a href=\"#size-x\" class=\"headerlink\" title=\"size(x)\"></a><code>size(x)</code></h3><p>查看矩阵的大小,返回 <code>行 · 列</code>的格式。</p>\n<h3 id=\"统计函数\"><a href=\"#统计函数\" class=\"headerlink\" title=\"统计函数\"></a>统计函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>min</code></td>\n<td>最小值</td>\n</tr>\n<tr>\n<td><code>max</code></td>\n<td>最大值</td>\n</tr>\n<tr>\n<td><code>mean</code></td>\n<td>平均数</td>\n</tr>\n<tr>\n<td><code>median</code></td>\n<td>中位数</td>\n</tr>\n<tr>\n<td><code>mode</code></td>\n<td>众数</td>\n</tr>\n<tr>\n<td><code>std</code></td>\n<td>标准差</td>\n</tr>\n<tr>\n<td><code>var</code></td>\n<td>方差</td>\n</tr>\n<tr>\n<td><code>sum</code></td>\n<td>求和</td>\n</tr>\n<tr>\n<td><code>prod</code></td>\n<td>元素乘积</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>可以用已有的矩阵的大小来创建新的数列。如: <code>rand(size(x))</code>。</p>\n</blockquote>\n<h2 id=\"矩阵操作\"><a href=\"#矩阵操作\" class=\"headerlink\" title=\"矩阵操作\"></a>矩阵操作</h2><h3 id=\"清空指定位置的元素值\"><a href=\"#清空指定位置的元素值\" class=\"headerlink\" title=\"清空指定位置的元素值\"></a>清空指定位置的元素值</h3><p><code>data(&#123;索引&#125;) = []</code></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p><code>[xSorted,idx] = sort(&#123;v&#125;,&quot;descend&quot;)</code></p>\n<ul>\n<li>  <code>xSorted</code> 是已排序的数组, 顺序有后面的 <code>descend</code> 决定</li>\n<li>  <code>idx</code> 是正确顺序的针对现有数组的索引</li>\n<li>  <code>descend</code> -&gt; 递减 <code>ascend</code> -&gt; 递增</li>\n<li>  可以指定 <code>&quot;MissingPlacement&quot;</code> 的值为 <code>&quot;last&quot;</code>来放置不太正常的值到排序后数组的最下面</li>\n</ul>\n<h3 id=\"通过索引提取特定值\"><a href=\"#通过索引提取特定值\" class=\"headerlink\" title=\"通过索引提取特定值\"></a>通过索引提取特定值</h3><h4 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h4><p>使用 <code>x(index)</code> 来指定即可。</p>\n<h4 id=\"二维数组-矩阵\"><a href=\"#二维数组-矩阵\" class=\"headerlink\" title=\"二维数组 / 矩阵\"></a>二维数组 / 矩阵</h4><p>使用 <code>x(row,column)</code> 来指定。</p>\n<blockquote>\n<p>指定后可以对特定值直接进行赋值操作。</p>\n</blockquote>\n<ul>\n<li><p>  使用 <code>end</code> 关键字可以指定”最后”的行或列<br>  如: <code>x = data(end, 3);</code></p>\n</li>\n<li><p>使用 <code>:</code> 可代表所有”行”或”列”<br>  如: <code>x = data(:,3);</code></p>\n</li>\n<li><p>  如果只使用一种索引 <code>x</code> (线性索引), 则它将按顺序从上到下遍历每列。</p>\n</li>\n<li><p>  索引可以是非连续的 如: <code>x = data([1 4 6])</code></p>\n</li>\n<li><p>可以构建出比较复杂的索引 如: <code>x = M([1 2], [1 end])</code><br>  如上的代码会选出矩阵中第1,2行的最前和最后的元素</p>\n</li>\n</ul>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/linearidtosubid.png\" alt=\"lineartosub\"></p>\n<h4 id=\"使用逻辑索引来提取\"><a href=\"#使用逻辑索引来提取\" class=\"headerlink\" title=\"使用逻辑索引来提取\"></a>使用逻辑索引来提取</h4><p><code>x = data(data &gt; &#123;数值&#125;)</code>  </p>\n<p>这样就会将满足条件的元素添加到 <code>x</code> 中去</p>\n<p>同样的,这个也支持逻辑运算符 <code>&amp;</code>; <code>|</code>; <code>~</code><br>如: <code>x = v1(v1&gt;6 | v1&lt;2)</code></p>\n<ul>\n<li>  <code>isnan(v)</code> 输出逻辑向量来说明被判断的值是否为空 (1代表空)</li>\n</ul>\n<h3 id=\"数组运算\"><a href=\"#数组运算\" class=\"headerlink\" title=\"数组运算\"></a>数组运算</h3><h4 id=\"基础运算\"><a href=\"#基础运算\" class=\"headerlink\" title=\"基础运算\"></a>基础运算</h4><ul>\n<li><p>数组支持基于相同大小的数组的四则运算<br>  <code>sum = x + y;</code></p>\n</li>\n<li><p>或是任意数组与任意标量的运算<br>  <code>a = x + 2;</code></p>\n<blockquote>\n<p>此处隐含着 “标量扩张” (<a href=\"https://blogs.mathworks.com/loren/2006/02/22/scalar-expansion-and-more-take-2/\">Scalar Expansion</a>) 的概念</p>\n</blockquote>\n</li>\n<li><p>同样的任意大小的数组也支持进行各种函数运算<br>  如: <code>sin(data)</code> 和 <code>sqrt(data)</code></p>\n</li>\n</ul>\n<h4 id=\"求平均值\"><a href=\"#求平均值\" class=\"headerlink\" title=\"求平均值\"></a>求平均值</h4><p><code>mean(&#123;v&#125;)</code></p>\n<ul>\n<li><p>针对矩阵的使用: 指定对行还是对列  </p>\n<ul>\n<li>  对行: <code>mean(&#123;v&#125;,2)</code></li>\n<li>  对列: <code>mean(&#123;v&#125;,1)</code></li>\n</ul>\n</li>\n<li><p>针对存在 <code>NaN</code> 的解决方案:  </p>\n<ol>\n<li>使用 <code>isNaN()</code> 进行确认</li>\n<li>使用 <code>mean(&#123;v&#125;,&quot;omitnan&quot;)</code>计算</li>\n</ol>\n<blockquote>\n<p>可使用 <code>nnz(&#123;v&#125;&#125;)</code> 获知具体的 <code>NaN</code> 数量</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"数组串接-Concatenation\"><a href=\"#数组串接-Concatenation\" class=\"headerlink\" title=\"数组串接 (Concatenation)\"></a>数组串接 (Concatenation)</h3><p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/concatenation.png\" alt=\"串接 (Concatenation)\"></p>\n<ol>\n<li>横向串接<br> <code>x = [A, B]</code>  <ul>\n<li>  要求两矩阵的行数(<code>row</code>)相同即可</li>\n<li>  貌似不要 <code>,</code> 也行, 直接 <code>x = [A B]</code></li>\n</ul>\n</li>\n<li>纵向串接<br> <code>x = [A; B]</code><ul>\n<li>  要求两矩阵的纵数(<code>col</code>)相同即可</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"矩阵构建\"><a href=\"#矩阵构建\" class=\"headerlink\" title=\"矩阵构建\"></a>矩阵构建</h3><h4 id=\"函数生成\"><a href=\"#函数生成\" class=\"headerlink\" title=\"函数生成\"></a>函数生成</h4><ul>\n<li><p>  <code>rand(&#123;row&#125;,&#123;col&#125;)</code>    生成随机的(0-1)矩阵</p>\n</li>\n<li><p>  <code>zeros(&#123;row&#125;,&#123;col&#125;)</code>   生成全是0的矩阵</p>\n</li>\n<li><p>  <code>ones(&#123;row&#125;,&#123;col&#125;)</code>    生成全是1的矩阵</p>\n</li>\n</ul>\n<h4 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h4><ul>\n<li><p><code>reshape(&#123;ori&#125;,&#123;row&#125;,&#123;col&#125;)</code><br>  将一维的 <code>vector</code> 转化为矩阵, 或将原有矩阵改变形状</p>\n<blockquote>\n<p>  <code>&#123;row&#125;</code> 或 <code>&#123;col&#125;</code> 可采用 <code>[]</code> 作为通配符代替</p>\n</blockquote>\n<p>  常见转换: matrix to one col <code>x(:)</code> &amp; <code>reshape(x,[],1)</code></p>\n</li>\n</ul>\n<h1 id=\"制图相关\"><a href=\"#制图相关\" class=\"headerlink\" title=\"制图相关\"></a>制图相关</h1><p><b><a href=\"https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html\">总指南</a></b></p>\n<h2 id=\"标识与图例\"><a href=\"#标识与图例\" class=\"headerlink\" title=\"标识与图例\"></a>标识与图例</h2><ul>\n<li><p>  <code>xlabel()</code> 与 <code>ylabel()</code> 分别给 <code>x</code> 轴和 <code>y</code> 轴添加标识。</p>\n</li>\n<li><p>  <code>title()</code> 用于给图表添加标识。</p>\n</li>\n<li><p><code>legend(&quot;&#123;sth1&#125;&quot;,&quot;&#123;sth2&#125;&quot;)</code> 用于添加图例。<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/legend.png\" alt=\"legend\"></p>\n</li>\n<li><p><code>xtick()</code> 和 <code>xticklabel()</code><br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/xticklabel.png\" alt=\"xticklabel\"><br>  <code>xtick()</code> 中指明要添加 <code>label</code> 的列即可 (index直接指明)<br>  <code>xticklabel()</code> 中直接写要添加的文本内容即可</p>\n<blockquote>\n<p>指明的列和文本数量不需匹配</p>\n</blockquote>\n<h2 id=\"2D制图\"><a href=\"#2D制图\" class=\"headerlink\" title=\"2D制图\"></a>2D制图</h2></li>\n</ul>\n<h3 id=\"图表类型\"><a href=\"#图表类型\" class=\"headerlink\" title=\"图表类型\"></a>图表类型</h3><ul>\n<li><p>折线图 <code>plot()</code><br>  使用方法:  </p>\n<ul>\n<li>  <code>plot(x,y)</code></li>\n<li>  <code>plot(x1,y1,x2,y2)</code> 或 <code>plot(x,[y1 y2 ...]</code></li>\n<li><code>plot(&#123;matrix&#125;)</code> 效果见图:<br><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/plotmatrix.png\" alt=\"plotmatrix\"></li>\n</ul>\n</li>\n<li><p>散点图 <code>scatter()</code><br>  基本输入与 <code>plot()</code> 相同</p>\n<ul>\n<li>更改点的大小 (第三个参数)<br>  <code>scatter(x,y,&#123;size&#125;)</code><br>  看起来好像没有上限的样子, 要做成随图像变化的样子则需要标记大小参数长度与 <code>x</code> 和 <code>y</code> 相同</li>\n<li>更改点的颜色 (第四个参数)<br>  <code>scatter(x,y,[],&#123;color&#125;)</code><br>  颜色必须为一个 RGB 三元组、每个散射点对应一种颜色的 RGB 三元组所组成的 m×3 矩阵或每个散点对应一个值的 m×1 向量。<br>  不过我做出来都是这种颜色:<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/scattercolor.png\" alt=\"scattercolor\"></li>\n<li>更改点  <ol>\n<li>在最后加 <code>filled</code> 属性即可实现填充点的效果</li>\n<li>在最后加 <code>d</code> 或其他可以指定点的形状</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>阶梯图 <code>stairs()</code><br>  与 <code>plot()</code> 相同</p>\n</li>\n<li><p>主干图 <code>stem()</code><br>  与 <code>plot()</code> 相同</p>\n</li>\n<li><p>面积图 <code>area()</code><br>  与 <code>plot()</code> 相同<br>  <em>(就是 <code>plot</code>加了面积而已</em></p>\n</li>\n<li><p>柱状图 <code>bar()</code><br>  大体与 <code>plot()</code> 相同</p>\n<ul>\n<li>堆叠式<br>  添加 <code>stacked</code> 属性</li>\n<li>分组<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/bargroup.png\" alt=\"bargroup\"></li>\n</ul>\n</li>\n<li><p>  饼图 <code>pie()</code></p>\n</li>\n</ul>\n<h3 id=\"以矩阵作图\"><a href=\"#以矩阵作图\" class=\"headerlink\" title=\"以矩阵作图\"></a>以矩阵作图</h3><p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/matrixplotting.png\" alt=\"matrixplotting\">  </p>\n<center>`plot({matrix})`</center>\n\n<p>如果采用 <code>plot(data)</code>, 则将”Month”视为x轴;<br>而如果是 <code>plot(data&#39;)</code>, 则”Years”为x轴  </p>\n<p>y轴是由元素值自动生成的</p>\n<h3 id=\"作图相关\"><a href=\"#作图相关\" class=\"headerlink\" title=\"作图相关\"></a>作图相关</h3><ul>\n<li>改变图线: 通过在函数的第三个参数中指定颜色/样式/端点形状.<br>格式如下:  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>颜色</th>\n<th>样式</th>\n<th>形状</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>–</td>\n<td>o</td>\n</tr>\n<tr>\n<td>g</td>\n<td>:</td>\n<td>+</td>\n</tr>\n<tr>\n<td>b</td>\n<td>-.</td>\n<td>*</td>\n</tr>\n<tr>\n<td>c</td>\n<td>-</td>\n<td>.</td>\n</tr>\n<tr>\n<td>m</td>\n<td>‘none’</td>\n<td>&gt;</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>  使用 <code>&quot;linewidth&quot;,&#123;线宽&#125;</code> 作为最后的参数可设置线宽。</p>\n</li>\n<li><p>  绘制多图: 在 <code>plot()</code> 完后,执行 <code>hold on</code> 再去 <code>plot()</code> 下一个。</p>\n</li>\n<li><p><code>xlim</code> 与 <code>ylim</code><br>  用于手动设置图像范围. 用法: <code>x/ylim([&#123;起始&#125; &#123;终止&#125;])</code></p>\n</li>\n<li><p><code>axis tight</code><br>  使图像范围适应到数据的最大值和最小值</p>\n</li>\n</ul>\n<h2 id=\"3D制图\"><a href=\"#3D制图\" class=\"headerlink\" title=\"3D制图\"></a>3D制图</h2><h3 id=\"图表类型-1\"><a href=\"#图表类型-1\" class=\"headerlink\" title=\"图表类型\"></a>图表类型</h3><ul>\n<li><p>标准曲面图<br>  <code>surf(X,Y,F);</code>.</p>\n<p>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/surfc.png\" alt=\"`surfc()` 的样子\"></p>\n</li>\n<li><p>曲面点图<br>  <code>mesh(X,Y,F);</code></p>\n<blockquote>\n<p>还有 <code>meshc()</code> 和 <code>meshz()</code> , <code>c</code> 是等高线; 而 <code>z</code> 是底部加固体填充. 具体见图片.</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/meshc.png\" alt=\"`meshc()`\"></p>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/meshz.png\" alt=\"`meshz()`\"></p>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/plot3.png\" alt=\"`plot3()`\"></p>\n<blockquote>\n<p>  <code>surfc()</code> 相比原来的 <code>surf()</code> 是多加了个等高线在 <code>X-Y</code> 面上.</p>\n</blockquote>\n<ul>\n<li>等高线图<br>  <code>contour()</code></li>\n</ul>\n<ul>\n<li>使用 <code>colorbar</code> 来添加颜色栏 </li>\n</ul>\n<h2 id=\"子图绘制-subplot\"><a href=\"#子图绘制-subplot\" class=\"headerlink\" title=\"子图绘制 subplot\"></a>子图绘制 <code>subplot</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subplot(m,n,p);</span><br><span class=\"line\">subplot(m,n,p,&#x27;replace&#x27;);</span><br><span class=\"line\">subplot(m,n,p,&#x27;align&#x27;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <code>m</code> / <code>n</code> 指代建立的网格横纵数<br>    <code>p</code> 指代该图像放在网格的位置 (从左到右数)  </p>\n</blockquote>\n<h1 id=\"编程与脚本\"><a href=\"#编程与脚本\" class=\"headerlink\" title=\"编程与脚本\"></a>编程与脚本</h1><h2 id=\"创建脚本\"><a href=\"#创建脚本\" class=\"headerlink\" title=\"创建脚本\"></a>创建脚本</h2><p>使用 <code>edit [文件名]</code> 即可.</p>\n<h2 id=\"添加注释\"><a href=\"#添加注释\" class=\"headerlink\" title=\"添加注释\"></a>添加注释</h2><p>在行首添加 <code>%</code> .</p>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>在命令区内输入脚本名称</p>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n = 0:&#123;MAX&#125;</span><br><span class=\"line\">    [Other codes]</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>以上代码展示了自变量 <code>n</code> 由0遍历至MAX值的循环语句</p>\n<blockquote>\n<p>看起来是使用严格的缩进和”开始”,”结束”标识符来进行代码的分层</p>\n</blockquote>\n<h2 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if num &gt; 100</span><br><span class=\"line\">    a = 1000</span><br><span class=\"line\">elseif num &lt; 0</span><br><span class=\"line\">    a = -1</span><br><span class=\"line\">else</span><br><span class=\"line\">    a = 0</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>(不做过多解释)</p>\n","site":{"data":{}},"length":1992,"excerpt":"","more":"<h1 id=\"Misc-杂项\"><a href=\"#Misc-杂项\" class=\"headerlink\" title=\"Misc (杂项)\"></a>Misc (杂项)</h1><ul>\n<li><p>  用 <code>&quot;</code> 来标识字符串(String); 用 <code>&#39;</code> 来表示字符类型(Char)  </p>\n</li>\n<li><p>优雅的MATLAB脚本是有 <code>;</code> 作为休止符的</p>\n<blockquote>\n<p>对赋值命令使用 <code>;</code> 则其复制结果不会出现在命令区。</p>\n</blockquote>\n</li>\n<li><p>  使用 <code>clear</code> 来清空变量, <code>clc</code> 来情况命令区输出</p>\n</li>\n<li><p><code>.*</code> 通过将对应的元素相乘来将数组 A 和 B 相乘。A 和 B 的大小必须相同或兼容。(<i>即 A和 B都是数组之类的玩意 ?</i> )</p>\n<blockquote>\n<p>作图时貌似是很重要的玩意, 必须要有。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/mutlibyelementormartrix.png\" alt=\"mutlibyelementormartrix\"></p>\n<ul>\n<li><p>使用<code>format</code>来控制变量显示的精度<br>  如: <code>format long</code>   显示15位小数  </p>\n<pre><code>  `format short`  再切换回4位小数\n</code></pre>\n</li>\n<li><p><code>linspace()</code> 与 <code>:</code> 的区别<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/colonoperatorandlinspace.png\" alt=\"colonoperatorandlinspace\"></p>\n<ul>\n<li><code>linspace(a,b,N)</code> 作用:<br>  用于产生从 <code>a</code> 到 <code>b</code> 之间的N点行线性的矢量。其中 <code>a</code> 、<code>b</code> 、<code>N</code> 分别为起始值、终止值、元素个数。若默认无 <code>N</code> ，默认点数为100。  </li>\n<li><code>a:S:b</code> 作用:<br>  用于产生从 <code>a</code> 到 <code>b</code> 之间的矢量。其中 <code>S</code> 指代每个数之间的间隔单位。<blockquote>\n<p>可以使用 <code>x&#39;</code> 将横向数组换成纵向数组。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>meshgrid()</code> 的使用<br>  范例: <code>[X,Y,Z] = meshgrid(x,y,z)</code>  </p>\n<blockquote>\n<p>当只有 <code>X</code> 和 <code>Y</code> 参数时, 返回二维坐标点, 反之亦然。  </p>\n</blockquote>\n<p>  作为参数的 <code>x</code> 和 <code>y</code> 的定义应如下所示: <code>x = 1:3</code></p>\n</li>\n<li><p>获取函数的多个输出 : 用<code>[]</code><br>  <code>[row, col] = size(x)</code><br>  得到数组的横纵长度值<br>  <code>[value, index] = max(x)</code><br>  得到数组最大值和其索引值</p>\n</li>\n<li><p><code>numel()</code><br>  <b>Number of array elements</b><br>  用于获得数组/矩阵的元素个数</p>\n</li>\n<li><p><code>length()</code><br>  获取数组/矩阵(未查证)的长度</p>\n</li>\n</ul>\n<h1 id=\"矩阵相关\"><a href=\"#矩阵相关\" class=\"headerlink\" title=\"矩阵相关\"></a>矩阵相关</h1><h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"rand-x-y\"><a href=\"#rand-x-y\" class=\"headerlink\" title=\"rand(x,y)\"></a><code>rand(x,y)</code></h3><p>用于生成随机数的矩阵, <code>x</code> 指代行 <code>y</code> 指代列。</p>\n<h3 id=\"zeros-x-y\"><a href=\"#zeros-x-y\" class=\"headerlink\" title=\"zeros(x,y)\"></a><code>zeros(x,y)</code></h3><p>用于生成 <code>0</code> 的矩阵, <code>x</code> 指代行 <code>y</code> 指代列。</p>\n<h3 id=\"size-x\"><a href=\"#size-x\" class=\"headerlink\" title=\"size(x)\"></a><code>size(x)</code></h3><p>查看矩阵的大小,返回 <code>行 · 列</code>的格式。</p>\n<h3 id=\"统计函数\"><a href=\"#统计函数\" class=\"headerlink\" title=\"统计函数\"></a>统计函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>min</code></td>\n<td>最小值</td>\n</tr>\n<tr>\n<td><code>max</code></td>\n<td>最大值</td>\n</tr>\n<tr>\n<td><code>mean</code></td>\n<td>平均数</td>\n</tr>\n<tr>\n<td><code>median</code></td>\n<td>中位数</td>\n</tr>\n<tr>\n<td><code>mode</code></td>\n<td>众数</td>\n</tr>\n<tr>\n<td><code>std</code></td>\n<td>标准差</td>\n</tr>\n<tr>\n<td><code>var</code></td>\n<td>方差</td>\n</tr>\n<tr>\n<td><code>sum</code></td>\n<td>求和</td>\n</tr>\n<tr>\n<td><code>prod</code></td>\n<td>元素乘积</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>可以用已有的矩阵的大小来创建新的数列。如: <code>rand(size(x))</code>。</p>\n</blockquote>\n<h2 id=\"矩阵操作\"><a href=\"#矩阵操作\" class=\"headerlink\" title=\"矩阵操作\"></a>矩阵操作</h2><h3 id=\"清空指定位置的元素值\"><a href=\"#清空指定位置的元素值\" class=\"headerlink\" title=\"清空指定位置的元素值\"></a>清空指定位置的元素值</h3><p><code>data(&#123;索引&#125;) = []</code></p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p><code>[xSorted,idx] = sort(&#123;v&#125;,&quot;descend&quot;)</code></p>\n<ul>\n<li>  <code>xSorted</code> 是已排序的数组, 顺序有后面的 <code>descend</code> 决定</li>\n<li>  <code>idx</code> 是正确顺序的针对现有数组的索引</li>\n<li>  <code>descend</code> -&gt; 递减 <code>ascend</code> -&gt; 递增</li>\n<li>  可以指定 <code>&quot;MissingPlacement&quot;</code> 的值为 <code>&quot;last&quot;</code>来放置不太正常的值到排序后数组的最下面</li>\n</ul>\n<h3 id=\"通过索引提取特定值\"><a href=\"#通过索引提取特定值\" class=\"headerlink\" title=\"通过索引提取特定值\"></a>通过索引提取特定值</h3><h4 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h4><p>使用 <code>x(index)</code> 来指定即可。</p>\n<h4 id=\"二维数组-矩阵\"><a href=\"#二维数组-矩阵\" class=\"headerlink\" title=\"二维数组 / 矩阵\"></a>二维数组 / 矩阵</h4><p>使用 <code>x(row,column)</code> 来指定。</p>\n<blockquote>\n<p>指定后可以对特定值直接进行赋值操作。</p>\n</blockquote>\n<ul>\n<li><p>  使用 <code>end</code> 关键字可以指定”最后”的行或列<br>  如: <code>x = data(end, 3);</code></p>\n</li>\n<li><p>使用 <code>:</code> 可代表所有”行”或”列”<br>  如: <code>x = data(:,3);</code></p>\n</li>\n<li><p>  如果只使用一种索引 <code>x</code> (线性索引), 则它将按顺序从上到下遍历每列。</p>\n</li>\n<li><p>  索引可以是非连续的 如: <code>x = data([1 4 6])</code></p>\n</li>\n<li><p>可以构建出比较复杂的索引 如: <code>x = M([1 2], [1 end])</code><br>  如上的代码会选出矩阵中第1,2行的最前和最后的元素</p>\n</li>\n</ul>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/linearidtosubid.png\" alt=\"lineartosub\"></p>\n<h4 id=\"使用逻辑索引来提取\"><a href=\"#使用逻辑索引来提取\" class=\"headerlink\" title=\"使用逻辑索引来提取\"></a>使用逻辑索引来提取</h4><p><code>x = data(data &gt; &#123;数值&#125;)</code>  </p>\n<p>这样就会将满足条件的元素添加到 <code>x</code> 中去</p>\n<p>同样的,这个也支持逻辑运算符 <code>&amp;</code>; <code>|</code>; <code>~</code><br>如: <code>x = v1(v1&gt;6 | v1&lt;2)</code></p>\n<ul>\n<li>  <code>isnan(v)</code> 输出逻辑向量来说明被判断的值是否为空 (1代表空)</li>\n</ul>\n<h3 id=\"数组运算\"><a href=\"#数组运算\" class=\"headerlink\" title=\"数组运算\"></a>数组运算</h3><h4 id=\"基础运算\"><a href=\"#基础运算\" class=\"headerlink\" title=\"基础运算\"></a>基础运算</h4><ul>\n<li><p>数组支持基于相同大小的数组的四则运算<br>  <code>sum = x + y;</code></p>\n</li>\n<li><p>或是任意数组与任意标量的运算<br>  <code>a = x + 2;</code></p>\n<blockquote>\n<p>此处隐含着 “标量扩张” (<a href=\"https://blogs.mathworks.com/loren/2006/02/22/scalar-expansion-and-more-take-2/\">Scalar Expansion</a>) 的概念</p>\n</blockquote>\n</li>\n<li><p>同样的任意大小的数组也支持进行各种函数运算<br>  如: <code>sin(data)</code> 和 <code>sqrt(data)</code></p>\n</li>\n</ul>\n<h4 id=\"求平均值\"><a href=\"#求平均值\" class=\"headerlink\" title=\"求平均值\"></a>求平均值</h4><p><code>mean(&#123;v&#125;)</code></p>\n<ul>\n<li><p>针对矩阵的使用: 指定对行还是对列  </p>\n<ul>\n<li>  对行: <code>mean(&#123;v&#125;,2)</code></li>\n<li>  对列: <code>mean(&#123;v&#125;,1)</code></li>\n</ul>\n</li>\n<li><p>针对存在 <code>NaN</code> 的解决方案:  </p>\n<ol>\n<li>使用 <code>isNaN()</code> 进行确认</li>\n<li>使用 <code>mean(&#123;v&#125;,&quot;omitnan&quot;)</code>计算</li>\n</ol>\n<blockquote>\n<p>可使用 <code>nnz(&#123;v&#125;&#125;)</code> 获知具体的 <code>NaN</code> 数量</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"数组串接-Concatenation\"><a href=\"#数组串接-Concatenation\" class=\"headerlink\" title=\"数组串接 (Concatenation)\"></a>数组串接 (Concatenation)</h3><p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/concatenation.png\" alt=\"串接 (Concatenation)\"></p>\n<ol>\n<li>横向串接<br> <code>x = [A, B]</code>  <ul>\n<li>  要求两矩阵的行数(<code>row</code>)相同即可</li>\n<li>  貌似不要 <code>,</code> 也行, 直接 <code>x = [A B]</code></li>\n</ul>\n</li>\n<li>纵向串接<br> <code>x = [A; B]</code><ul>\n<li>  要求两矩阵的纵数(<code>col</code>)相同即可</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"矩阵构建\"><a href=\"#矩阵构建\" class=\"headerlink\" title=\"矩阵构建\"></a>矩阵构建</h3><h4 id=\"函数生成\"><a href=\"#函数生成\" class=\"headerlink\" title=\"函数生成\"></a>函数生成</h4><ul>\n<li><p>  <code>rand(&#123;row&#125;,&#123;col&#125;)</code>    生成随机的(0-1)矩阵</p>\n</li>\n<li><p>  <code>zeros(&#123;row&#125;,&#123;col&#125;)</code>   生成全是0的矩阵</p>\n</li>\n<li><p>  <code>ones(&#123;row&#125;,&#123;col&#125;)</code>    生成全是1的矩阵</p>\n</li>\n</ul>\n<h4 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h4><ul>\n<li><p><code>reshape(&#123;ori&#125;,&#123;row&#125;,&#123;col&#125;)</code><br>  将一维的 <code>vector</code> 转化为矩阵, 或将原有矩阵改变形状</p>\n<blockquote>\n<p>  <code>&#123;row&#125;</code> 或 <code>&#123;col&#125;</code> 可采用 <code>[]</code> 作为通配符代替</p>\n</blockquote>\n<p>  常见转换: matrix to one col <code>x(:)</code> &amp; <code>reshape(x,[],1)</code></p>\n</li>\n</ul>\n<h1 id=\"制图相关\"><a href=\"#制图相关\" class=\"headerlink\" title=\"制图相关\"></a>制图相关</h1><p><b><a href=\"https://www.mathworks.com/help/matlab/creating_plots/types-of-matlab-plots.html\">总指南</a></b></p>\n<h2 id=\"标识与图例\"><a href=\"#标识与图例\" class=\"headerlink\" title=\"标识与图例\"></a>标识与图例</h2><ul>\n<li><p>  <code>xlabel()</code> 与 <code>ylabel()</code> 分别给 <code>x</code> 轴和 <code>y</code> 轴添加标识。</p>\n</li>\n<li><p>  <code>title()</code> 用于给图表添加标识。</p>\n</li>\n<li><p><code>legend(&quot;&#123;sth1&#125;&quot;,&quot;&#123;sth2&#125;&quot;)</code> 用于添加图例。<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/legend.png\" alt=\"legend\"></p>\n</li>\n<li><p><code>xtick()</code> 和 <code>xticklabel()</code><br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/xticklabel.png\" alt=\"xticklabel\"><br>  <code>xtick()</code> 中指明要添加 <code>label</code> 的列即可 (index直接指明)<br>  <code>xticklabel()</code> 中直接写要添加的文本内容即可</p>\n<blockquote>\n<p>指明的列和文本数量不需匹配</p>\n</blockquote>\n<h2 id=\"2D制图\"><a href=\"#2D制图\" class=\"headerlink\" title=\"2D制图\"></a>2D制图</h2></li>\n</ul>\n<h3 id=\"图表类型\"><a href=\"#图表类型\" class=\"headerlink\" title=\"图表类型\"></a>图表类型</h3><ul>\n<li><p>折线图 <code>plot()</code><br>  使用方法:  </p>\n<ul>\n<li>  <code>plot(x,y)</code></li>\n<li>  <code>plot(x1,y1,x2,y2)</code> 或 <code>plot(x,[y1 y2 ...]</code></li>\n<li><code>plot(&#123;matrix&#125;)</code> 效果见图:<br><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/plotmatrix.png\" alt=\"plotmatrix\"></li>\n</ul>\n</li>\n<li><p>散点图 <code>scatter()</code><br>  基本输入与 <code>plot()</code> 相同</p>\n<ul>\n<li>更改点的大小 (第三个参数)<br>  <code>scatter(x,y,&#123;size&#125;)</code><br>  看起来好像没有上限的样子, 要做成随图像变化的样子则需要标记大小参数长度与 <code>x</code> 和 <code>y</code> 相同</li>\n<li>更改点的颜色 (第四个参数)<br>  <code>scatter(x,y,[],&#123;color&#125;)</code><br>  颜色必须为一个 RGB 三元组、每个散射点对应一种颜色的 RGB 三元组所组成的 m×3 矩阵或每个散点对应一个值的 m×1 向量。<br>  不过我做出来都是这种颜色:<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/scattercolor.png\" alt=\"scattercolor\"></li>\n<li>更改点  <ol>\n<li>在最后加 <code>filled</code> 属性即可实现填充点的效果</li>\n<li>在最后加 <code>d</code> 或其他可以指定点的形状</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>阶梯图 <code>stairs()</code><br>  与 <code>plot()</code> 相同</p>\n</li>\n<li><p>主干图 <code>stem()</code><br>  与 <code>plot()</code> 相同</p>\n</li>\n<li><p>面积图 <code>area()</code><br>  与 <code>plot()</code> 相同<br>  <em>(就是 <code>plot</code>加了面积而已</em></p>\n</li>\n<li><p>柱状图 <code>bar()</code><br>  大体与 <code>plot()</code> 相同</p>\n<ul>\n<li>堆叠式<br>  添加 <code>stacked</code> 属性</li>\n<li>分组<br>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/bargroup.png\" alt=\"bargroup\"></li>\n</ul>\n</li>\n<li><p>  饼图 <code>pie()</code></p>\n</li>\n</ul>\n<h3 id=\"以矩阵作图\"><a href=\"#以矩阵作图\" class=\"headerlink\" title=\"以矩阵作图\"></a>以矩阵作图</h3><p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/matrixplotting.png\" alt=\"matrixplotting\">  </p>\n<center>`plot({matrix})`</center>\n\n<p>如果采用 <code>plot(data)</code>, 则将”Month”视为x轴;<br>而如果是 <code>plot(data&#39;)</code>, 则”Years”为x轴  </p>\n<p>y轴是由元素值自动生成的</p>\n<h3 id=\"作图相关\"><a href=\"#作图相关\" class=\"headerlink\" title=\"作图相关\"></a>作图相关</h3><ul>\n<li>改变图线: 通过在函数的第三个参数中指定颜色/样式/端点形状.<br>格式如下:  </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>颜色</th>\n<th>样式</th>\n<th>形状</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>r</td>\n<td>–</td>\n<td>o</td>\n</tr>\n<tr>\n<td>g</td>\n<td>:</td>\n<td>+</td>\n</tr>\n<tr>\n<td>b</td>\n<td>-.</td>\n<td>*</td>\n</tr>\n<tr>\n<td>c</td>\n<td>-</td>\n<td>.</td>\n</tr>\n<tr>\n<td>m</td>\n<td>‘none’</td>\n<td>&gt;</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>  使用 <code>&quot;linewidth&quot;,&#123;线宽&#125;</code> 作为最后的参数可设置线宽。</p>\n</li>\n<li><p>  绘制多图: 在 <code>plot()</code> 完后,执行 <code>hold on</code> 再去 <code>plot()</code> 下一个。</p>\n</li>\n<li><p><code>xlim</code> 与 <code>ylim</code><br>  用于手动设置图像范围. 用法: <code>x/ylim([&#123;起始&#125; &#123;终止&#125;])</code></p>\n</li>\n<li><p><code>axis tight</code><br>  使图像范围适应到数据的最大值和最小值</p>\n</li>\n</ul>\n<h2 id=\"3D制图\"><a href=\"#3D制图\" class=\"headerlink\" title=\"3D制图\"></a>3D制图</h2><h3 id=\"图表类型-1\"><a href=\"#图表类型-1\" class=\"headerlink\" title=\"图表类型\"></a>图表类型</h3><ul>\n<li><p>标准曲面图<br>  <code>surf(X,Y,F);</code>.</p>\n<p>  <img src=\"/2021/12/18/MATLAB-Cheat-Sheet/surfc.png\" alt=\"`surfc()` 的样子\"></p>\n</li>\n<li><p>曲面点图<br>  <code>mesh(X,Y,F);</code></p>\n<blockquote>\n<p>还有 <code>meshc()</code> 和 <code>meshz()</code> , <code>c</code> 是等高线; 而 <code>z</code> 是底部加固体填充. 具体见图片.</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/meshc.png\" alt=\"`meshc()`\"></p>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/meshz.png\" alt=\"`meshz()`\"></p>\n<p><img src=\"/2021/12/18/MATLAB-Cheat-Sheet/plot3.png\" alt=\"`plot3()`\"></p>\n<blockquote>\n<p>  <code>surfc()</code> 相比原来的 <code>surf()</code> 是多加了个等高线在 <code>X-Y</code> 面上.</p>\n</blockquote>\n<ul>\n<li>等高线图<br>  <code>contour()</code></li>\n</ul>\n<ul>\n<li>使用 <code>colorbar</code> 来添加颜色栏 </li>\n</ul>\n<h2 id=\"子图绘制-subplot\"><a href=\"#子图绘制-subplot\" class=\"headerlink\" title=\"子图绘制 subplot\"></a>子图绘制 <code>subplot</code></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">subplot(m,n,p);</span><br><span class=\"line\">subplot(m,n,p,&#x27;replace&#x27;);</span><br><span class=\"line\">subplot(m,n,p,&#x27;align&#x27;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  <code>m</code> / <code>n</code> 指代建立的网格横纵数<br>    <code>p</code> 指代该图像放在网格的位置 (从左到右数)  </p>\n</blockquote>\n<h1 id=\"编程与脚本\"><a href=\"#编程与脚本\" class=\"headerlink\" title=\"编程与脚本\"></a>编程与脚本</h1><h2 id=\"创建脚本\"><a href=\"#创建脚本\" class=\"headerlink\" title=\"创建脚本\"></a>创建脚本</h2><p>使用 <code>edit [文件名]</code> 即可.</p>\n<h2 id=\"添加注释\"><a href=\"#添加注释\" class=\"headerlink\" title=\"添加注释\"></a>添加注释</h2><p>在行首添加 <code>%</code> .</p>\n<h2 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h2><p>在命令区内输入脚本名称</p>\n<h2 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for n = 0:&#123;MAX&#125;</span><br><span class=\"line\">    [Other codes]</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>以上代码展示了自变量 <code>n</code> 由0遍历至MAX值的循环语句</p>\n<blockquote>\n<p>看起来是使用严格的缩进和”开始”,”结束”标识符来进行代码的分层</p>\n</blockquote>\n<h2 id=\"判断语句\"><a href=\"#判断语句\" class=\"headerlink\" title=\"判断语句\"></a>判断语句</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if num &gt; 100</span><br><span class=\"line\">    a = 1000</span><br><span class=\"line\">elseif num &lt; 0</span><br><span class=\"line\">    a = -1</span><br><span class=\"line\">else</span><br><span class=\"line\">    a = 0</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>(不做过多解释)</p>\n"},{"title":"Meizu E3 解锁/刷机指南","date":"2022-05-11T16:40:58.000Z","_content":"\n## 前言\n\n当我在~~大概~~2018年第一次拿到这手机的时候，感觉还不错。毕竟高通636已经6+64GB的配置在当时看来并不算差。但是由于Flyme系统的封闭，获取root和刷机成了一件难事。鉴于当时没有什么野路子能供我操作，很快我就对它失去了兴趣。然而如今偶然在telegram上看见解锁/刷机的方法，便溯源到xda上的帖子试了下，最后得出了你正在看的这份指南。\n\n- 为什么要写这个指南？\n  \n  1. 给自己做个记录\n  2. ~~原帖子的说明并不是很容易看懂~~\n\n## 资源\n\n - Material Terminal: https://nekorectifier.lanzouw.com/iaZeH04ohtni\n\n - TWRP Recovery: https://nekorectifier.lanzouw.com/ipToO04ogd9c\n\n - LinageOS：https://cowtransfer.com/s/a87df3a2f8a64f 口令：77rulq \n\n - LinageOS Boot Image：https://nekorectifier.lanzouw.com/iCuEY04ogh5c\n\n## 具体步骤\n\n### 解锁\n\n根据原作者[99degree@xda](https://forum.xda-developers.com/m/99degree.8186420/)的[教程](https://forum.xda-developers.com/t/meizu-e3-unlock-bootloader-tutorial.4005459/)，解锁方法如下。\n\n1. 获取Flyme系统自带的root权限\n\n2. 安装任意终端app，如Material Terminal, Terminal Emulator, Termux等\n\n3. dump出系统的frp分区\n  具体指令如下：  \n  \n  ```bash\n  su\n  dd if=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp of=/sdcard/frp.bin\n  ```\n\n4. 提出frp.bin到电脑\n  运行完指令后，在手机的`/sdcard/`目录下会生成一个frp.bin文件。  \n  你可以需要通过[adb](https://developer.android.com/studio/command-line/adb.html)来将其提取到电脑上。（或者用什么其他的方法也可以\n\n5. 修改frp.bin文件\n  有两种方法，推荐第一种（因为我确实成功地用它解锁了）\n  \n  #### (1) 来自博客[叮当窝](https://blog.doreoom.com/644.html)的方法\n\n  访问[frp.xingrz.me](frp.xingrz.me)，按照上面的指令将frp.bin文件上传到服务器，之后再下载回本地。\n\n  #### (2) 来自[原作者](https://www.youtube.com/watch?v=7kKS7a_0CAg&t=2s&ab_channel=99degree)方法的方法\n\n  使用16进制编辑器将`7fff8`和`7fff`处的值设为`1`，然后保存。\n\n  ![asd](orides.png)\n\n  <p align=\"center\">原作者的描述</p>\n\n6. 将修改后的frp文件刷写回去\n  代码如下:  \n  `dd if=下载的文件的路径 of=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp`\n\n7. 进行解锁操作\n  - 将手机关机，并重启至fastboot模式（按音量减和电源键\n  - 在电脑上运行以下命令：  \n    `fastboot flashing unlock`\n    \n  > 如果执行命令无效，请再试一次。可能是驱动或者线材等原因导致的。\n\n  - 接着手机会黑屏出现奇怪的白线，你需要用音量键选择到“No”然后按下电源键。\n    \n  - 随后手机会进入内置的Recovery模式，先按五次音量+再按五次音量-，之后会有清除数据的选项，选择它并重启。\n\n  - 重复先前的过程，再刷一遍frp分区，重启至fastboot模式，并执行以下命令：\n    `fastboot flashing unlock_critical`\n    \n  - 目前解锁操作已完成，如果出现黑屏和白线请按之前的方法再次操作一遍。（我估计你不会遇到）\n\n### 刷入Recovery\n\n  - 将手机关机，并重启至fastboot模式（按音量减和电源键\n\n  - 在电脑上下载twrp镜像文件，并运行以下命令：\n    `fastboot flash recovery twrp-meizue3-rec.img`\n    待成功后就可以重启至twrp的recovery了。\n\n### 刷入LinageOS\n\n  **提示**：本系统经测试有声音/震动，但是无法打开摄像头。有意者可移步至作者的[发布页面](https://github.com/99degree/android_vendor_meizu_m851q/releases)自行寻找合适的包。\n\n  - 下载LinageOS和boot镜像文件，复制到手机内置存储中，并重启至recovery模式（按音量加和电源键）\n\n  - 在twrp主页面中选择备份，将boot/vendor/modem/efs分区备份至`/sdcard`。随后用电脑提取出来。\n\n  - 在twrp主页面中选择安装，将`system.img`安装到system分区；`vendor.img`安装到vendor分区；`boot.img`安装到boot分区。\n\n  - 先不要重启，回到主界面选择清除。选中data,cache,dalvik分区，点击清除，之后再重启。\n\n  > 系统已经刷写完成，第一次启动可能需要较长时间。如出现启动循环，可长按电源键重启再试。（你可能需要完全关机后再启动）\n\n\n![meizu](meizue3.png)\n\n<p align=\"center\">最后就可以享受类原生的快乐了</p>\n  \n\n","source":"_posts/Meizu-E3-解锁-刷机指南.md","raw":"---\ntitle: Meizu E3 解锁/刷机指南\ndate: 2022-05-12 00:40:58\ntags: \n  - Android\n  - 刷机\n  - crack\n---\n\n## 前言\n\n当我在~~大概~~2018年第一次拿到这手机的时候，感觉还不错。毕竟高通636已经6+64GB的配置在当时看来并不算差。但是由于Flyme系统的封闭，获取root和刷机成了一件难事。鉴于当时没有什么野路子能供我操作，很快我就对它失去了兴趣。然而如今偶然在telegram上看见解锁/刷机的方法，便溯源到xda上的帖子试了下，最后得出了你正在看的这份指南。\n\n- 为什么要写这个指南？\n  \n  1. 给自己做个记录\n  2. ~~原帖子的说明并不是很容易看懂~~\n\n## 资源\n\n - Material Terminal: https://nekorectifier.lanzouw.com/iaZeH04ohtni\n\n - TWRP Recovery: https://nekorectifier.lanzouw.com/ipToO04ogd9c\n\n - LinageOS：https://cowtransfer.com/s/a87df3a2f8a64f 口令：77rulq \n\n - LinageOS Boot Image：https://nekorectifier.lanzouw.com/iCuEY04ogh5c\n\n## 具体步骤\n\n### 解锁\n\n根据原作者[99degree@xda](https://forum.xda-developers.com/m/99degree.8186420/)的[教程](https://forum.xda-developers.com/t/meizu-e3-unlock-bootloader-tutorial.4005459/)，解锁方法如下。\n\n1. 获取Flyme系统自带的root权限\n\n2. 安装任意终端app，如Material Terminal, Terminal Emulator, Termux等\n\n3. dump出系统的frp分区\n  具体指令如下：  \n  \n  ```bash\n  su\n  dd if=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp of=/sdcard/frp.bin\n  ```\n\n4. 提出frp.bin到电脑\n  运行完指令后，在手机的`/sdcard/`目录下会生成一个frp.bin文件。  \n  你可以需要通过[adb](https://developer.android.com/studio/command-line/adb.html)来将其提取到电脑上。（或者用什么其他的方法也可以\n\n5. 修改frp.bin文件\n  有两种方法，推荐第一种（因为我确实成功地用它解锁了）\n  \n  #### (1) 来自博客[叮当窝](https://blog.doreoom.com/644.html)的方法\n\n  访问[frp.xingrz.me](frp.xingrz.me)，按照上面的指令将frp.bin文件上传到服务器，之后再下载回本地。\n\n  #### (2) 来自[原作者](https://www.youtube.com/watch?v=7kKS7a_0CAg&t=2s&ab_channel=99degree)方法的方法\n\n  使用16进制编辑器将`7fff8`和`7fff`处的值设为`1`，然后保存。\n\n  ![asd](orides.png)\n\n  <p align=\"center\">原作者的描述</p>\n\n6. 将修改后的frp文件刷写回去\n  代码如下:  \n  `dd if=下载的文件的路径 of=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp`\n\n7. 进行解锁操作\n  - 将手机关机，并重启至fastboot模式（按音量减和电源键\n  - 在电脑上运行以下命令：  \n    `fastboot flashing unlock`\n    \n  > 如果执行命令无效，请再试一次。可能是驱动或者线材等原因导致的。\n\n  - 接着手机会黑屏出现奇怪的白线，你需要用音量键选择到“No”然后按下电源键。\n    \n  - 随后手机会进入内置的Recovery模式，先按五次音量+再按五次音量-，之后会有清除数据的选项，选择它并重启。\n\n  - 重复先前的过程，再刷一遍frp分区，重启至fastboot模式，并执行以下命令：\n    `fastboot flashing unlock_critical`\n    \n  - 目前解锁操作已完成，如果出现黑屏和白线请按之前的方法再次操作一遍。（我估计你不会遇到）\n\n### 刷入Recovery\n\n  - 将手机关机，并重启至fastboot模式（按音量减和电源键\n\n  - 在电脑上下载twrp镜像文件，并运行以下命令：\n    `fastboot flash recovery twrp-meizue3-rec.img`\n    待成功后就可以重启至twrp的recovery了。\n\n### 刷入LinageOS\n\n  **提示**：本系统经测试有声音/震动，但是无法打开摄像头。有意者可移步至作者的[发布页面](https://github.com/99degree/android_vendor_meizu_m851q/releases)自行寻找合适的包。\n\n  - 下载LinageOS和boot镜像文件，复制到手机内置存储中，并重启至recovery模式（按音量加和电源键）\n\n  - 在twrp主页面中选择备份，将boot/vendor/modem/efs分区备份至`/sdcard`。随后用电脑提取出来。\n\n  - 在twrp主页面中选择安装，将`system.img`安装到system分区；`vendor.img`安装到vendor分区；`boot.img`安装到boot分区。\n\n  - 先不要重启，回到主界面选择清除。选中data,cache,dalvik分区，点击清除，之后再重启。\n\n  > 系统已经刷写完成，第一次启动可能需要较长时间。如出现启动循环，可长按电源键重启再试。（你可能需要完全关机后再启动）\n\n\n![meizu](meizue3.png)\n\n<p align=\"center\">最后就可以享受类原生的快乐了</p>\n  \n\n","slug":"Meizu-E3-解锁-刷机指南","published":1,"updated":"2023-08-05T06:14:33.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewur00092qbh4f3yhoym","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当我在<del>大概</del>2018年第一次拿到这手机的时候，感觉还不错。毕竟高通636已经6+64GB的配置在当时看来并不算差。但是由于Flyme系统的封闭，获取root和刷机成了一件难事。鉴于当时没有什么野路子能供我操作，很快我就对它失去了兴趣。然而如今偶然在telegram上看见解锁/刷机的方法，便溯源到xda上的帖子试了下，最后得出了你正在看的这份指南。</p>\n<ul>\n<li>为什么要写这个指南？<ol>\n<li>给自己做个记录</li>\n<li><del>原帖子的说明并不是很容易看懂</del></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><p>Material Terminal: <a href=\"https://nekorectifier.lanzouw.com/iaZeH04ohtni\">https://nekorectifier.lanzouw.com/iaZeH04ohtni</a></p>\n</li>\n<li><p>TWRP Recovery: <a href=\"https://nekorectifier.lanzouw.com/ipToO04ogd9c\">https://nekorectifier.lanzouw.com/ipToO04ogd9c</a></p>\n</li>\n<li><p>LinageOS：<a href=\"https://cowtransfer.com/s/a87df3a2f8a64f\">https://cowtransfer.com/s/a87df3a2f8a64f</a> 口令：77rulq </p>\n</li>\n<li><p>LinageOS Boot Image：<a href=\"https://nekorectifier.lanzouw.com/iCuEY04ogh5c\">https://nekorectifier.lanzouw.com/iCuEY04ogh5c</a></p>\n</li>\n</ul>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><p>根据原作者<a href=\"https://forum.xda-developers.com/m/99degree.8186420/\">99degree@xda</a>的<a href=\"https://forum.xda-developers.com/t/meizu-e3-unlock-bootloader-tutorial.4005459/\">教程</a>，解锁方法如下。</p>\n<ol>\n<li><p>获取Flyme系统自带的root权限</p>\n</li>\n<li><p>安装任意终端app，如Material Terminal, Terminal Emulator, Termux等</p>\n</li>\n<li><p>dump出系统的frp分区<br>具体指令如下：  </p>\n</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su</span><br><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp of=/sdcard/frp.bin</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>提出frp.bin到电脑<br>运行完指令后，在手机的<code>/sdcard/</code>目录下会生成一个frp.bin文件。<br>你可以需要通过<a href=\"https://developer.android.com/studio/command-line/adb.html\">adb</a>来将其提取到电脑上。（或者用什么其他的方法也可以</p>\n</li>\n<li><p>修改frp.bin文件<br>有两种方法，推荐第一种（因为我确实成功地用它解锁了）</p>\n</li>\n</ol>\n<h4 id=\"1-来自博客叮当窝的方法\"><a href=\"#1-来自博客叮当窝的方法\" class=\"headerlink\" title=\"(1) 来自博客叮当窝的方法\"></a>(1) 来自博客<a href=\"https://blog.doreoom.com/644.html\">叮当窝</a>的方法</h4><p>  访问<a href=\"frp.xingrz.me\">frp.xingrz.me</a>，按照上面的指令将frp.bin文件上传到服务器，之后再下载回本地。</p>\n<h4 id=\"2-来自原作者方法的方法\"><a href=\"#2-来自原作者方法的方法\" class=\"headerlink\" title=\"(2) 来自原作者方法的方法\"></a>(2) 来自<a href=\"https://www.youtube.com/watch?v=7kKS7a_0CAg&t=2s&ab_channel=99degree\">原作者</a>方法的方法</h4><p>  使用16进制编辑器将<code>7fff8</code>和<code>7fff</code>处的值设为<code>1</code>，然后保存。</p>\n<p>  <img src=\"/2022/05/12/Meizu-E3-%E8%A7%A3%E9%94%81-%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8D%97/orides.png\" alt=\"asd\"></p>\n  <p align=\"center\">原作者的描述</p>\n\n<ol start=\"6\">\n<li><p>将修改后的frp文件刷写回去<br>代码如下:<br><code>dd if=下载的文件的路径 of=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp</code></p>\n</li>\n<li><p>进行解锁操作</p>\n</li>\n</ol>\n<ul>\n<li>将手机关机，并重启至fastboot模式（按音量减和电源键</li>\n<li>在电脑上运行以下命令：<br><code>fastboot flashing unlock</code></li>\n</ul>\n<blockquote>\n<p>如果执行命令无效，请再试一次。可能是驱动或者线材等原因导致的。</p>\n</blockquote>\n<ul>\n<li><p>接着手机会黑屏出现奇怪的白线，你需要用音量键选择到“No”然后按下电源键。</p>\n</li>\n<li><p>随后手机会进入内置的Recovery模式，先按五次音量+再按五次音量-，之后会有清除数据的选项，选择它并重启。</p>\n</li>\n<li><p>重复先前的过程，再刷一遍frp分区，重启至fastboot模式，并执行以下命令：<br><code>fastboot flashing unlock_critical</code></p>\n</li>\n<li><p>目前解锁操作已完成，如果出现黑屏和白线请按之前的方法再次操作一遍。（我估计你不会遇到）</p>\n</li>\n</ul>\n<h3 id=\"刷入Recovery\"><a href=\"#刷入Recovery\" class=\"headerlink\" title=\"刷入Recovery\"></a>刷入Recovery</h3><ul>\n<li><p>将手机关机，并重启至fastboot模式（按音量减和电源键</p>\n</li>\n<li><p>在电脑上下载twrp镜像文件，并运行以下命令：<br><code>fastboot flash recovery twrp-meizue3-rec.img</code><br>待成功后就可以重启至twrp的recovery了。</p>\n</li>\n</ul>\n<h3 id=\"刷入LinageOS\"><a href=\"#刷入LinageOS\" class=\"headerlink\" title=\"刷入LinageOS\"></a>刷入LinageOS</h3><p>  <strong>提示</strong>：本系统经测试有声音/震动，但是无法打开摄像头。有意者可移步至作者的<a href=\"https://github.com/99degree/android_vendor_meizu_m851q/releases\">发布页面</a>自行寻找合适的包。</p>\n<ul>\n<li><p>下载LinageOS和boot镜像文件，复制到手机内置存储中，并重启至recovery模式（按音量加和电源键）</p>\n</li>\n<li><p>在twrp主页面中选择备份，将boot/vendor/modem/efs分区备份至<code>/sdcard</code>。随后用电脑提取出来。</p>\n</li>\n<li><p>在twrp主页面中选择安装，将<code>system.img</code>安装到system分区；<code>vendor.img</code>安装到vendor分区；<code>boot.img</code>安装到boot分区。</p>\n</li>\n<li><p>先不要重启，回到主界面选择清除。选中data,cache,dalvik分区，点击清除，之后再重启。</p>\n</li>\n</ul>\n<blockquote>\n<p>系统已经刷写完成，第一次启动可能需要较长时间。如出现启动循环，可长按电源键重启再试。（你可能需要完全关机后再启动）</p>\n</blockquote>\n<p><img src=\"/2022/05/12/Meizu-E3-%E8%A7%A3%E9%94%81-%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8D%97/meizue3.png\" alt=\"meizu\"></p>\n<p align=\"center\">最后就可以享受类原生的快乐了</p>\n  \n\n","site":{"data":{}},"length":998,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>当我在<del>大概</del>2018年第一次拿到这手机的时候，感觉还不错。毕竟高通636已经6+64GB的配置在当时看来并不算差。但是由于Flyme系统的封闭，获取root和刷机成了一件难事。鉴于当时没有什么野路子能供我操作，很快我就对它失去了兴趣。然而如今偶然在telegram上看见解锁/刷机的方法，便溯源到xda上的帖子试了下，最后得出了你正在看的这份指南。</p>\n<ul>\n<li>为什么要写这个指南？<ol>\n<li>给自己做个记录</li>\n<li><del>原帖子的说明并不是很容易看懂</del></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><p>Material Terminal: <a href=\"https://nekorectifier.lanzouw.com/iaZeH04ohtni\">https://nekorectifier.lanzouw.com/iaZeH04ohtni</a></p>\n</li>\n<li><p>TWRP Recovery: <a href=\"https://nekorectifier.lanzouw.com/ipToO04ogd9c\">https://nekorectifier.lanzouw.com/ipToO04ogd9c</a></p>\n</li>\n<li><p>LinageOS：<a href=\"https://cowtransfer.com/s/a87df3a2f8a64f\">https://cowtransfer.com/s/a87df3a2f8a64f</a> 口令：77rulq </p>\n</li>\n<li><p>LinageOS Boot Image：<a href=\"https://nekorectifier.lanzouw.com/iCuEY04ogh5c\">https://nekorectifier.lanzouw.com/iCuEY04ogh5c</a></p>\n</li>\n</ul>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><p>根据原作者<a href=\"https://forum.xda-developers.com/m/99degree.8186420/\">99degree@xda</a>的<a href=\"https://forum.xda-developers.com/t/meizu-e3-unlock-bootloader-tutorial.4005459/\">教程</a>，解锁方法如下。</p>\n<ol>\n<li><p>获取Flyme系统自带的root权限</p>\n</li>\n<li><p>安装任意终端app，如Material Terminal, Terminal Emulator, Termux等</p>\n</li>\n<li><p>dump出系统的frp分区<br>具体指令如下：  </p>\n</li>\n</ol>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su</span><br><span class=\"line\"><span class=\"built_in\">dd</span> <span class=\"keyword\">if</span>=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp of=/sdcard/frp.bin</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>提出frp.bin到电脑<br>运行完指令后，在手机的<code>/sdcard/</code>目录下会生成一个frp.bin文件。<br>你可以需要通过<a href=\"https://developer.android.com/studio/command-line/adb.html\">adb</a>来将其提取到电脑上。（或者用什么其他的方法也可以</p>\n</li>\n<li><p>修改frp.bin文件<br>有两种方法，推荐第一种（因为我确实成功地用它解锁了）</p>\n</li>\n</ol>\n<h4 id=\"1-来自博客叮当窝的方法\"><a href=\"#1-来自博客叮当窝的方法\" class=\"headerlink\" title=\"(1) 来自博客叮当窝的方法\"></a>(1) 来自博客<a href=\"https://blog.doreoom.com/644.html\">叮当窝</a>的方法</h4><p>  访问<a href=\"frp.xingrz.me\">frp.xingrz.me</a>，按照上面的指令将frp.bin文件上传到服务器，之后再下载回本地。</p>\n<h4 id=\"2-来自原作者方法的方法\"><a href=\"#2-来自原作者方法的方法\" class=\"headerlink\" title=\"(2) 来自原作者方法的方法\"></a>(2) 来自<a href=\"https://www.youtube.com/watch?v=7kKS7a_0CAg&t=2s&ab_channel=99degree\">原作者</a>方法的方法</h4><p>  使用16进制编辑器将<code>7fff8</code>和<code>7fff</code>处的值设为<code>1</code>，然后保存。</p>\n<p>  <img src=\"/2022/05/12/Meizu-E3-%E8%A7%A3%E9%94%81-%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8D%97/orides.png\" alt=\"asd\"></p>\n  <p align=\"center\">原作者的描述</p>\n\n<ol start=\"6\">\n<li><p>将修改后的frp文件刷写回去<br>代码如下:<br><code>dd if=下载的文件的路径 of=/dev/block/platform/soc/c0c4000.sdhci/by-name/frp</code></p>\n</li>\n<li><p>进行解锁操作</p>\n</li>\n</ol>\n<ul>\n<li>将手机关机，并重启至fastboot模式（按音量减和电源键</li>\n<li>在电脑上运行以下命令：<br><code>fastboot flashing unlock</code></li>\n</ul>\n<blockquote>\n<p>如果执行命令无效，请再试一次。可能是驱动或者线材等原因导致的。</p>\n</blockquote>\n<ul>\n<li><p>接着手机会黑屏出现奇怪的白线，你需要用音量键选择到“No”然后按下电源键。</p>\n</li>\n<li><p>随后手机会进入内置的Recovery模式，先按五次音量+再按五次音量-，之后会有清除数据的选项，选择它并重启。</p>\n</li>\n<li><p>重复先前的过程，再刷一遍frp分区，重启至fastboot模式，并执行以下命令：<br><code>fastboot flashing unlock_critical</code></p>\n</li>\n<li><p>目前解锁操作已完成，如果出现黑屏和白线请按之前的方法再次操作一遍。（我估计你不会遇到）</p>\n</li>\n</ul>\n<h3 id=\"刷入Recovery\"><a href=\"#刷入Recovery\" class=\"headerlink\" title=\"刷入Recovery\"></a>刷入Recovery</h3><ul>\n<li><p>将手机关机，并重启至fastboot模式（按音量减和电源键</p>\n</li>\n<li><p>在电脑上下载twrp镜像文件，并运行以下命令：<br><code>fastboot flash recovery twrp-meizue3-rec.img</code><br>待成功后就可以重启至twrp的recovery了。</p>\n</li>\n</ul>\n<h3 id=\"刷入LinageOS\"><a href=\"#刷入LinageOS\" class=\"headerlink\" title=\"刷入LinageOS\"></a>刷入LinageOS</h3><p>  <strong>提示</strong>：本系统经测试有声音/震动，但是无法打开摄像头。有意者可移步至作者的<a href=\"https://github.com/99degree/android_vendor_meizu_m851q/releases\">发布页面</a>自行寻找合适的包。</p>\n<ul>\n<li><p>下载LinageOS和boot镜像文件，复制到手机内置存储中，并重启至recovery模式（按音量加和电源键）</p>\n</li>\n<li><p>在twrp主页面中选择备份，将boot/vendor/modem/efs分区备份至<code>/sdcard</code>。随后用电脑提取出来。</p>\n</li>\n<li><p>在twrp主页面中选择安装，将<code>system.img</code>安装到system分区；<code>vendor.img</code>安装到vendor分区；<code>boot.img</code>安装到boot分区。</p>\n</li>\n<li><p>先不要重启，回到主界面选择清除。选中data,cache,dalvik分区，点击清除，之后再重启。</p>\n</li>\n</ul>\n<blockquote>\n<p>系统已经刷写完成，第一次启动可能需要较长时间。如出现启动循环，可长按电源键重启再试。（你可能需要完全关机后再启动）</p>\n</blockquote>\n<p><img src=\"/2022/05/12/Meizu-E3-%E8%A7%A3%E9%94%81-%E5%88%B7%E6%9C%BA%E6%8C%87%E5%8D%97/meizue3.png\" alt=\"meizu\"></p>\n<p align=\"center\">最后就可以享受类原生的快乐了</p>\n  \n\n"},{"title":"Oculus Quest2 无Facebook账户激活","date":"2021-09-27T11:32:42.000Z","_content":"\n## 前言\n\n在facebook收购Oculus后，新注册的用户就必须使用facebook账户来激活。这对于没有facebook账户的用户来说相当麻烦，尤其是在大陆的用户。注册便极有可能被机器自动封禁使得激活操作更加复杂。\n\n## 准备工作\n\n* Oculus App Ver.36.0.0.5.242\n[下载链接 (APK Mirror)](https://www.apkmirror.com/apk/facebook-technologies-llc/oculus-2/oculus-2-36-0-0-5-242-release/#downloads)\n[下载链接 (Lanzoui)](https://nekorectifier.lanzouw.com/i7Nsguis60h)\n* 未安装任何Oculus应用的Android手机\n* 已经退出账户的Oculus Quest2\n\n## 步骤\n\n1. 去Oculus官网去创建一个开发者帐号\n[点此创建开发者账户](https://developer.oculus.com/sign-up)\n并建立一个下属的测试帐号 用于在Oculus中登录\n\n2. 在手机上安装特定版本的Oculus App，并重置你的Oculus Quest2以准备进行连接\n[重置视频教程见此](https://www.bilibili.com/video/BV1Zv411e7Zm)\n\n3. 打开手机上的App，使用你刚才注册的Oculus开发者帐号登录。\n在设备中选中Quest1并尝试连接，随后等待手机提示连接失败。\n\n4. 再转到你的Quest2设备，发现它已经开始激活了。按照指示设定Wi-Fi，软件更新等其他步骤，一切完成后Quest2会自己重启。\n\n5. 重启完后再尝试使用手机App配对（还是选择Quest1），稍等后配对成功就可以将开发者相关的设置打开了。\n","source":"_posts/Oculus-Quest2-无Facebook账户激活.md","raw":"---\ntitle: Oculus Quest2 无Facebook账户激活\ndate: 2021-09-27 19:32:42\ntags: \n    - Oculus\n---\n\n## 前言\n\n在facebook收购Oculus后，新注册的用户就必须使用facebook账户来激活。这对于没有facebook账户的用户来说相当麻烦，尤其是在大陆的用户。注册便极有可能被机器自动封禁使得激活操作更加复杂。\n\n## 准备工作\n\n* Oculus App Ver.36.0.0.5.242\n[下载链接 (APK Mirror)](https://www.apkmirror.com/apk/facebook-technologies-llc/oculus-2/oculus-2-36-0-0-5-242-release/#downloads)\n[下载链接 (Lanzoui)](https://nekorectifier.lanzouw.com/i7Nsguis60h)\n* 未安装任何Oculus应用的Android手机\n* 已经退出账户的Oculus Quest2\n\n## 步骤\n\n1. 去Oculus官网去创建一个开发者帐号\n[点此创建开发者账户](https://developer.oculus.com/sign-up)\n并建立一个下属的测试帐号 用于在Oculus中登录\n\n2. 在手机上安装特定版本的Oculus App，并重置你的Oculus Quest2以准备进行连接\n[重置视频教程见此](https://www.bilibili.com/video/BV1Zv411e7Zm)\n\n3. 打开手机上的App，使用你刚才注册的Oculus开发者帐号登录。\n在设备中选中Quest1并尝试连接，随后等待手机提示连接失败。\n\n4. 再转到你的Quest2设备，发现它已经开始激活了。按照指示设定Wi-Fi，软件更新等其他步骤，一切完成后Quest2会自己重启。\n\n5. 重启完后再尝试使用手机App配对（还是选择Quest1），稍等后配对成功就可以将开发者相关的设置打开了。\n","slug":"Oculus-Quest2-无Facebook账户激活","published":1,"updated":"2023-08-05T06:14:33.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewus000b2qbhc60saw32","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在facebook收购Oculus后，新注册的用户就必须使用facebook账户来激活。这对于没有facebook账户的用户来说相当麻烦，尤其是在大陆的用户。注册便极有可能被机器自动封禁使得激活操作更加复杂。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>Oculus App Ver.36.0.0.5.242<br><a href=\"https://www.apkmirror.com/apk/facebook-technologies-llc/oculus-2/oculus-2-36-0-0-5-242-release/#downloads\">下载链接 (APK Mirror)</a><br><a href=\"https://nekorectifier.lanzouw.com/i7Nsguis60h\">下载链接 (Lanzoui)</a></li>\n<li>未安装任何Oculus应用的Android手机</li>\n<li>已经退出账户的Oculus Quest2</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>去Oculus官网去创建一个开发者帐号<br><a href=\"https://developer.oculus.com/sign-up\">点此创建开发者账户</a><br>并建立一个下属的测试帐号 用于在Oculus中登录</p>\n</li>\n<li><p>在手机上安装特定版本的Oculus App，并重置你的Oculus Quest2以准备进行连接<br><a href=\"https://www.bilibili.com/video/BV1Zv411e7Zm\">重置视频教程见此</a></p>\n</li>\n<li><p>打开手机上的App，使用你刚才注册的Oculus开发者帐号登录。<br>在设备中选中Quest1并尝试连接，随后等待手机提示连接失败。</p>\n</li>\n<li><p>再转到你的Quest2设备，发现它已经开始激活了。按照指示设定Wi-Fi，软件更新等其他步骤，一切完成后Quest2会自己重启。</p>\n</li>\n<li><p>重启完后再尝试使用手机App配对（还是选择Quest1），稍等后配对成功就可以将开发者相关的设置打开了。</p>\n</li>\n</ol>\n","site":{"data":{}},"length":333,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在facebook收购Oculus后，新注册的用户就必须使用facebook账户来激活。这对于没有facebook账户的用户来说相当麻烦，尤其是在大陆的用户。注册便极有可能被机器自动封禁使得激活操作更加复杂。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>Oculus App Ver.36.0.0.5.242<br><a href=\"https://www.apkmirror.com/apk/facebook-technologies-llc/oculus-2/oculus-2-36-0-0-5-242-release/#downloads\">下载链接 (APK Mirror)</a><br><a href=\"https://nekorectifier.lanzouw.com/i7Nsguis60h\">下载链接 (Lanzoui)</a></li>\n<li>未安装任何Oculus应用的Android手机</li>\n<li>已经退出账户的Oculus Quest2</li>\n</ul>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>去Oculus官网去创建一个开发者帐号<br><a href=\"https://developer.oculus.com/sign-up\">点此创建开发者账户</a><br>并建立一个下属的测试帐号 用于在Oculus中登录</p>\n</li>\n<li><p>在手机上安装特定版本的Oculus App，并重置你的Oculus Quest2以准备进行连接<br><a href=\"https://www.bilibili.com/video/BV1Zv411e7Zm\">重置视频教程见此</a></p>\n</li>\n<li><p>打开手机上的App，使用你刚才注册的Oculus开发者帐号登录。<br>在设备中选中Quest1并尝试连接，随后等待手机提示连接失败。</p>\n</li>\n<li><p>再转到你的Quest2设备，发现它已经开始激活了。按照指示设定Wi-Fi，软件更新等其他步骤，一切完成后Quest2会自己重启。</p>\n</li>\n<li><p>重启完后再尝试使用手机App配对（还是选择Quest1），稍等后配对成功就可以将开发者相关的设置打开了。</p>\n</li>\n</ol>\n"},{"title":"Office Word 解决卡顿问题","date":"2022-05-06T14:50:28.000Z","_content":"\n## 前言\n\n在编辑 Office Word 文档时，尽管还没写多少字，但是在滚轮滑动时可以明显感受到频繁的卡顿。卡顿不仅仅影响文字编辑，有时也会影响到连上方的选项卡。遂在知乎上找到了如下方法。\n\n## 解决办法\n\n- 在Word中，点击“文件”，再在下方选择“选项”。  \n- 打开“Word 选项”窗口后，找到“高级”>“显示”，最后勾选上“禁用硬件图像加速”即可解决问题。\n\n![settings](settings.png)\n","source":"_posts/Office-Word解决卡顿问题.md","raw":"---\ntitle: Office Word 解决卡顿问题\ndate: 2022-05-06 22:50:28\ntags: \n    - Office\n---\n\n## 前言\n\n在编辑 Office Word 文档时，尽管还没写多少字，但是在滚轮滑动时可以明显感受到频繁的卡顿。卡顿不仅仅影响文字编辑，有时也会影响到连上方的选项卡。遂在知乎上找到了如下方法。\n\n## 解决办法\n\n- 在Word中，点击“文件”，再在下方选择“选项”。  \n- 打开“Word 选项”窗口后，找到“高级”>“显示”，最后勾选上“禁用硬件图像加速”即可解决问题。\n\n![settings](settings.png)\n","slug":"Office-Word解决卡顿问题","published":1,"updated":"2023-08-05T06:14:33.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewut000d2qbh04ko1wbt","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在编辑 Office Word 文档时，尽管还没写多少字，但是在滚轮滑动时可以明显感受到频繁的卡顿。卡顿不仅仅影响文字编辑，有时也会影响到连上方的选项卡。遂在知乎上找到了如下方法。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>在Word中，点击“文件”，再在下方选择“选项”。  </li>\n<li>打开“Word 选项”窗口后，找到“高级”&gt;“显示”，最后勾选上“禁用硬件图像加速”即可解决问题。</li>\n</ul>\n<p><img src=\"/2022/05/06/Office-Word%E8%A7%A3%E5%86%B3%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/settings.png\" alt=\"settings\"></p>\n","site":{"data":{}},"length":128,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在编辑 Office Word 文档时，尽管还没写多少字，但是在滚轮滑动时可以明显感受到频繁的卡顿。卡顿不仅仅影响文字编辑，有时也会影响到连上方的选项卡。遂在知乎上找到了如下方法。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>在Word中，点击“文件”，再在下方选择“选项”。  </li>\n<li>打开“Word 选项”窗口后，找到“高级”&gt;“显示”，最后勾选上“禁用硬件图像加速”即可解决问题。</li>\n</ul>\n<p><img src=\"/2022/05/06/Office-Word%E8%A7%A3%E5%86%B3%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/settings.png\" alt=\"settings\"></p>\n"},{"title":"OpenCV_Android 部署指南","date":"2021-12-22T08:17:41.000Z","_content":"\n## OpenCV Release获取\n\n直接点击[这里](\"https://github.com/opencv/opencv/releases/download/4.5.4/opencv-4.5.4-android-sdk.zip\")下载opencv sdk 4.5.4\n\n下载到本地后解压即可\n\n![解压后图片](afterde.png)\n\n## Android Studio相关配置\n\n1.  新建一个项目,新建选项要选择 `Native C++` ,名称等配置随意.  \n\n    ![Native](nativ.png)\n\n2.  新建完后导入opencv模块, 在`File` > `New` > `Import Module` 里\n\n    ![Module](importmodule.png)\n\n    在打开的窗口内选择 `sdk` 文件夹导入即可  \n(适用于有build.gradle在解压文件夹下的情况,如果没有则本片指南不适用于你的opencv版本)\n\n3.  现在你的项目文件在 `Android` 视角下应该是这个样子  \n![项目列表](projlist.png)\n\n    -   如果导入后项目报 `kotlin` 相关错误, 则在 `build.gradle (Project: XXX)` 中,添加  \n\n        `ext.kotlin_version=\"1.6.10\"`和`classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10\"`  \n\n        使gradle文件如下所示:\n\n        ```gradle\n        build script{\n            ext.kotlin_version=\"1.6.10\"\n            repositories {\n                ...\n            }\n\n            dependencies {\n            classpath \"com.android.tools.build:gradle:XXX\"\n            classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10\"\n            }\n            ...\n        }\n        ```\n\n        如果没有则无视以上内容\n\n    选择 `File` > `Project Structure`\n\n    ![Proj](projstru.png)\n\n    点击 `Module Dependency` 后在弹出的新窗口内选择刚刚添加的 `opencv sdk`即可\n\n4.  打开 `build.gradle (Module: XXX.sdk)` 修改以下三个参数,使其与 `build.gradle (Module: app)` 中的相同\n\n    ![build](build.png)\n\n## 测试\n\n在 `MainActivity.java` 中的 `onCreate` 方法里写\n\n```java\nif (OpenCVLoader.initDebug()) {\n    Log.d(\"myTag\", \"OpenCV loaded\")\n}\n```\n\n然后部署到真机/模拟器查看log输出.\n\n# 参考链接\n\n[1] https://www.cnblogs.com/zhoushasha/p/10952148.html\n\n[2] https://stackoverflow.com/questions/65570664/how-to-import-opencv-4-5-in-android-studio\n\n\n\n","source":"_posts/OpenCV-Android部署指南.md","raw":"---\ntitle: OpenCV_Android 部署指南\ndate: 2021-12-22 16:17:41\ntags: \n    - Android\n    - OpenCV\n---\n\n## OpenCV Release获取\n\n直接点击[这里](\"https://github.com/opencv/opencv/releases/download/4.5.4/opencv-4.5.4-android-sdk.zip\")下载opencv sdk 4.5.4\n\n下载到本地后解压即可\n\n![解压后图片](afterde.png)\n\n## Android Studio相关配置\n\n1.  新建一个项目,新建选项要选择 `Native C++` ,名称等配置随意.  \n\n    ![Native](nativ.png)\n\n2.  新建完后导入opencv模块, 在`File` > `New` > `Import Module` 里\n\n    ![Module](importmodule.png)\n\n    在打开的窗口内选择 `sdk` 文件夹导入即可  \n(适用于有build.gradle在解压文件夹下的情况,如果没有则本片指南不适用于你的opencv版本)\n\n3.  现在你的项目文件在 `Android` 视角下应该是这个样子  \n![项目列表](projlist.png)\n\n    -   如果导入后项目报 `kotlin` 相关错误, 则在 `build.gradle (Project: XXX)` 中,添加  \n\n        `ext.kotlin_version=\"1.6.10\"`和`classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10\"`  \n\n        使gradle文件如下所示:\n\n        ```gradle\n        build script{\n            ext.kotlin_version=\"1.6.10\"\n            repositories {\n                ...\n            }\n\n            dependencies {\n            classpath \"com.android.tools.build:gradle:XXX\"\n            classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10\"\n            }\n            ...\n        }\n        ```\n\n        如果没有则无视以上内容\n\n    选择 `File` > `Project Structure`\n\n    ![Proj](projstru.png)\n\n    点击 `Module Dependency` 后在弹出的新窗口内选择刚刚添加的 `opencv sdk`即可\n\n4.  打开 `build.gradle (Module: XXX.sdk)` 修改以下三个参数,使其与 `build.gradle (Module: app)` 中的相同\n\n    ![build](build.png)\n\n## 测试\n\n在 `MainActivity.java` 中的 `onCreate` 方法里写\n\n```java\nif (OpenCVLoader.initDebug()) {\n    Log.d(\"myTag\", \"OpenCV loaded\")\n}\n```\n\n然后部署到真机/模拟器查看log输出.\n\n# 参考链接\n\n[1] https://www.cnblogs.com/zhoushasha/p/10952148.html\n\n[2] https://stackoverflow.com/questions/65570664/how-to-import-opencv-4-5-in-android-studio\n\n\n\n","slug":"OpenCV-Android部署指南","published":1,"updated":"2023-08-05T06:14:33.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewut000e2qbhao219r7n","content":"<h2 id=\"OpenCV-Release获取\"><a href=\"#OpenCV-Release获取\" class=\"headerlink\" title=\"OpenCV Release获取\"></a>OpenCV Release获取</h2><p>直接点击<a href=\"%22https://github.com/opencv/opencv/releases/download/4.5.4/opencv-4.5.4-android-sdk.zip%22\">这里</a>下载opencv sdk 4.5.4</p>\n<p>下载到本地后解压即可</p>\n<p><img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/afterde.png\" alt=\"解压后图片\"></p>\n<h2 id=\"Android-Studio相关配置\"><a href=\"#Android-Studio相关配置\" class=\"headerlink\" title=\"Android Studio相关配置\"></a>Android Studio相关配置</h2><ol>\n<li><p>新建一个项目,新建选项要选择 <code>Native C++</code> ,名称等配置随意.  </p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/nativ.png\" alt=\"Native\"></p>\n</li>\n<li><p>新建完后导入opencv模块, 在<code>File</code> &gt; <code>New</code> &gt; <code>Import Module</code> 里</p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/importmodule.png\" alt=\"Module\"></p>\n<p> 在打开的窗口内选择 <code>sdk</code> 文件夹导入即可<br>(适用于有build.gradle在解压文件夹下的情况,如果没有则本片指南不适用于你的opencv版本)</p>\n</li>\n<li><p>现在你的项目文件在 <code>Android</code> 视角下应该是这个样子<br><img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/projlist.png\" alt=\"项目列表\"></p>\n<ul>\n<li><p>如果导入后项目报 <code>kotlin</code> 相关错误, 则在 <code>build.gradle (Project: XXX)</code> 中,添加  </p>\n<p>  <code>ext.kotlin_version=&quot;1.6.10&quot;</code>和<code>classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10&quot;</code>  </p>\n<p>  使gradle文件如下所示:</p>\n  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build script&#123;</span><br><span class=\"line\">    ext.kotlin_version=<span class=\"string\">&quot;1.6.10&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">&quot;com.android.tools.build:gradle:XXX&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  如果没有则无视以上内容</p>\n</li>\n</ul>\n<p> 选择 <code>File</code> &gt; <code>Project Structure</code></p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/projstru.png\" alt=\"Proj\"></p>\n<p> 点击 <code>Module Dependency</code> 后在弹出的新窗口内选择刚刚添加的 <code>opencv sdk</code>即可</p>\n</li>\n<li><p>打开 <code>build.gradle (Module: XXX.sdk)</code> 修改以下三个参数,使其与 <code>build.gradle (Module: app)</code> 中的相同</p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/build.png\" alt=\"build\"></p>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在 <code>MainActivity.java</code> 中的 <code>onCreate</code> 方法里写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (OpenCVLoader.initDebug()) &#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;myTag&quot;</span>, <span class=\"string\">&quot;OpenCV loaded&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后部署到真机/模拟器查看log输出.</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>[1] <a href=\"https://www.cnblogs.com/zhoushasha/p/10952148.html\">https://www.cnblogs.com/zhoushasha/p/10952148.html</a></p>\n<p>[2] <a href=\"https://stackoverflow.com/questions/65570664/how-to-import-opencv-4-5-in-android-studio\">https://stackoverflow.com/questions/65570664/how-to-import-opencv-4-5-in-android-studio</a></p>\n","site":{"data":{}},"length":327,"excerpt":"","more":"<h2 id=\"OpenCV-Release获取\"><a href=\"#OpenCV-Release获取\" class=\"headerlink\" title=\"OpenCV Release获取\"></a>OpenCV Release获取</h2><p>直接点击<a href=\"%22https://github.com/opencv/opencv/releases/download/4.5.4/opencv-4.5.4-android-sdk.zip%22\">这里</a>下载opencv sdk 4.5.4</p>\n<p>下载到本地后解压即可</p>\n<p><img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/afterde.png\" alt=\"解压后图片\"></p>\n<h2 id=\"Android-Studio相关配置\"><a href=\"#Android-Studio相关配置\" class=\"headerlink\" title=\"Android Studio相关配置\"></a>Android Studio相关配置</h2><ol>\n<li><p>新建一个项目,新建选项要选择 <code>Native C++</code> ,名称等配置随意.  </p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/nativ.png\" alt=\"Native\"></p>\n</li>\n<li><p>新建完后导入opencv模块, 在<code>File</code> &gt; <code>New</code> &gt; <code>Import Module</code> 里</p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/importmodule.png\" alt=\"Module\"></p>\n<p> 在打开的窗口内选择 <code>sdk</code> 文件夹导入即可<br>(适用于有build.gradle在解压文件夹下的情况,如果没有则本片指南不适用于你的opencv版本)</p>\n</li>\n<li><p>现在你的项目文件在 <code>Android</code> 视角下应该是这个样子<br><img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/projlist.png\" alt=\"项目列表\"></p>\n<ul>\n<li><p>如果导入后项目报 <code>kotlin</code> 相关错误, 则在 <code>build.gradle (Project: XXX)</code> 中,添加  </p>\n<p>  <code>ext.kotlin_version=&quot;1.6.10&quot;</code>和<code>classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10&quot;</code>  </p>\n<p>  使gradle文件如下所示:</p>\n  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build script&#123;</span><br><span class=\"line\">    ext.kotlin_version=<span class=\"string\">&quot;1.6.10&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">&quot;com.android.tools.build:gradle:XXX&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>  如果没有则无视以上内容</p>\n</li>\n</ul>\n<p> 选择 <code>File</code> &gt; <code>Project Structure</code></p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/projstru.png\" alt=\"Proj\"></p>\n<p> 点击 <code>Module Dependency</code> 后在弹出的新窗口内选择刚刚添加的 <code>opencv sdk</code>即可</p>\n</li>\n<li><p>打开 <code>build.gradle (Module: XXX.sdk)</code> 修改以下三个参数,使其与 <code>build.gradle (Module: app)</code> 中的相同</p>\n<p> <img src=\"/2021/12/22/OpenCV-Android%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/build.png\" alt=\"build\"></p>\n</li>\n</ol>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>在 <code>MainActivity.java</code> 中的 <code>onCreate</code> 方法里写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (OpenCVLoader.initDebug()) &#123;</span><br><span class=\"line\">    Log.d(<span class=\"string\">&quot;myTag&quot;</span>, <span class=\"string\">&quot;OpenCV loaded&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后部署到真机/模拟器查看log输出.</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>[1] <a href=\"https://www.cnblogs.com/zhoushasha/p/10952148.html\">https://www.cnblogs.com/zhoushasha/p/10952148.html</a></p>\n<p>[2] <a href=\"https://stackoverflow.com/questions/65570664/how-to-import-opencv-4-5-in-android-studio\">https://stackoverflow.com/questions/65570664/how-to-import-opencv-4-5-in-android-studio</a></p>\n"},{"title":"Redmi G 2021 BIOS 升降级指南","date":"2022-04-07T07:30:51.000Z","_content":"\n## BIOS驱动\n\nRedmi G 2021 BIOS驱动 303-707\n[点击这里下载](https://nekorectifier.lanzouw.com/iVP5Y02rsx3e)\n\n## 如何升级\n\n1. 解压你下载的特定版本的BIOS压缩包，双击里面的exe可执行文件即可。\n\n    ![file](file_exe.png)\n\n2. 静待系统自动重启并开始BIOS升级。\n\n## 如何禁止BIOS自动升级\n\n1. 在`此电脑`上单击右键并点击`管理`。\n  \n    ![file](file_right_click.png)\n\n2. 在计算机管理中选择**设备管理器**，并在右边的窗口中找到`固件`。\n\n    ![file](com_mgr.png)\n\n3. 最后在`Xiaomi System Firmware 1.X.X.X`上右键选择**禁用**。\n\n    ![file](firmware_disable.png)\n\n## 如何降级\n\nBIOS升级后是不可以直接从`808`等版本降级到`707`的，升级软件会提示已安装版本高于即将要安装的版本。\n\n![file](degrade_failed.png)\n\n故需要采用先重新安装到`303`版本的方式来实现BIOS降级。\n\n## 参考链接\n\n[1] https://www.acfun.cn/a/ac33684886?from=video\n[2] https://www.bilibili.com/video/BV1rY41137bd","source":"_posts/Redmi-G-2021-BIOS-升降级指南.md","raw":"---\ntitle: Redmi G 2021 BIOS 升降级指南\ndate: 2022-04-07 15:30:51\ntags: \n    - BIOS\n---\n\n## BIOS驱动\n\nRedmi G 2021 BIOS驱动 303-707\n[点击这里下载](https://nekorectifier.lanzouw.com/iVP5Y02rsx3e)\n\n## 如何升级\n\n1. 解压你下载的特定版本的BIOS压缩包，双击里面的exe可执行文件即可。\n\n    ![file](file_exe.png)\n\n2. 静待系统自动重启并开始BIOS升级。\n\n## 如何禁止BIOS自动升级\n\n1. 在`此电脑`上单击右键并点击`管理`。\n  \n    ![file](file_right_click.png)\n\n2. 在计算机管理中选择**设备管理器**，并在右边的窗口中找到`固件`。\n\n    ![file](com_mgr.png)\n\n3. 最后在`Xiaomi System Firmware 1.X.X.X`上右键选择**禁用**。\n\n    ![file](firmware_disable.png)\n\n## 如何降级\n\nBIOS升级后是不可以直接从`808`等版本降级到`707`的，升级软件会提示已安装版本高于即将要安装的版本。\n\n![file](degrade_failed.png)\n\n故需要采用先重新安装到`303`版本的方式来实现BIOS降级。\n\n## 参考链接\n\n[1] https://www.acfun.cn/a/ac33684886?from=video\n[2] https://www.bilibili.com/video/BV1rY41137bd","slug":"Redmi-G-2021-BIOS-升降级指南","published":1,"updated":"2023-08-05T06:14:33.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuu000g2qbh5geg6s4r","content":"<h2 id=\"BIOS驱动\"><a href=\"#BIOS驱动\" class=\"headerlink\" title=\"BIOS驱动\"></a>BIOS驱动</h2><p>Redmi G 2021 BIOS驱动 303-707<br><a href=\"https://nekorectifier.lanzouw.com/iVP5Y02rsx3e\">点击这里下载</a></p>\n<h2 id=\"如何升级\"><a href=\"#如何升级\" class=\"headerlink\" title=\"如何升级\"></a>如何升级</h2><ol>\n<li><p>解压你下载的特定版本的BIOS压缩包，双击里面的exe可执行文件即可。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/file_exe.png\" alt=\"file\"></p>\n</li>\n<li><p>静待系统自动重启并开始BIOS升级。</p>\n</li>\n</ol>\n<h2 id=\"如何禁止BIOS自动升级\"><a href=\"#如何禁止BIOS自动升级\" class=\"headerlink\" title=\"如何禁止BIOS自动升级\"></a>如何禁止BIOS自动升级</h2><ol>\n<li><p>在<code>此电脑</code>上单击右键并点击<code>管理</code>。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/file_right_click.png\" alt=\"file\"></p>\n</li>\n<li><p>在计算机管理中选择<strong>设备管理器</strong>，并在右边的窗口中找到<code>固件</code>。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/com_mgr.png\" alt=\"file\"></p>\n</li>\n<li><p>最后在<code>Xiaomi System Firmware 1.X.X.X</code>上右键选择<strong>禁用</strong>。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/firmware_disable.png\" alt=\"file\"></p>\n</li>\n</ol>\n<h2 id=\"如何降级\"><a href=\"#如何降级\" class=\"headerlink\" title=\"如何降级\"></a>如何降级</h2><p>BIOS升级后是不可以直接从<code>808</code>等版本降级到<code>707</code>的，升级软件会提示已安装版本高于即将要安装的版本。</p>\n<p><img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/degrade_failed.png\" alt=\"file\"></p>\n<p>故需要采用先重新安装到<code>303</code>版本的方式来实现BIOS降级。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://www.acfun.cn/a/ac33684886?from=video\">https://www.acfun.cn/a/ac33684886?from=video</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1rY41137bd\">https://www.bilibili.com/video/BV1rY41137bd</a></p>\n","site":{"data":{}},"length":222,"excerpt":"","more":"<h2 id=\"BIOS驱动\"><a href=\"#BIOS驱动\" class=\"headerlink\" title=\"BIOS驱动\"></a>BIOS驱动</h2><p>Redmi G 2021 BIOS驱动 303-707<br><a href=\"https://nekorectifier.lanzouw.com/iVP5Y02rsx3e\">点击这里下载</a></p>\n<h2 id=\"如何升级\"><a href=\"#如何升级\" class=\"headerlink\" title=\"如何升级\"></a>如何升级</h2><ol>\n<li><p>解压你下载的特定版本的BIOS压缩包，双击里面的exe可执行文件即可。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/file_exe.png\" alt=\"file\"></p>\n</li>\n<li><p>静待系统自动重启并开始BIOS升级。</p>\n</li>\n</ol>\n<h2 id=\"如何禁止BIOS自动升级\"><a href=\"#如何禁止BIOS自动升级\" class=\"headerlink\" title=\"如何禁止BIOS自动升级\"></a>如何禁止BIOS自动升级</h2><ol>\n<li><p>在<code>此电脑</code>上单击右键并点击<code>管理</code>。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/file_right_click.png\" alt=\"file\"></p>\n</li>\n<li><p>在计算机管理中选择<strong>设备管理器</strong>，并在右边的窗口中找到<code>固件</code>。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/com_mgr.png\" alt=\"file\"></p>\n</li>\n<li><p>最后在<code>Xiaomi System Firmware 1.X.X.X</code>上右键选择<strong>禁用</strong>。</p>\n<p> <img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/firmware_disable.png\" alt=\"file\"></p>\n</li>\n</ol>\n<h2 id=\"如何降级\"><a href=\"#如何降级\" class=\"headerlink\" title=\"如何降级\"></a>如何降级</h2><p>BIOS升级后是不可以直接从<code>808</code>等版本降级到<code>707</code>的，升级软件会提示已安装版本高于即将要安装的版本。</p>\n<p><img src=\"/2022/04/07/Redmi-G-2021-BIOS-%E5%8D%87%E9%99%8D%E7%BA%A7%E6%8C%87%E5%8D%97/degrade_failed.png\" alt=\"file\"></p>\n<p>故需要采用先重新安装到<code>303</code>版本的方式来实现BIOS降级。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://www.acfun.cn/a/ac33684886?from=video\">https://www.acfun.cn/a/ac33684886?from=video</a><br>[2] <a href=\"https://www.bilibili.com/video/BV1rY41137bd\">https://www.bilibili.com/video/BV1rY41137bd</a></p>\n"},{"title":"Termux X11 在 Debian 11 上的部署与体验","date":"2023-02-10T05:09:44.000Z","_content":"\n## 前言\n\n以前在 Termux 上跑 proot/chroot 环境都是通过 (tiger/tight) VNC 或者 novnc 之类的方式来与桌面环境交互的，使用起来要么不太稳定；要么与原生系统契合感欠佳。于是便渐渐抛弃了给这些容器用上花里胡哨的桌面环境，只走普普通通的 cli 操作。 但现在听说出了个 X11 实现原生级别的交互，并且看[B站上的演示](https://www.bilibili.com/video/BV13Y4y1u7Wy)也的确眼馋，所以来自己试试。\n\n## Termux X11 基础配置\n\n> 由于 Termux X11 的开发仍在初始阶段，并没有被纳入到 Termux 自身当中，因而需要手动安装。\n\n- 下载 CI 的自动构建包\n  \n  到[这里](https://github.com/termux/termux-x11/actions/workflows/debug_build.yml)任意点击一个 workflow\n\n  ![workflow](workflow.png)\n\n  点击 `termux-x11` 下载压缩包即可。\n\n- 安装\n\n  安装压缩包内的 apk 文件与 deb 文件。\n\n  可以先将 deb 文件拷贝至设备内置存储 (/sdcard) 下，接着打开 Termux 运行：\n\n  ```bash\n    pkg update\n    pkg install x11-repo\n    cd /sdcard/\n    pkg install termux-x11.deb\n  ```\n\n  没有报错的话就可以进行下一步了。\n\n- 配置\n  \n  还是在 Termux 中，需要修改 `~/.termux/termux.properties` 文件。\n\n  ```bash\n    nano ~/.termux/termux.properties\n  ```\n\n  现在用 nano 编辑器打开了 termux 配置文件，接着用方向键找到 `#   allow-external-apps = true` 的这一行。\n\n  ![termux-properties](termux-properties.png)\n\n  将这一行行首的 “#” 号去掉，按 <kbd>ctrl</kbd> + <kbd>s</kbd> （termux小键盘上的 `ctrl` 与输入法上的 `s`）保存。然后按 <kbd>ctrl</kbd> + <kbd>x</kbd> 退出即可。\n\n  - 检查\n\n  运行 `termux-x11`，如果弹出 termux-x11 的窗口即为安装成功。\n\n## 安装 & 设置 Debian\n\n> 推荐使用 [tmoe](https://doc.tmoe.me/zh/android.html)\n\n运行这条命令\n\n```bash\ncurl -LO https://gitee.com/mo2/linux/raw/2/2.awk; awk -f 2.awk\n```\n\n并在接下来的选择中一直选 `y`，（当选择语言时直接点击回车） 就可以见到 tmoe 的主界面了。\n\n![ttmoe](termux-tmoe.png)\n\n> 如果你是 Android 12 及以上,则建议运行下 \"修复Android 12 (signal9)\" 以修复 Phantom Killer 的问题。\n\n接着安装 proot 容器，选择一个合适的发行版安装。\n\n- 设置好非 root 账户\n\n  如果你使用 tmoe 则在安装过程中会自动提示你进行设置。\n\n- 更新软件源\n\n  如果使用 tmoe 则国内源已经配置好，手动更新即可。\n  \n  ```bash\n    # Debian 情况\n    sudo apt update\n    sudo apt upgrade\n    # 其他发行版请自行查看\n  ```\n\n- 安装 xfce4 桌面环境\n\n  ```bash\n    sudo apt install xfce\n    sudo apt install dbus-x11\n  ```\n\n- 编写启动脚本\n  \n  使用 `nano start.sh` 创建文件\n\n  内容如下\n\n  ```bash\n  #!/bin/bash\n  export DISPLAY=:0\n  dbus-launch --exit-with-session startxfce4 &\n  ```\n\n  保存之后，使用命令修改权限 `chmod +x ./start.sh`\n\n- 设置 `/tmp` 目录共享\n\n  在宿主机的环境内运行 tmoe，编辑其 “环境变量与登录项管理”\n\n  ![](tmoe-con-edit.png)\n\n  然后选择 “共享tmp”\n\n  ![](tmp.png)\n\n  在新窗口中\n\n  - 第一次选 true\n  - 剩余两次选 cancel\n  - 最后退出设定\n\n  这样就完成了 proot 容器的全部设置。\n\n## 运行\n\n1. 关掉 Termux 重开\n2. 执行 `termux-x11`\n3. 打开第二个 session，执行 `tmoe p` 启动上一次启动的 proot 容器\n4. 在容器环境中运行脚本 `./start.sh`\n5. 回到 Termux X11 app 中看看启动的 xfce4 桌面\n\n## 参考链接\n\n【1】<https://ivonblog.com/posts/termux-x11/>  \n【2】<https://github.com/kde-yyds/termux-x11-plasma-installation-guide>\n","source":"_posts/Termux-X11-在-Debian-11-上的部署与体验.md","raw":"---\ntitle: Termux X11 在 Debian 11 上的部署与体验\ndate: 2023-02-10 13:09:44\ntags: \n  - Termux\n---\n\n## 前言\n\n以前在 Termux 上跑 proot/chroot 环境都是通过 (tiger/tight) VNC 或者 novnc 之类的方式来与桌面环境交互的，使用起来要么不太稳定；要么与原生系统契合感欠佳。于是便渐渐抛弃了给这些容器用上花里胡哨的桌面环境，只走普普通通的 cli 操作。 但现在听说出了个 X11 实现原生级别的交互，并且看[B站上的演示](https://www.bilibili.com/video/BV13Y4y1u7Wy)也的确眼馋，所以来自己试试。\n\n## Termux X11 基础配置\n\n> 由于 Termux X11 的开发仍在初始阶段，并没有被纳入到 Termux 自身当中，因而需要手动安装。\n\n- 下载 CI 的自动构建包\n  \n  到[这里](https://github.com/termux/termux-x11/actions/workflows/debug_build.yml)任意点击一个 workflow\n\n  ![workflow](workflow.png)\n\n  点击 `termux-x11` 下载压缩包即可。\n\n- 安装\n\n  安装压缩包内的 apk 文件与 deb 文件。\n\n  可以先将 deb 文件拷贝至设备内置存储 (/sdcard) 下，接着打开 Termux 运行：\n\n  ```bash\n    pkg update\n    pkg install x11-repo\n    cd /sdcard/\n    pkg install termux-x11.deb\n  ```\n\n  没有报错的话就可以进行下一步了。\n\n- 配置\n  \n  还是在 Termux 中，需要修改 `~/.termux/termux.properties` 文件。\n\n  ```bash\n    nano ~/.termux/termux.properties\n  ```\n\n  现在用 nano 编辑器打开了 termux 配置文件，接着用方向键找到 `#   allow-external-apps = true` 的这一行。\n\n  ![termux-properties](termux-properties.png)\n\n  将这一行行首的 “#” 号去掉，按 <kbd>ctrl</kbd> + <kbd>s</kbd> （termux小键盘上的 `ctrl` 与输入法上的 `s`）保存。然后按 <kbd>ctrl</kbd> + <kbd>x</kbd> 退出即可。\n\n  - 检查\n\n  运行 `termux-x11`，如果弹出 termux-x11 的窗口即为安装成功。\n\n## 安装 & 设置 Debian\n\n> 推荐使用 [tmoe](https://doc.tmoe.me/zh/android.html)\n\n运行这条命令\n\n```bash\ncurl -LO https://gitee.com/mo2/linux/raw/2/2.awk; awk -f 2.awk\n```\n\n并在接下来的选择中一直选 `y`，（当选择语言时直接点击回车） 就可以见到 tmoe 的主界面了。\n\n![ttmoe](termux-tmoe.png)\n\n> 如果你是 Android 12 及以上,则建议运行下 \"修复Android 12 (signal9)\" 以修复 Phantom Killer 的问题。\n\n接着安装 proot 容器，选择一个合适的发行版安装。\n\n- 设置好非 root 账户\n\n  如果你使用 tmoe 则在安装过程中会自动提示你进行设置。\n\n- 更新软件源\n\n  如果使用 tmoe 则国内源已经配置好，手动更新即可。\n  \n  ```bash\n    # Debian 情况\n    sudo apt update\n    sudo apt upgrade\n    # 其他发行版请自行查看\n  ```\n\n- 安装 xfce4 桌面环境\n\n  ```bash\n    sudo apt install xfce\n    sudo apt install dbus-x11\n  ```\n\n- 编写启动脚本\n  \n  使用 `nano start.sh` 创建文件\n\n  内容如下\n\n  ```bash\n  #!/bin/bash\n  export DISPLAY=:0\n  dbus-launch --exit-with-session startxfce4 &\n  ```\n\n  保存之后，使用命令修改权限 `chmod +x ./start.sh`\n\n- 设置 `/tmp` 目录共享\n\n  在宿主机的环境内运行 tmoe，编辑其 “环境变量与登录项管理”\n\n  ![](tmoe-con-edit.png)\n\n  然后选择 “共享tmp”\n\n  ![](tmp.png)\n\n  在新窗口中\n\n  - 第一次选 true\n  - 剩余两次选 cancel\n  - 最后退出设定\n\n  这样就完成了 proot 容器的全部设置。\n\n## 运行\n\n1. 关掉 Termux 重开\n2. 执行 `termux-x11`\n3. 打开第二个 session，执行 `tmoe p` 启动上一次启动的 proot 容器\n4. 在容器环境中运行脚本 `./start.sh`\n5. 回到 Termux X11 app 中看看启动的 xfce4 桌面\n\n## 参考链接\n\n【1】<https://ivonblog.com/posts/termux-x11/>  \n【2】<https://github.com/kde-yyds/termux-x11-plasma-installation-guide>\n","slug":"Termux-X11-在-Debian-11-上的部署与体验","published":1,"updated":"2023-08-05T06:14:33.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuv000i2qbh6ckj0jc9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前在 Termux 上跑 proot/chroot 环境都是通过 (tiger/tight) VNC 或者 novnc 之类的方式来与桌面环境交互的，使用起来要么不太稳定；要么与原生系统契合感欠佳。于是便渐渐抛弃了给这些容器用上花里胡哨的桌面环境，只走普普通通的 cli 操作。 但现在听说出了个 X11 实现原生级别的交互，并且看<a href=\"https://www.bilibili.com/video/BV13Y4y1u7Wy\">B站上的演示</a>也的确眼馋，所以来自己试试。</p>\n<h2 id=\"Termux-X11-基础配置\"><a href=\"#Termux-X11-基础配置\" class=\"headerlink\" title=\"Termux X11 基础配置\"></a>Termux X11 基础配置</h2><blockquote>\n<p>由于 Termux X11 的开发仍在初始阶段，并没有被纳入到 Termux 自身当中，因而需要手动安装。</p>\n</blockquote>\n<ul>\n<li><p>下载 CI 的自动构建包</p>\n<p>到<a href=\"https://github.com/termux/termux-x11/actions/workflows/debug_build.yml\">这里</a>任意点击一个 workflow</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/workflow.png\" alt=\"workflow\"></p>\n<p>点击 <code>termux-x11</code> 下载压缩包即可。</p>\n</li>\n<li><p>安装</p>\n<p>安装压缩包内的 apk 文件与 deb 文件。</p>\n<p>可以先将 deb 文件拷贝至设备内置存储 (/sdcard) 下，接着打开 Termux 运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg update</span><br><span class=\"line\">pkg install x11-repo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /sdcard/</span><br><span class=\"line\">pkg install termux-x11.deb</span><br></pre></td></tr></table></figure>\n\n<p>没有报错的话就可以进行下一步了。</p>\n</li>\n<li><p>配置</p>\n<p>还是在 Termux 中，需要修改 <code>~/.termux/termux.properties</code> 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/.termux/termux.properties</span><br></pre></td></tr></table></figure>\n\n<p>现在用 nano 编辑器打开了 termux 配置文件，接着用方向键找到 <code>#   allow-external-apps = true</code> 的这一行。</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/termux-properties.png\" alt=\"termux-properties\"></p>\n<p>将这一行行首的 “#” 号去掉，按 <kbd>ctrl</kbd> + <kbd>s</kbd> （termux小键盘上的 <code>ctrl</code> 与输入法上的 <code>s</code>）保存。然后按 <kbd>ctrl</kbd> + <kbd>x</kbd> 退出即可。</p>\n<ul>\n<li>检查</li>\n</ul>\n<p>运行 <code>termux-x11</code>，如果弹出 termux-x11 的窗口即为安装成功。</p>\n</li>\n</ul>\n<h2 id=\"安装-amp-设置-Debian\"><a href=\"#安装-amp-设置-Debian\" class=\"headerlink\" title=\"安装 &amp; 设置 Debian\"></a>安装 &amp; 设置 Debian</h2><blockquote>\n<p>推荐使用 <a href=\"https://doc.tmoe.me/zh/android.html\">tmoe</a></p>\n</blockquote>\n<p>运行这条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO https://gitee.com/mo2/linux/raw/2/2.awk; awk -f 2.awk</span><br></pre></td></tr></table></figure>\n\n<p>并在接下来的选择中一直选 <code>y</code>，（当选择语言时直接点击回车） 就可以见到 tmoe 的主界面了。</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/termux-tmoe.png\" alt=\"ttmoe\"></p>\n<blockquote>\n<p>如果你是 Android 12 及以上,则建议运行下 “修复Android 12 (signal9)” 以修复 Phantom Killer 的问题。</p>\n</blockquote>\n<p>接着安装 proot 容器，选择一个合适的发行版安装。</p>\n<ul>\n<li><p>设置好非 root 账户</p>\n<p>如果你使用 tmoe 则在安装过程中会自动提示你进行设置。</p>\n</li>\n<li><p>更新软件源</p>\n<p>如果使用 tmoe 则国内源已经配置好，手动更新即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Debian 情况</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt upgrade</span><br><span class=\"line\"><span class=\"comment\"># 其他发行版请自行查看</span></span><br></pre></td></tr></table></figure></li>\n<li><p>安装 xfce4 桌面环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install xfce</span><br><span class=\"line\">sudo apt install dbus-x11</span><br></pre></td></tr></table></figure></li>\n<li><p>编写启动脚本</p>\n<p>使用 <code>nano start.sh</code> 创建文件</p>\n<p>内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=:0</span><br><span class=\"line\">dbus-launch --exit-with-session startxfce4 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>保存之后，使用命令修改权限 <code>chmod +x ./start.sh</code></p>\n</li>\n<li><p>设置 <code>/tmp</code> 目录共享</p>\n<p>在宿主机的环境内运行 tmoe，编辑其 “环境变量与登录项管理”</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/tmoe-con-edit.png\"></p>\n<p>然后选择 “共享tmp”</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/tmp.png\"></p>\n<p>在新窗口中</p>\n<ul>\n<li>第一次选 true</li>\n<li>剩余两次选 cancel</li>\n<li>最后退出设定</li>\n</ul>\n<p>这样就完成了 proot 容器的全部设置。</p>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>关掉 Termux 重开</li>\n<li>执行 <code>termux-x11</code></li>\n<li>打开第二个 session，执行 <code>tmoe p</code> 启动上一次启动的 proot 容器</li>\n<li>在容器环境中运行脚本 <code>./start.sh</code></li>\n<li>回到 Termux X11 app 中看看启动的 xfce4 桌面</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>【1】<a href=\"https://ivonblog.com/posts/termux-x11/\">https://ivonblog.com/posts/termux-x11/</a><br>【2】<a href=\"https://github.com/kde-yyds/termux-x11-plasma-installation-guide\">https://github.com/kde-yyds/termux-x11-plasma-installation-guide</a></p>\n","site":{"data":{}},"length":798,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前在 Termux 上跑 proot/chroot 环境都是通过 (tiger/tight) VNC 或者 novnc 之类的方式来与桌面环境交互的，使用起来要么不太稳定；要么与原生系统契合感欠佳。于是便渐渐抛弃了给这些容器用上花里胡哨的桌面环境，只走普普通通的 cli 操作。 但现在听说出了个 X11 实现原生级别的交互，并且看<a href=\"https://www.bilibili.com/video/BV13Y4y1u7Wy\">B站上的演示</a>也的确眼馋，所以来自己试试。</p>\n<h2 id=\"Termux-X11-基础配置\"><a href=\"#Termux-X11-基础配置\" class=\"headerlink\" title=\"Termux X11 基础配置\"></a>Termux X11 基础配置</h2><blockquote>\n<p>由于 Termux X11 的开发仍在初始阶段，并没有被纳入到 Termux 自身当中，因而需要手动安装。</p>\n</blockquote>\n<ul>\n<li><p>下载 CI 的自动构建包</p>\n<p>到<a href=\"https://github.com/termux/termux-x11/actions/workflows/debug_build.yml\">这里</a>任意点击一个 workflow</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/workflow.png\" alt=\"workflow\"></p>\n<p>点击 <code>termux-x11</code> 下载压缩包即可。</p>\n</li>\n<li><p>安装</p>\n<p>安装压缩包内的 apk 文件与 deb 文件。</p>\n<p>可以先将 deb 文件拷贝至设备内置存储 (/sdcard) 下，接着打开 Termux 运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg update</span><br><span class=\"line\">pkg install x11-repo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /sdcard/</span><br><span class=\"line\">pkg install termux-x11.deb</span><br></pre></td></tr></table></figure>\n\n<p>没有报错的话就可以进行下一步了。</p>\n</li>\n<li><p>配置</p>\n<p>还是在 Termux 中，需要修改 <code>~/.termux/termux.properties</code> 文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano ~/.termux/termux.properties</span><br></pre></td></tr></table></figure>\n\n<p>现在用 nano 编辑器打开了 termux 配置文件，接着用方向键找到 <code>#   allow-external-apps = true</code> 的这一行。</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/termux-properties.png\" alt=\"termux-properties\"></p>\n<p>将这一行行首的 “#” 号去掉，按 <kbd>ctrl</kbd> + <kbd>s</kbd> （termux小键盘上的 <code>ctrl</code> 与输入法上的 <code>s</code>）保存。然后按 <kbd>ctrl</kbd> + <kbd>x</kbd> 退出即可。</p>\n<ul>\n<li>检查</li>\n</ul>\n<p>运行 <code>termux-x11</code>，如果弹出 termux-x11 的窗口即为安装成功。</p>\n</li>\n</ul>\n<h2 id=\"安装-amp-设置-Debian\"><a href=\"#安装-amp-设置-Debian\" class=\"headerlink\" title=\"安装 &amp; 设置 Debian\"></a>安装 &amp; 设置 Debian</h2><blockquote>\n<p>推荐使用 <a href=\"https://doc.tmoe.me/zh/android.html\">tmoe</a></p>\n</blockquote>\n<p>运行这条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO https://gitee.com/mo2/linux/raw/2/2.awk; awk -f 2.awk</span><br></pre></td></tr></table></figure>\n\n<p>并在接下来的选择中一直选 <code>y</code>，（当选择语言时直接点击回车） 就可以见到 tmoe 的主界面了。</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/termux-tmoe.png\" alt=\"ttmoe\"></p>\n<blockquote>\n<p>如果你是 Android 12 及以上,则建议运行下 “修复Android 12 (signal9)” 以修复 Phantom Killer 的问题。</p>\n</blockquote>\n<p>接着安装 proot 容器，选择一个合适的发行版安装。</p>\n<ul>\n<li><p>设置好非 root 账户</p>\n<p>如果你使用 tmoe 则在安装过程中会自动提示你进行设置。</p>\n</li>\n<li><p>更新软件源</p>\n<p>如果使用 tmoe 则国内源已经配置好，手动更新即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Debian 情况</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt upgrade</span><br><span class=\"line\"><span class=\"comment\"># 其他发行版请自行查看</span></span><br></pre></td></tr></table></figure></li>\n<li><p>安装 xfce4 桌面环境</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install xfce</span><br><span class=\"line\">sudo apt install dbus-x11</span><br></pre></td></tr></table></figure></li>\n<li><p>编写启动脚本</p>\n<p>使用 <code>nano start.sh</code> 创建文件</p>\n<p>内容如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> DISPLAY=:0</span><br><span class=\"line\">dbus-launch --exit-with-session startxfce4 &amp;</span><br></pre></td></tr></table></figure>\n\n<p>保存之后，使用命令修改权限 <code>chmod +x ./start.sh</code></p>\n</li>\n<li><p>设置 <code>/tmp</code> 目录共享</p>\n<p>在宿主机的环境内运行 tmoe，编辑其 “环境变量与登录项管理”</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/tmoe-con-edit.png\"></p>\n<p>然后选择 “共享tmp”</p>\n<p><img src=\"/2023/02/10/Termux-X11-%E5%9C%A8-Debian-11-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%93%E9%AA%8C/tmp.png\"></p>\n<p>在新窗口中</p>\n<ul>\n<li>第一次选 true</li>\n<li>剩余两次选 cancel</li>\n<li>最后退出设定</li>\n</ul>\n<p>这样就完成了 proot 容器的全部设置。</p>\n</li>\n</ul>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>关掉 Termux 重开</li>\n<li>执行 <code>termux-x11</code></li>\n<li>打开第二个 session，执行 <code>tmoe p</code> 启动上一次启动的 proot 容器</li>\n<li>在容器环境中运行脚本 <code>./start.sh</code></li>\n<li>回到 Termux X11 app 中看看启动的 xfce4 桌面</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>【1】<a href=\"https://ivonblog.com/posts/termux-x11/\">https://ivonblog.com/posts/termux-x11/</a><br>【2】<a href=\"https://github.com/kde-yyds/termux-x11-plasma-installation-guide\">https://github.com/kde-yyds/termux-x11-plasma-installation-guide</a></p>\n"},{"title":"Visual Studio Code C/C++ 基础开发环境配置指南","date":"2022-05-17T13:35:48.000Z","_content":"\n# 前言\n\n说是 VSC 的开发环境配置，其实是 Windows 下 C/C++ 的环境配置指南。\n\n无论是在 Linux 还是 OSX 上，配置 C/C++ 的环境很大程度上都是一行命令能解决的事。而在 Windows 上情况就变得相当复杂了起来。\n移植到 Windows 平台的编译器种类繁多：MinGW、MinGW-w64、MSYS/2、Cygwin 等，光是厘清[这些编译器的区别](https://blog.csdn.net/u012408797/article/details/120490201)就足够让人头大了。\n但如今 [WinLibs](https://winlibs.com/) 的出现应该能更好的解决配置 C/C++ 环境的问题。\n\n# 编译器解决方案 —— WinLibs\n\n## 简介\n\n官网上是这样描述的：*\"In short: it's a free C and C++ compiler for Microsoft Windows.\"*\n实际上也确实如此，不过 WinLibs 不仅仅包含（最新的）GCC，它还涵盖了：LLVM 前端（Clang）、LLDB 调试器与 MinGW-w64 环境。\n\n不可否认，WinLibs 作为一款完备的 C/C++ 开发环境是完全可行的。\n\n## 下载\n\n移步至官网的[下载页面](https://winlibs.com/#download-release)或直接点击这个[链接](https://github.com/brechtsanders/winlibs_mingw/releases/download/12.1.0-14.0.4-10.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-12.1.0-llvm-14.0.4-mingw-w64ucrt-10.0.0-r2.7z)（本文发布时为最新版）\n\n### UCRT 与 MSVCRT 版本的区别\n\n> 传统上，MinGW-w64编译器使用MSVCRT作为运行时库，它在所有版本的Windows中都可用。\n自Windows 10开始，Universal C Runtime (UCRT)可作为MSVCRT的替代品。Universal C Runtime也可以安装在早期版本的Windows上（见：Windows中Universal C Runtime的更新）。\n除非你的目标是旧版本的Windows，否则UCRT作为运行时库是更好的选择，因为它的编写是为了更好地支持最近的Windows版本，以及提供更好的标准一致性。\n\n也就是说，UCRT 是 “更新的标准”，理应优先采用。\n\n## 安装\n\n1. 将下载的压缩包解压后，得到如下文件\n  ![cb](compress_bag.png)\n\n2. 将整个文件夹移动至合适位置\n  由于 WinLibs 采用了压缩包来发布，所以不需要进行传统的安装操作。把文件放置到合适位置即可。\n  比如我就将其放置到 `D:\\Program Files\\` 下，完整路径为：`D:\\Program Files\\mingw64`。\n\n3. 添加路径至 path 变量\n  ![ps](path_settings.png)\n  添加完整路径到 path 变量下。\n\n4. [OPTIONAL] 测试 path 变量是否正确\n  打开 cmd，输入\n  \n  ```cmd\n      gcc --version\n      g++ --version\n      clang --version\n  ```\n  \n![vt](version_test.png)\n  如图所示即为正常。\n\n# Visual Studio Code 设置\n\n1. 安装 CodeRunner 插件\n  ![i_cr](install_cr.png)\n\n2. 进行插件配置\n  \n  - 开启可交互的终端\n    按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；\n    然后按下图配置将 `Run In Terminal` 选项勾选上；\n    ![es](extension_settings.png)\n\n  - 选择 GCC / Clang 编译器\n    按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；\n    点击右上角按钮，进入 json 编辑界面；\n    按如下格式修改 `code-runner.executorMap` 的内容。\n\n    ```json\n    \"code-runner.executorMap\": {\n        \"javascript\": \"node\",\n        \"java\": \"cd $dir && javac $fileName && java $fileNameWithoutExt\",\n        \"c\": \"cd $dir && {你想要的编译器名称} $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt\",\n        \"cpp\": \"cd $dir && {你想要的编译器名称} $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt\",\n        \"objective-c\": \"cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt\",\n        \n        ...\n\n    },\n    ```\n3. 完成配置\n\n  之后在右键菜单/<kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>n</kbd> 都可以直接编译运行 C/C++ 程序并与之交互了。\n\n\n\n# 参考链接\n【1】https://blog.csdn.net/lzyws739307453/article/details/89823900\n【2】https://blog.csdn.net/u012408797/article/details/120490201\n【3】https://zhuanlan.zhihu.com/p/401188789\n【4】https://blog.csdn.net/cjmqas/article/details/79296865","source":"_posts/Visual-Studio-Code-C-C-基础开发环境配置指南.md","raw":"---\ntitle: Visual Studio Code C/C++ 基础开发环境配置指南\ndate: 2022-05-17 21:35:48\ntags: \n    - VSC\n    - C/C++\n---\n\n# 前言\n\n说是 VSC 的开发环境配置，其实是 Windows 下 C/C++ 的环境配置指南。\n\n无论是在 Linux 还是 OSX 上，配置 C/C++ 的环境很大程度上都是一行命令能解决的事。而在 Windows 上情况就变得相当复杂了起来。\n移植到 Windows 平台的编译器种类繁多：MinGW、MinGW-w64、MSYS/2、Cygwin 等，光是厘清[这些编译器的区别](https://blog.csdn.net/u012408797/article/details/120490201)就足够让人头大了。\n但如今 [WinLibs](https://winlibs.com/) 的出现应该能更好的解决配置 C/C++ 环境的问题。\n\n# 编译器解决方案 —— WinLibs\n\n## 简介\n\n官网上是这样描述的：*\"In short: it's a free C and C++ compiler for Microsoft Windows.\"*\n实际上也确实如此，不过 WinLibs 不仅仅包含（最新的）GCC，它还涵盖了：LLVM 前端（Clang）、LLDB 调试器与 MinGW-w64 环境。\n\n不可否认，WinLibs 作为一款完备的 C/C++ 开发环境是完全可行的。\n\n## 下载\n\n移步至官网的[下载页面](https://winlibs.com/#download-release)或直接点击这个[链接](https://github.com/brechtsanders/winlibs_mingw/releases/download/12.1.0-14.0.4-10.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-12.1.0-llvm-14.0.4-mingw-w64ucrt-10.0.0-r2.7z)（本文发布时为最新版）\n\n### UCRT 与 MSVCRT 版本的区别\n\n> 传统上，MinGW-w64编译器使用MSVCRT作为运行时库，它在所有版本的Windows中都可用。\n自Windows 10开始，Universal C Runtime (UCRT)可作为MSVCRT的替代品。Universal C Runtime也可以安装在早期版本的Windows上（见：Windows中Universal C Runtime的更新）。\n除非你的目标是旧版本的Windows，否则UCRT作为运行时库是更好的选择，因为它的编写是为了更好地支持最近的Windows版本，以及提供更好的标准一致性。\n\n也就是说，UCRT 是 “更新的标准”，理应优先采用。\n\n## 安装\n\n1. 将下载的压缩包解压后，得到如下文件\n  ![cb](compress_bag.png)\n\n2. 将整个文件夹移动至合适位置\n  由于 WinLibs 采用了压缩包来发布，所以不需要进行传统的安装操作。把文件放置到合适位置即可。\n  比如我就将其放置到 `D:\\Program Files\\` 下，完整路径为：`D:\\Program Files\\mingw64`。\n\n3. 添加路径至 path 变量\n  ![ps](path_settings.png)\n  添加完整路径到 path 变量下。\n\n4. [OPTIONAL] 测试 path 变量是否正确\n  打开 cmd，输入\n  \n  ```cmd\n      gcc --version\n      g++ --version\n      clang --version\n  ```\n  \n![vt](version_test.png)\n  如图所示即为正常。\n\n# Visual Studio Code 设置\n\n1. 安装 CodeRunner 插件\n  ![i_cr](install_cr.png)\n\n2. 进行插件配置\n  \n  - 开启可交互的终端\n    按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；\n    然后按下图配置将 `Run In Terminal` 选项勾选上；\n    ![es](extension_settings.png)\n\n  - 选择 GCC / Clang 编译器\n    按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；\n    点击右上角按钮，进入 json 编辑界面；\n    按如下格式修改 `code-runner.executorMap` 的内容。\n\n    ```json\n    \"code-runner.executorMap\": {\n        \"javascript\": \"node\",\n        \"java\": \"cd $dir && javac $fileName && java $fileNameWithoutExt\",\n        \"c\": \"cd $dir && {你想要的编译器名称} $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt\",\n        \"cpp\": \"cd $dir && {你想要的编译器名称} $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt\",\n        \"objective-c\": \"cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt\",\n        \n        ...\n\n    },\n    ```\n3. 完成配置\n\n  之后在右键菜单/<kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>n</kbd> 都可以直接编译运行 C/C++ 程序并与之交互了。\n\n\n\n# 参考链接\n【1】https://blog.csdn.net/lzyws739307453/article/details/89823900\n【2】https://blog.csdn.net/u012408797/article/details/120490201\n【3】https://zhuanlan.zhihu.com/p/401188789\n【4】https://blog.csdn.net/cjmqas/article/details/79296865","slug":"Visual-Studio-Code-C-C-基础开发环境配置指南","published":1,"updated":"2023-08-05T06:14:33.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuw000l2qbhefp46g3h","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>说是 VSC 的开发环境配置，其实是 Windows 下 C/C++ 的环境配置指南。</p>\n<p>无论是在 Linux 还是 OSX 上，配置 C/C++ 的环境很大程度上都是一行命令能解决的事。而在 Windows 上情况就变得相当复杂了起来。<br>移植到 Windows 平台的编译器种类繁多：MinGW、MinGW-w64、MSYS/2、Cygwin 等，光是厘清<a href=\"https://blog.csdn.net/u012408797/article/details/120490201\">这些编译器的区别</a>就足够让人头大了。<br>但如今 <a href=\"https://winlibs.com/\">WinLibs</a> 的出现应该能更好的解决配置 C/C++ 环境的问题。</p>\n<h1 id=\"编译器解决方案-——-WinLibs\"><a href=\"#编译器解决方案-——-WinLibs\" class=\"headerlink\" title=\"编译器解决方案 —— WinLibs\"></a>编译器解决方案 —— WinLibs</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>官网上是这样描述的：*”In short: it’s a free C and C++ compiler for Microsoft Windows.”*<br>实际上也确实如此，不过 WinLibs 不仅仅包含（最新的）GCC，它还涵盖了：LLVM 前端（Clang）、LLDB 调试器与 MinGW-w64 环境。</p>\n<p>不可否认，WinLibs 作为一款完备的 C/C++ 开发环境是完全可行的。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>移步至官网的<a href=\"https://winlibs.com/#download-release\">下载页面</a>或直接点击这个<a href=\"https://github.com/brechtsanders/winlibs_mingw/releases/download/12.1.0-14.0.4-10.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-12.1.0-llvm-14.0.4-mingw-w64ucrt-10.0.0-r2.7z\">链接</a>（本文发布时为最新版）</p>\n<h3 id=\"UCRT-与-MSVCRT-版本的区别\"><a href=\"#UCRT-与-MSVCRT-版本的区别\" class=\"headerlink\" title=\"UCRT 与 MSVCRT 版本的区别\"></a>UCRT 与 MSVCRT 版本的区别</h3><blockquote>\n<p>传统上，MinGW-w64编译器使用MSVCRT作为运行时库，它在所有版本的Windows中都可用。<br>自Windows 10开始，Universal C Runtime (UCRT)可作为MSVCRT的替代品。Universal C Runtime也可以安装在早期版本的Windows上（见：Windows中Universal C Runtime的更新）。<br>除非你的目标是旧版本的Windows，否则UCRT作为运行时库是更好的选择，因为它的编写是为了更好地支持最近的Windows版本，以及提供更好的标准一致性。</p>\n</blockquote>\n<p>也就是说，UCRT 是 “更新的标准”，理应优先采用。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>将下载的压缩包解压后，得到如下文件<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/compress_bag.png\" alt=\"cb\"></p>\n</li>\n<li><p>将整个文件夹移动至合适位置<br>由于 WinLibs 采用了压缩包来发布，所以不需要进行传统的安装操作。把文件放置到合适位置即可。<br>比如我就将其放置到 <code>D:\\Program Files\\</code> 下，完整路径为：<code>D:\\Program Files\\mingw64</code>。</p>\n</li>\n<li><p>添加路径至 path 变量<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/path_settings.png\" alt=\"ps\"><br>添加完整路径到 path 变量下。</p>\n</li>\n<li><p>[OPTIONAL] 测试 path 变量是否正确<br>打开 cmd，输入</p>\n</li>\n</ol>\n  <figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br><span class=\"line\">g++ --version</span><br><span class=\"line\">clang --version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/version_test.png\" alt=\"vt\"><br>  如图所示即为正常。</p>\n<h1 id=\"Visual-Studio-Code-设置\"><a href=\"#Visual-Studio-Code-设置\" class=\"headerlink\" title=\"Visual Studio Code 设置\"></a>Visual Studio Code 设置</h1><ol>\n<li><p>安装 CodeRunner 插件<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/install_cr.png\" alt=\"i_cr\"></p>\n</li>\n<li><p>进行插件配置</p>\n</li>\n</ol>\n<ul>\n<li><p>开启可交互的终端<br>按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；<br>然后按下图配置将 <code>Run In Terminal</code> 选项勾选上；<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/extension_settings.png\" alt=\"es\"></p>\n</li>\n<li><p>选择 GCC / Clang 编译器<br>按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；<br>点击右上角按钮，进入 json 编辑界面；<br>按如下格式修改 <code>code-runner.executorMap</code> 的内容。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;code-runner.executorMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;javascript&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;c&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; &#123;你想要的编译器名称&#125; $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cpp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; &#123;你想要的编译器名称&#125; $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;objective-c&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>完成配置</li>\n</ol>\n<p>  之后在右键菜单/<kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>n</kbd> 都可以直接编译运行 C/C++ 程序并与之交互了。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】<a href=\"https://blog.csdn.net/lzyws739307453/article/details/89823900\">https://blog.csdn.net/lzyws739307453/article/details/89823900</a><br>【2】<a href=\"https://blog.csdn.net/u012408797/article/details/120490201\">https://blog.csdn.net/u012408797/article/details/120490201</a><br>【3】<a href=\"https://zhuanlan.zhihu.com/p/401188789\">https://zhuanlan.zhihu.com/p/401188789</a><br>【4】<a href=\"https://blog.csdn.net/cjmqas/article/details/79296865\">https://blog.csdn.net/cjmqas/article/details/79296865</a></p>\n","site":{"data":{}},"length":791,"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>说是 VSC 的开发环境配置，其实是 Windows 下 C/C++ 的环境配置指南。</p>\n<p>无论是在 Linux 还是 OSX 上，配置 C/C++ 的环境很大程度上都是一行命令能解决的事。而在 Windows 上情况就变得相当复杂了起来。<br>移植到 Windows 平台的编译器种类繁多：MinGW、MinGW-w64、MSYS/2、Cygwin 等，光是厘清<a href=\"https://blog.csdn.net/u012408797/article/details/120490201\">这些编译器的区别</a>就足够让人头大了。<br>但如今 <a href=\"https://winlibs.com/\">WinLibs</a> 的出现应该能更好的解决配置 C/C++ 环境的问题。</p>\n<h1 id=\"编译器解决方案-——-WinLibs\"><a href=\"#编译器解决方案-——-WinLibs\" class=\"headerlink\" title=\"编译器解决方案 —— WinLibs\"></a>编译器解决方案 —— WinLibs</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>官网上是这样描述的：*”In short: it’s a free C and C++ compiler for Microsoft Windows.”*<br>实际上也确实如此，不过 WinLibs 不仅仅包含（最新的）GCC，它还涵盖了：LLVM 前端（Clang）、LLDB 调试器与 MinGW-w64 环境。</p>\n<p>不可否认，WinLibs 作为一款完备的 C/C++ 开发环境是完全可行的。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>移步至官网的<a href=\"https://winlibs.com/#download-release\">下载页面</a>或直接点击这个<a href=\"https://github.com/brechtsanders/winlibs_mingw/releases/download/12.1.0-14.0.4-10.0.0-ucrt-r2/winlibs-i686-posix-dwarf-gcc-12.1.0-llvm-14.0.4-mingw-w64ucrt-10.0.0-r2.7z\">链接</a>（本文发布时为最新版）</p>\n<h3 id=\"UCRT-与-MSVCRT-版本的区别\"><a href=\"#UCRT-与-MSVCRT-版本的区别\" class=\"headerlink\" title=\"UCRT 与 MSVCRT 版本的区别\"></a>UCRT 与 MSVCRT 版本的区别</h3><blockquote>\n<p>传统上，MinGW-w64编译器使用MSVCRT作为运行时库，它在所有版本的Windows中都可用。<br>自Windows 10开始，Universal C Runtime (UCRT)可作为MSVCRT的替代品。Universal C Runtime也可以安装在早期版本的Windows上（见：Windows中Universal C Runtime的更新）。<br>除非你的目标是旧版本的Windows，否则UCRT作为运行时库是更好的选择，因为它的编写是为了更好地支持最近的Windows版本，以及提供更好的标准一致性。</p>\n</blockquote>\n<p>也就是说，UCRT 是 “更新的标准”，理应优先采用。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>将下载的压缩包解压后，得到如下文件<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/compress_bag.png\" alt=\"cb\"></p>\n</li>\n<li><p>将整个文件夹移动至合适位置<br>由于 WinLibs 采用了压缩包来发布，所以不需要进行传统的安装操作。把文件放置到合适位置即可。<br>比如我就将其放置到 <code>D:\\Program Files\\</code> 下，完整路径为：<code>D:\\Program Files\\mingw64</code>。</p>\n</li>\n<li><p>添加路径至 path 变量<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/path_settings.png\" alt=\"ps\"><br>添加完整路径到 path 变量下。</p>\n</li>\n<li><p>[OPTIONAL] 测试 path 变量是否正确<br>打开 cmd，输入</p>\n</li>\n</ol>\n  <figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc --version</span><br><span class=\"line\">g++ --version</span><br><span class=\"line\">clang --version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/version_test.png\" alt=\"vt\"><br>  如图所示即为正常。</p>\n<h1 id=\"Visual-Studio-Code-设置\"><a href=\"#Visual-Studio-Code-设置\" class=\"headerlink\" title=\"Visual Studio Code 设置\"></a>Visual Studio Code 设置</h1><ol>\n<li><p>安装 CodeRunner 插件<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/install_cr.png\" alt=\"i_cr\"></p>\n</li>\n<li><p>进行插件配置</p>\n</li>\n</ol>\n<ul>\n<li><p>开启可交互的终端<br>按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；<br>然后按下图配置将 <code>Run In Terminal</code> 选项勾选上；<br><img src=\"/2022/05/17/Visual-Studio-Code-C-C-%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/extension_settings.png\" alt=\"es\"></p>\n</li>\n<li><p>选择 GCC / Clang 编译器<br>按 <kbd>ctrl</kbd> + <kbd>,</kbd> 进入 VSC 设置；<br>点击右上角按钮，进入 json 编辑界面；<br>按如下格式修改 <code>code-runner.executorMap</code> 的内容。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;code-runner.executorMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;javascript&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;c&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; &#123;你想要的编译器名称&#125; $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;cpp&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; &#123;你想要的编译器名称&#125; $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;objective-c&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<ol start=\"3\">\n<li>完成配置</li>\n</ol>\n<p>  之后在右键菜单/<kbd>ctrl</kbd> + <kbd>alt</kbd> + <kbd>n</kbd> 都可以直接编译运行 C/C++ 程序并与之交互了。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】<a href=\"https://blog.csdn.net/lzyws739307453/article/details/89823900\">https://blog.csdn.net/lzyws739307453/article/details/89823900</a><br>【2】<a href=\"https://blog.csdn.net/u012408797/article/details/120490201\">https://blog.csdn.net/u012408797/article/details/120490201</a><br>【3】<a href=\"https://zhuanlan.zhihu.com/p/401188789\">https://zhuanlan.zhihu.com/p/401188789</a><br>【4】<a href=\"https://blog.csdn.net/cjmqas/article/details/79296865\">https://blog.csdn.net/cjmqas/article/details/79296865</a></p>\n"},{"title":"Windows Terminal 优化指北","date":"2022-06-25T14:48:03.000Z","_content":"\n# 历史\n\n[Windows Terminal](https://github.com/microsoft/terminal) 在 3 年前的 [Build 2019 大会](<https://zh.wikipedia.org/wiki/Build_(%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A)#Build_2019>) 上横空出世。其优秀的 Fluent Design 设计语言、引入的项目栏、高级的字符渲染机制以及崭新的多 Profile 设置使其成为了 Windows 自带 PowerShell 的最佳替代品。\n\n![windows_terminal](Windows_Terminal_v1.0.png)\n\n> Windows Terminal v1.0 --图源 Wikipedia\n\n# 基础优化\n\n尽管上述特性使得 Windows Terminal 具有得天独厚的优势，但其内光秃秃的 PowerShell 依然是日常使用者的痛点。\n以下就针对 PowerShell 亟需着手修改的地方进行分享。\n\n## 改变 Windows Terminal 自带字体\n\n字体的修改不仅仅是为了看的舒服，某些字体内置（☞[Nerd Fonts](https://github.com/ryanoasis/nerd-fonts)）的图标与特殊符号会与后期 PowerShell 的主题配合的很好。（如 Git 状态、电池图标、文件夹之类）\n所以选定合适的字体是**必要的**。\n\nTerminal 自带的字体是 “Caskaydia Cove”，观感不错。同时它也在 [Nerd Fonts](https://github.com/ryanoasis/nerd-fonts) 列表里，所以应该支持各种各样的图标+连字效果。\n\n我个人更加偏好基于 JetBrains Mono 修改的版本，可以在[这里](https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip)下载。\n或者也可以移步至 Nerd Fonts Release [页面](https://github.com/ryanoasis/nerd-fonts/releases)下载你喜欢的字体。\n\n## 升级原有的 PowerShell\n\n在我的 Windows 11 Pro 22H2 上，PowerShell 的版本为：\n\n![ps_ver](ori_ps_ver.png)\n\n> PSVersion 5.1.22621.1\n\n建议还是升级到目前最新的 [PowerShell](https://github.com/PowerShell/PowerShell/releases) （预览版）\n\n![new_ps](new_ps.png)\n\n64 位的选择红色框内的下载，32 位的选择绿色框内的下载即可。\n\n如无法访问，也可以在[这里](https://nekorectifier.lanzouw.com/itFiQ06yir6h)下载。\n\n在完成新版 PowerShell 的安装以后，我们就进入到下一步：\n\n## PowerShell 配置文件修改\n\nWindows Terminal 会将安装自带的 PowerShell 设置为“默认配置”，我们需要手动修改其 json 格式的配置文件来解决这一问题。\n\n推荐使用 VSC、Notepad++ 等编辑器，尽量避免使用自带的记事本（不好用\n\n### 步骤\n\n- 在 Windows Terminal 中按下 <kbd>ctrl</kbd> + <kbd>,</kbd>，打开设置界面。\n\n- 在设置界面按左下的“设置”按钮，打开 json 配置文件的编辑页面。\n  ![wt_settings](wt_settings.png)\n\n- 在其中找到 `profiles` 项， 并在 `profiles` 项内的 `list` 数组中添加以下内容：\n  ```json\n  {\n    \"colorScheme\": \"One Half Dark\", //主题设置\n    \"commandline\": \"{ 替换为你自己的 pwsh.exe 路径 } --nologo\", //启动命令行设置，填入可执行文件路径即可\n    \"experimental.retroTerminalEffect\": false, // 终端复古风格--关闭\n    \"experimental.useAtlasEngine\": true, // 启用实验性文本渲染引擎--开启\n    \"font\": { // 字体设置\n      \"face\": \"JetBrainsMono Nerd Font Mono\", // 字体名称\n      \"size\": 12 // 字体大小\n    },\n    \"guid\": \"{7a9f583e-9bb1-43e2-92f0-86905a28c370}\", // 独有的uuid编号\n    \"hidden\": false, // 配置文件是否隐藏--否\n    \"icon\": \"D:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\assets\\\\Powershell_av_colors.ico\", // 配置文件的图标 （可在 pwsh 安装目录找到）\n    \"name\": \"PowerShell 7.3.0 Preview\", // 配置文件名称\n    \"opacity\": 35, // 终端背景透明度\n    \"useAcrylic\": true // 终端启用亚克力效果--是\n  }\n  ```\n  > **根据配置文件来添加其前后 \",\"**\n\n- 接着需要将刚刚添加的配置文件设为默认。找到 `defaultProfile` 项并将其设为：\n\n  ```json\n  \"defaultProfile\": \"{7a9f583e-9bb1-43e2-92f0-86905a28c370}\"\n  ```\n\n# 功能增强\n\n基本的 Windows Terminal 配置已经完成，接下来的是对 PowerShell 的处理。\n\n##  Oh-My-Posh\n\n美化当然是必要的，哪个男孩子不会喜欢~~花花绿绿~~的终端主题呢？\n\n### 安装\n\n根据 [Oh-My-Posh官网](https://ohmyposh.dev/docs/installation/windows) 的指南，在 Windows 上推荐使用 [winget](https://www.microsoft.com/p/app-installer/9nblggh4nns1#activetab=pivot:overviewtab) 进行安装。\n只需在 PowerShell 输入 `winget install JanDeDobbeleer.OhMyPosh -s winget` 就能完成安装。\n\n如果你的电脑不能安装 winget，则还有以下两种方法可供选择：\n\n- 使用 “scoop”：\n  ```powershell\n  scoop install https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/oh-my-posh.json\n  ```\n\n- 手动下载：\n  ```powershell\n  Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))\n  ```\n\n### 设置主题\n\n- 先在 PowerShell 中执行 `Get-PoshThemes`，在给出的主题中选一个记住名字。\n\n  ![posh_theme](posh_theme.png)\n\n- 在 PowerShell 中运行 `New-Item -Path $PROFILE -Type File -Force`\n\n  > **注意：** 这会使得你原有的 PowerShell 启动配置丢失。\n  如果你先前配置过，直接跳到下一步即可。\n\n- 运行 `notepad $PROFILE` 进行编辑。\n  添加以下内容\n  ```powershell\n    oh-my-posh init pwsh --config ~/.{ 你想要的主题名称 }.omp.json | Invoke-Expression\n  ```\n\n  如有杀毒软件拦截，则使用这个\n  ```powershell\n  & ([ScriptBlock]::Create((oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\{ 你想要的主题名称 }.omp.json\" --print) -join \"`n\"))\n  ```\n\n- 最后再执行 `. $profile`，主题就应用好了。\n\n## 插件\n\n### PSReadline\n\n- 执行 `Install-Module PSReadLine  -Scope CurrentUser`。\n  在安装时可能会提示“是否继续”，按 Y/A 同意即可。\n\n- 并在 `$profile` 文件中添加新的一行： `Import-Module PSReadLine`\n\n### Posh-git\n\n- 执行 `Install-Module posh-git -Scope CurrentUser -Force`\n\n- 同样地添加 `Import-Module posh-git` 到 `$profile`\n\n## 历史回溯功能\n\n在 `$profile` 文件中添加：\n```powershell\n# 设置预测文本来源为历史记录\nSet-PSReadLineOption -PredictionSource History\n\n# 每次回溯输入历史，光标定位于输入内容末尾\nSet-PSReadLineOption -HistorySearchCursorMovesToEnd\n```\n\n## 快捷键设置\n\n同样在 `$profile` 中：\n```powershell\n# 设置 Tab 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Tab\" -Function MenuComplete\n\n# 设置 Ctrl+d 为退出 PowerShell\nSet-PSReadlineKeyHandler -Key \"Ctrl+d\" -Function ViExit\n\n# 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo\n\n# 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward\n\n# 设置向下键为前向搜索历史纪录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward\n```\n\n# 结语\n\n到此 Windows Terminal / PowerShell 的优化就差不多了，基本上终端该有的功能一个都不差。\n\n![ps_finish](ps_finish.png)\n\n# 参考链接\n\n【1】https://zh.wikipedia.org/wiki/Windows_Terminal\n【2】https://zhuanlan.zhihu.com/p/137595941\n【3】https://ohmyposh.dev/docs/installation/windows\n","source":"_posts/Windows-Terminal-优化指北.md","raw":"---\ntitle: Windows Terminal 优化指北\ndate: 2022-06-25 22:48:03\ntags:\n  - Windows\n  - 美化\n---\n\n# 历史\n\n[Windows Terminal](https://github.com/microsoft/terminal) 在 3 年前的 [Build 2019 大会](<https://zh.wikipedia.org/wiki/Build_(%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A)#Build_2019>) 上横空出世。其优秀的 Fluent Design 设计语言、引入的项目栏、高级的字符渲染机制以及崭新的多 Profile 设置使其成为了 Windows 自带 PowerShell 的最佳替代品。\n\n![windows_terminal](Windows_Terminal_v1.0.png)\n\n> Windows Terminal v1.0 --图源 Wikipedia\n\n# 基础优化\n\n尽管上述特性使得 Windows Terminal 具有得天独厚的优势，但其内光秃秃的 PowerShell 依然是日常使用者的痛点。\n以下就针对 PowerShell 亟需着手修改的地方进行分享。\n\n## 改变 Windows Terminal 自带字体\n\n字体的修改不仅仅是为了看的舒服，某些字体内置（☞[Nerd Fonts](https://github.com/ryanoasis/nerd-fonts)）的图标与特殊符号会与后期 PowerShell 的主题配合的很好。（如 Git 状态、电池图标、文件夹之类）\n所以选定合适的字体是**必要的**。\n\nTerminal 自带的字体是 “Caskaydia Cove”，观感不错。同时它也在 [Nerd Fonts](https://github.com/ryanoasis/nerd-fonts) 列表里，所以应该支持各种各样的图标+连字效果。\n\n我个人更加偏好基于 JetBrains Mono 修改的版本，可以在[这里](https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip)下载。\n或者也可以移步至 Nerd Fonts Release [页面](https://github.com/ryanoasis/nerd-fonts/releases)下载你喜欢的字体。\n\n## 升级原有的 PowerShell\n\n在我的 Windows 11 Pro 22H2 上，PowerShell 的版本为：\n\n![ps_ver](ori_ps_ver.png)\n\n> PSVersion 5.1.22621.1\n\n建议还是升级到目前最新的 [PowerShell](https://github.com/PowerShell/PowerShell/releases) （预览版）\n\n![new_ps](new_ps.png)\n\n64 位的选择红色框内的下载，32 位的选择绿色框内的下载即可。\n\n如无法访问，也可以在[这里](https://nekorectifier.lanzouw.com/itFiQ06yir6h)下载。\n\n在完成新版 PowerShell 的安装以后，我们就进入到下一步：\n\n## PowerShell 配置文件修改\n\nWindows Terminal 会将安装自带的 PowerShell 设置为“默认配置”，我们需要手动修改其 json 格式的配置文件来解决这一问题。\n\n推荐使用 VSC、Notepad++ 等编辑器，尽量避免使用自带的记事本（不好用\n\n### 步骤\n\n- 在 Windows Terminal 中按下 <kbd>ctrl</kbd> + <kbd>,</kbd>，打开设置界面。\n\n- 在设置界面按左下的“设置”按钮，打开 json 配置文件的编辑页面。\n  ![wt_settings](wt_settings.png)\n\n- 在其中找到 `profiles` 项， 并在 `profiles` 项内的 `list` 数组中添加以下内容：\n  ```json\n  {\n    \"colorScheme\": \"One Half Dark\", //主题设置\n    \"commandline\": \"{ 替换为你自己的 pwsh.exe 路径 } --nologo\", //启动命令行设置，填入可执行文件路径即可\n    \"experimental.retroTerminalEffect\": false, // 终端复古风格--关闭\n    \"experimental.useAtlasEngine\": true, // 启用实验性文本渲染引擎--开启\n    \"font\": { // 字体设置\n      \"face\": \"JetBrainsMono Nerd Font Mono\", // 字体名称\n      \"size\": 12 // 字体大小\n    },\n    \"guid\": \"{7a9f583e-9bb1-43e2-92f0-86905a28c370}\", // 独有的uuid编号\n    \"hidden\": false, // 配置文件是否隐藏--否\n    \"icon\": \"D:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\assets\\\\Powershell_av_colors.ico\", // 配置文件的图标 （可在 pwsh 安装目录找到）\n    \"name\": \"PowerShell 7.3.0 Preview\", // 配置文件名称\n    \"opacity\": 35, // 终端背景透明度\n    \"useAcrylic\": true // 终端启用亚克力效果--是\n  }\n  ```\n  > **根据配置文件来添加其前后 \",\"**\n\n- 接着需要将刚刚添加的配置文件设为默认。找到 `defaultProfile` 项并将其设为：\n\n  ```json\n  \"defaultProfile\": \"{7a9f583e-9bb1-43e2-92f0-86905a28c370}\"\n  ```\n\n# 功能增强\n\n基本的 Windows Terminal 配置已经完成，接下来的是对 PowerShell 的处理。\n\n##  Oh-My-Posh\n\n美化当然是必要的，哪个男孩子不会喜欢~~花花绿绿~~的终端主题呢？\n\n### 安装\n\n根据 [Oh-My-Posh官网](https://ohmyposh.dev/docs/installation/windows) 的指南，在 Windows 上推荐使用 [winget](https://www.microsoft.com/p/app-installer/9nblggh4nns1#activetab=pivot:overviewtab) 进行安装。\n只需在 PowerShell 输入 `winget install JanDeDobbeleer.OhMyPosh -s winget` 就能完成安装。\n\n如果你的电脑不能安装 winget，则还有以下两种方法可供选择：\n\n- 使用 “scoop”：\n  ```powershell\n  scoop install https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/oh-my-posh.json\n  ```\n\n- 手动下载：\n  ```powershell\n  Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://ohmyposh.dev/install.ps1'))\n  ```\n\n### 设置主题\n\n- 先在 PowerShell 中执行 `Get-PoshThemes`，在给出的主题中选一个记住名字。\n\n  ![posh_theme](posh_theme.png)\n\n- 在 PowerShell 中运行 `New-Item -Path $PROFILE -Type File -Force`\n\n  > **注意：** 这会使得你原有的 PowerShell 启动配置丢失。\n  如果你先前配置过，直接跳到下一步即可。\n\n- 运行 `notepad $PROFILE` 进行编辑。\n  添加以下内容\n  ```powershell\n    oh-my-posh init pwsh --config ~/.{ 你想要的主题名称 }.omp.json | Invoke-Expression\n  ```\n\n  如有杀毒软件拦截，则使用这个\n  ```powershell\n  & ([ScriptBlock]::Create((oh-my-posh init pwsh --config \"$env:POSH_THEMES_PATH\\{ 你想要的主题名称 }.omp.json\" --print) -join \"`n\"))\n  ```\n\n- 最后再执行 `. $profile`，主题就应用好了。\n\n## 插件\n\n### PSReadline\n\n- 执行 `Install-Module PSReadLine  -Scope CurrentUser`。\n  在安装时可能会提示“是否继续”，按 Y/A 同意即可。\n\n- 并在 `$profile` 文件中添加新的一行： `Import-Module PSReadLine`\n\n### Posh-git\n\n- 执行 `Install-Module posh-git -Scope CurrentUser -Force`\n\n- 同样地添加 `Import-Module posh-git` 到 `$profile`\n\n## 历史回溯功能\n\n在 `$profile` 文件中添加：\n```powershell\n# 设置预测文本来源为历史记录\nSet-PSReadLineOption -PredictionSource History\n\n# 每次回溯输入历史，光标定位于输入内容末尾\nSet-PSReadLineOption -HistorySearchCursorMovesToEnd\n```\n\n## 快捷键设置\n\n同样在 `$profile` 中：\n```powershell\n# 设置 Tab 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Tab\" -Function MenuComplete\n\n# 设置 Ctrl+d 为退出 PowerShell\nSet-PSReadlineKeyHandler -Key \"Ctrl+d\" -Function ViExit\n\n# 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo\n\n# 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward\n\n# 设置向下键为前向搜索历史纪录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward\n```\n\n# 结语\n\n到此 Windows Terminal / PowerShell 的优化就差不多了，基本上终端该有的功能一个都不差。\n\n![ps_finish](ps_finish.png)\n\n# 参考链接\n\n【1】https://zh.wikipedia.org/wiki/Windows_Terminal\n【2】https://zhuanlan.zhihu.com/p/137595941\n【3】https://ohmyposh.dev/docs/installation/windows\n","slug":"Windows-Terminal-优化指北","published":1,"updated":"2023-08-05T06:14:33.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuw000m2qbh5uet5oz4","content":"<h1 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h1><p><a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a> 在 3 年前的 <a href=\"https://zh.wikipedia.org/wiki/Build_(%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A)#Build_2019\">Build 2019 大会</a> 上横空出世。其优秀的 Fluent Design 设计语言、引入的项目栏、高级的字符渲染机制以及崭新的多 Profile 设置使其成为了 Windows 自带 PowerShell 的最佳替代品。</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/Windows_Terminal_v1.0.png\" alt=\"windows_terminal\"></p>\n<blockquote>\n<p>Windows Terminal v1.0 –图源 Wikipedia</p>\n</blockquote>\n<h1 id=\"基础优化\"><a href=\"#基础优化\" class=\"headerlink\" title=\"基础优化\"></a>基础优化</h1><p>尽管上述特性使得 Windows Terminal 具有得天独厚的优势，但其内光秃秃的 PowerShell 依然是日常使用者的痛点。<br>以下就针对 PowerShell 亟需着手修改的地方进行分享。</p>\n<h2 id=\"改变-Windows-Terminal-自带字体\"><a href=\"#改变-Windows-Terminal-自带字体\" class=\"headerlink\" title=\"改变 Windows Terminal 自带字体\"></a>改变 Windows Terminal 自带字体</h2><p>字体的修改不仅仅是为了看的舒服，某些字体内置（☞<a href=\"https://github.com/ryanoasis/nerd-fonts\">Nerd Fonts</a>）的图标与特殊符号会与后期 PowerShell 的主题配合的很好。（如 Git 状态、电池图标、文件夹之类）<br>所以选定合适的字体是<strong>必要的</strong>。</p>\n<p>Terminal 自带的字体是 “Caskaydia Cove”，观感不错。同时它也在 <a href=\"https://github.com/ryanoasis/nerd-fonts\">Nerd Fonts</a> 列表里，所以应该支持各种各样的图标+连字效果。</p>\n<p>我个人更加偏好基于 JetBrains Mono 修改的版本，可以在<a href=\"https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip\">这里</a>下载。<br>或者也可以移步至 Nerd Fonts Release <a href=\"https://github.com/ryanoasis/nerd-fonts/releases\">页面</a>下载你喜欢的字体。</p>\n<h2 id=\"升级原有的-PowerShell\"><a href=\"#升级原有的-PowerShell\" class=\"headerlink\" title=\"升级原有的 PowerShell\"></a>升级原有的 PowerShell</h2><p>在我的 Windows 11 Pro 22H2 上，PowerShell 的版本为：</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/ori_ps_ver.png\" alt=\"ps_ver\"></p>\n<blockquote>\n<p>PSVersion 5.1.22621.1</p>\n</blockquote>\n<p>建议还是升级到目前最新的 <a href=\"https://github.com/PowerShell/PowerShell/releases\">PowerShell</a> （预览版）</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/new_ps.png\" alt=\"new_ps\"></p>\n<p>64 位的选择红色框内的下载，32 位的选择绿色框内的下载即可。</p>\n<p>如无法访问，也可以在<a href=\"https://nekorectifier.lanzouw.com/itFiQ06yir6h\">这里</a>下载。</p>\n<p>在完成新版 PowerShell 的安装以后，我们就进入到下一步：</p>\n<h2 id=\"PowerShell-配置文件修改\"><a href=\"#PowerShell-配置文件修改\" class=\"headerlink\" title=\"PowerShell 配置文件修改\"></a>PowerShell 配置文件修改</h2><p>Windows Terminal 会将安装自带的 PowerShell 设置为“默认配置”，我们需要手动修改其 json 格式的配置文件来解决这一问题。</p>\n<p>推荐使用 VSC、Notepad++ 等编辑器，尽量避免使用自带的记事本（不好用</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>在 Windows Terminal 中按下 <kbd>ctrl</kbd> + <kbd>,</kbd>，打开设置界面。</p>\n</li>\n<li><p>在设置界面按左下的“设置”按钮，打开 json 配置文件的编辑页面。<br><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/wt_settings.png\" alt=\"wt_settings\"></p>\n</li>\n<li><p>在其中找到 <code>profiles</code> 项， 并在 <code>profiles</code> 项内的 <code>list</code> 数组中添加以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;colorScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;One Half Dark&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//主题设置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commandline&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123; 替换为你自己的 pwsh.exe 路径 &#125; --nologo&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//启动命令行设置，填入可执行文件路径即可</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;experimental.retroTerminalEffect&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 终端复古风格--关闭</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;experimental.useAtlasEngine&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 启用实验性文本渲染引擎--开启</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;font&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 字体设置</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;face&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JetBrainsMono Nerd Font Mono&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字体名称</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">12</span> <span class=\"comment\">// 字体大小</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;guid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123;7a9f583e-9bb1-43e2-92f0-86905a28c370&#125;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 独有的uuid编号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;hidden&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 配置文件是否隐藏--否</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;D:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\assets\\\\Powershell_av_colors.ico&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 配置文件的图标 （可在 pwsh 安装目录找到）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;PowerShell 7.3.0 Preview&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 配置文件名称</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;opacity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">35</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 终端背景透明度</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;useAcrylic&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> <span class=\"comment\">// 终端启用亚克力效果--是</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>根据配置文件来添加其前后 “,”</strong></p>\n</blockquote>\n</li>\n<li><p>接着需要将刚刚添加的配置文件设为默认。找到 <code>defaultProfile</code> 项并将其设为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;defaultProfile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123;7a9f583e-9bb1-43e2-92f0-86905a28c370&#125;&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"功能增强\"><a href=\"#功能增强\" class=\"headerlink\" title=\"功能增强\"></a>功能增强</h1><p>基本的 Windows Terminal 配置已经完成，接下来的是对 PowerShell 的处理。</p>\n<h2 id=\"Oh-My-Posh\"><a href=\"#Oh-My-Posh\" class=\"headerlink\" title=\"Oh-My-Posh\"></a>Oh-My-Posh</h2><p>美化当然是必要的，哪个男孩子不会喜欢<del>花花绿绿</del>的终端主题呢？</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>根据 <a href=\"https://ohmyposh.dev/docs/installation/windows\">Oh-My-Posh官网</a> 的指南，在 Windows 上推荐使用 <a href=\"https://www.microsoft.com/p/app-installer/9nblggh4nns1#activetab=pivot:overviewtab\">winget</a> 进行安装。<br>只需在 PowerShell 输入 <code>winget install JanDeDobbeleer.OhMyPosh -s winget</code> 就能完成安装。</p>\n<p>如果你的电脑不能安装 winget，则还有以下两种方法可供选择：</p>\n<ul>\n<li><p>使用 “scoop”：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install https://github.com/JanDeDobbeleer/<span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span>/releases/latest/download/<span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span>.json</span><br></pre></td></tr></table></figure></li>\n<li><p>手动下载：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> Bypass <span class=\"literal\">-Scope</span> <span class=\"keyword\">Process</span> <span class=\"literal\">-Force</span>; <span class=\"built_in\">Invoke-Expression</span> ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">&#x27;https://ohmyposh.dev/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h3><ul>\n<li><p>先在 PowerShell 中执行 <code>Get-PoshThemes</code>，在给出的主题中选一个记住名字。</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/posh_theme.png\" alt=\"posh_theme\"></p>\n</li>\n<li><p>在 PowerShell 中运行 <code>New-Item -Path $PROFILE -Type File -Force</code></p>\n<blockquote>\n<p><strong>注意：</strong> 这会使得你原有的 PowerShell 启动配置丢失。<br>如果你先前配置过，直接跳到下一步即可。</p>\n</blockquote>\n</li>\n<li><p>运行 <code>notepad $PROFILE</code> 进行编辑。<br>添加以下内容</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span> init pwsh <span class=\"literal\">--config</span> ~/.&#123; 你想要的主题名称 &#125;.omp.json | <span class=\"built_in\">Invoke-Expression</span></span><br></pre></td></tr></table></figure>\n\n<p>如有杀毒软件拦截，则使用这个</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; ([<span class=\"type\">ScriptBlock</span>]::Create((<span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span> init pwsh <span class=\"literal\">--config</span> <span class=\"string\">&quot;<span class=\"variable\">$env:POSH_THEMES_PATH</span>\\&#123; 你想要的主题名称 &#125;.omp.json&quot;</span> <span class=\"literal\">--print</span>) <span class=\"operator\">-join</span> <span class=\"string\">&quot;`n&quot;</span>))</span><br></pre></td></tr></table></figure></li>\n<li><p>最后再执行 <code>. $profile</code>，主题就应用好了。</p>\n</li>\n</ul>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"PSReadline\"><a href=\"#PSReadline\" class=\"headerlink\" title=\"PSReadline\"></a>PSReadline</h3><ul>\n<li><p>执行 <code>Install-Module PSReadLine  -Scope CurrentUser</code>。<br>在安装时可能会提示“是否继续”，按 Y/A 同意即可。</p>\n</li>\n<li><p>并在 <code>$profile</code> 文件中添加新的一行： <code>Import-Module PSReadLine</code></p>\n</li>\n</ul>\n<h3 id=\"Posh-git\"><a href=\"#Posh-git\" class=\"headerlink\" title=\"Posh-git\"></a>Posh-git</h3><ul>\n<li><p>执行 <code>Install-Module posh-git -Scope CurrentUser -Force</code></p>\n</li>\n<li><p>同样地添加 <code>Import-Module posh-git</code> 到 <code>$profile</code></p>\n</li>\n</ul>\n<h2 id=\"历史回溯功能\"><a href=\"#历史回溯功能\" class=\"headerlink\" title=\"历史回溯功能\"></a>历史回溯功能</h2><p>在 <code>$profile</code> 文件中添加：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置预测文本来源为历史记录</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineOption</span> <span class=\"literal\">-PredictionSource</span> <span class=\"built_in\">History</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每次回溯输入历史，光标定位于输入内容末尾</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineOption</span> <span class=\"literal\">-HistorySearchCursorMovesToEnd</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快捷键设置\"><a href=\"#快捷键设置\" class=\"headerlink\" title=\"快捷键设置\"></a>快捷键设置</h2><p>同样在 <code>$profile</code> 中：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置 Tab 为菜单补全和 Intellisense</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> <span class=\"string\">&quot;Tab&quot;</span> <span class=\"literal\">-Function</span> MenuComplete</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadlineKeyHandler</span> <span class=\"literal\">-Key</span> <span class=\"string\">&quot;Ctrl+d&quot;</span> <span class=\"literal\">-Function</span> ViExit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 Ctrl+z 为撤销</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> <span class=\"string\">&quot;Ctrl+z&quot;</span> <span class=\"literal\">-Function</span> Undo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置向上键为后向搜索历史记录</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> UpArrow <span class=\"literal\">-Function</span> HistorySearchBackward</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置向下键为前向搜索历史纪录</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> DownArrow <span class=\"literal\">-Function</span> HistorySearchForward</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>到此 Windows Terminal / PowerShell 的优化就差不多了，基本上终端该有的功能一个都不差。</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/ps_finish.png\" alt=\"ps_finish\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】<a href=\"https://zh.wikipedia.org/wiki/Windows_Terminal\">https://zh.wikipedia.org/wiki/Windows_Terminal</a><br>【2】<a href=\"https://zhuanlan.zhihu.com/p/137595941\">https://zhuanlan.zhihu.com/p/137595941</a><br>【3】<a href=\"https://ohmyposh.dev/docs/installation/windows\">https://ohmyposh.dev/docs/installation/windows</a></p>\n","site":{"data":{}},"length":1324,"excerpt":"","more":"<h1 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h1><p><a href=\"https://github.com/microsoft/terminal\">Windows Terminal</a> 在 3 年前的 <a href=\"https://zh.wikipedia.org/wiki/Build_(%E5%BC%80%E5%8F%91%E8%80%85%E5%A4%A7%E4%BC%9A)#Build_2019\">Build 2019 大会</a> 上横空出世。其优秀的 Fluent Design 设计语言、引入的项目栏、高级的字符渲染机制以及崭新的多 Profile 设置使其成为了 Windows 自带 PowerShell 的最佳替代品。</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/Windows_Terminal_v1.0.png\" alt=\"windows_terminal\"></p>\n<blockquote>\n<p>Windows Terminal v1.0 –图源 Wikipedia</p>\n</blockquote>\n<h1 id=\"基础优化\"><a href=\"#基础优化\" class=\"headerlink\" title=\"基础优化\"></a>基础优化</h1><p>尽管上述特性使得 Windows Terminal 具有得天独厚的优势，但其内光秃秃的 PowerShell 依然是日常使用者的痛点。<br>以下就针对 PowerShell 亟需着手修改的地方进行分享。</p>\n<h2 id=\"改变-Windows-Terminal-自带字体\"><a href=\"#改变-Windows-Terminal-自带字体\" class=\"headerlink\" title=\"改变 Windows Terminal 自带字体\"></a>改变 Windows Terminal 自带字体</h2><p>字体的修改不仅仅是为了看的舒服，某些字体内置（☞<a href=\"https://github.com/ryanoasis/nerd-fonts\">Nerd Fonts</a>）的图标与特殊符号会与后期 PowerShell 的主题配合的很好。（如 Git 状态、电池图标、文件夹之类）<br>所以选定合适的字体是<strong>必要的</strong>。</p>\n<p>Terminal 自带的字体是 “Caskaydia Cove”，观感不错。同时它也在 <a href=\"https://github.com/ryanoasis/nerd-fonts\">Nerd Fonts</a> 列表里，所以应该支持各种各样的图标+连字效果。</p>\n<p>我个人更加偏好基于 JetBrains Mono 修改的版本，可以在<a href=\"https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip\">这里</a>下载。<br>或者也可以移步至 Nerd Fonts Release <a href=\"https://github.com/ryanoasis/nerd-fonts/releases\">页面</a>下载你喜欢的字体。</p>\n<h2 id=\"升级原有的-PowerShell\"><a href=\"#升级原有的-PowerShell\" class=\"headerlink\" title=\"升级原有的 PowerShell\"></a>升级原有的 PowerShell</h2><p>在我的 Windows 11 Pro 22H2 上，PowerShell 的版本为：</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/ori_ps_ver.png\" alt=\"ps_ver\"></p>\n<blockquote>\n<p>PSVersion 5.1.22621.1</p>\n</blockquote>\n<p>建议还是升级到目前最新的 <a href=\"https://github.com/PowerShell/PowerShell/releases\">PowerShell</a> （预览版）</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/new_ps.png\" alt=\"new_ps\"></p>\n<p>64 位的选择红色框内的下载，32 位的选择绿色框内的下载即可。</p>\n<p>如无法访问，也可以在<a href=\"https://nekorectifier.lanzouw.com/itFiQ06yir6h\">这里</a>下载。</p>\n<p>在完成新版 PowerShell 的安装以后，我们就进入到下一步：</p>\n<h2 id=\"PowerShell-配置文件修改\"><a href=\"#PowerShell-配置文件修改\" class=\"headerlink\" title=\"PowerShell 配置文件修改\"></a>PowerShell 配置文件修改</h2><p>Windows Terminal 会将安装自带的 PowerShell 设置为“默认配置”，我们需要手动修改其 json 格式的配置文件来解决这一问题。</p>\n<p>推荐使用 VSC、Notepad++ 等编辑器，尽量避免使用自带的记事本（不好用</p>\n<h3 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h3><ul>\n<li><p>在 Windows Terminal 中按下 <kbd>ctrl</kbd> + <kbd>,</kbd>，打开设置界面。</p>\n</li>\n<li><p>在设置界面按左下的“设置”按钮，打开 json 配置文件的编辑页面。<br><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/wt_settings.png\" alt=\"wt_settings\"></p>\n</li>\n<li><p>在其中找到 <code>profiles</code> 项， 并在 <code>profiles</code> 项内的 <code>list</code> 数组中添加以下内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;colorScheme&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;One Half Dark&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//主题设置</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;commandline&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123; 替换为你自己的 pwsh.exe 路径 &#125; --nologo&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//启动命令行设置，填入可执行文件路径即可</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;experimental.retroTerminalEffect&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 终端复古风格--关闭</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;experimental.useAtlasEngine&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 启用实验性文本渲染引擎--开启</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;font&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span> <span class=\"comment\">// 字体设置</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;face&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JetBrainsMono Nerd Font Mono&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 字体名称</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;size&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">12</span> <span class=\"comment\">// 字体大小</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;guid&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123;7a9f583e-9bb1-43e2-92f0-86905a28c370&#125;&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 独有的uuid编号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;hidden&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">// 配置文件是否隐藏--否</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;icon&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;D:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\assets\\\\Powershell_av_colors.ico&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 配置文件的图标 （可在 pwsh 安装目录找到）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;PowerShell 7.3.0 Preview&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 配置文件名称</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;opacity&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">35</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 终端背景透明度</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;useAcrylic&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span> <span class=\"comment\">// 终端启用亚克力效果--是</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>根据配置文件来添加其前后 “,”</strong></p>\n</blockquote>\n</li>\n<li><p>接着需要将刚刚添加的配置文件设为默认。找到 <code>defaultProfile</code> 项并将其设为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;defaultProfile&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123;7a9f583e-9bb1-43e2-92f0-86905a28c370&#125;&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"功能增强\"><a href=\"#功能增强\" class=\"headerlink\" title=\"功能增强\"></a>功能增强</h1><p>基本的 Windows Terminal 配置已经完成，接下来的是对 PowerShell 的处理。</p>\n<h2 id=\"Oh-My-Posh\"><a href=\"#Oh-My-Posh\" class=\"headerlink\" title=\"Oh-My-Posh\"></a>Oh-My-Posh</h2><p>美化当然是必要的，哪个男孩子不会喜欢<del>花花绿绿</del>的终端主题呢？</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>根据 <a href=\"https://ohmyposh.dev/docs/installation/windows\">Oh-My-Posh官网</a> 的指南，在 Windows 上推荐使用 <a href=\"https://www.microsoft.com/p/app-installer/9nblggh4nns1#activetab=pivot:overviewtab\">winget</a> 进行安装。<br>只需在 PowerShell 输入 <code>winget install JanDeDobbeleer.OhMyPosh -s winget</code> 就能完成安装。</p>\n<p>如果你的电脑不能安装 winget，则还有以下两种方法可供选择：</p>\n<ul>\n<li><p>使用 “scoop”：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install https://github.com/JanDeDobbeleer/<span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span>/releases/latest/download/<span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span>.json</span><br></pre></td></tr></table></figure></li>\n<li><p>手动下载：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Set-ExecutionPolicy</span> Bypass <span class=\"literal\">-Scope</span> <span class=\"keyword\">Process</span> <span class=\"literal\">-Force</span>; <span class=\"built_in\">Invoke-Expression</span> ((<span class=\"built_in\">New-Object</span> System.Net.WebClient).DownloadString(<span class=\"string\">&#x27;https://ohmyposh.dev/install.ps1&#x27;</span>))</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"设置主题\"><a href=\"#设置主题\" class=\"headerlink\" title=\"设置主题\"></a>设置主题</h3><ul>\n<li><p>先在 PowerShell 中执行 <code>Get-PoshThemes</code>，在给出的主题中选一个记住名字。</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/posh_theme.png\" alt=\"posh_theme\"></p>\n</li>\n<li><p>在 PowerShell 中运行 <code>New-Item -Path $PROFILE -Type File -Force</code></p>\n<blockquote>\n<p><strong>注意：</strong> 这会使得你原有的 PowerShell 启动配置丢失。<br>如果你先前配置过，直接跳到下一步即可。</p>\n</blockquote>\n</li>\n<li><p>运行 <code>notepad $PROFILE</code> 进行编辑。<br>添加以下内容</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span> init pwsh <span class=\"literal\">--config</span> ~/.&#123; 你想要的主题名称 &#125;.omp.json | <span class=\"built_in\">Invoke-Expression</span></span><br></pre></td></tr></table></figure>\n\n<p>如有杀毒软件拦截，则使用这个</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; ([<span class=\"type\">ScriptBlock</span>]::Create((<span class=\"built_in\">oh</span><span class=\"literal\">-my-posh</span> init pwsh <span class=\"literal\">--config</span> <span class=\"string\">&quot;<span class=\"variable\">$env:POSH_THEMES_PATH</span>\\&#123; 你想要的主题名称 &#125;.omp.json&quot;</span> <span class=\"literal\">--print</span>) <span class=\"operator\">-join</span> <span class=\"string\">&quot;`n&quot;</span>))</span><br></pre></td></tr></table></figure></li>\n<li><p>最后再执行 <code>. $profile</code>，主题就应用好了。</p>\n</li>\n</ul>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"PSReadline\"><a href=\"#PSReadline\" class=\"headerlink\" title=\"PSReadline\"></a>PSReadline</h3><ul>\n<li><p>执行 <code>Install-Module PSReadLine  -Scope CurrentUser</code>。<br>在安装时可能会提示“是否继续”，按 Y/A 同意即可。</p>\n</li>\n<li><p>并在 <code>$profile</code> 文件中添加新的一行： <code>Import-Module PSReadLine</code></p>\n</li>\n</ul>\n<h3 id=\"Posh-git\"><a href=\"#Posh-git\" class=\"headerlink\" title=\"Posh-git\"></a>Posh-git</h3><ul>\n<li><p>执行 <code>Install-Module posh-git -Scope CurrentUser -Force</code></p>\n</li>\n<li><p>同样地添加 <code>Import-Module posh-git</code> 到 <code>$profile</code></p>\n</li>\n</ul>\n<h2 id=\"历史回溯功能\"><a href=\"#历史回溯功能\" class=\"headerlink\" title=\"历史回溯功能\"></a>历史回溯功能</h2><p>在 <code>$profile</code> 文件中添加：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置预测文本来源为历史记录</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineOption</span> <span class=\"literal\">-PredictionSource</span> <span class=\"built_in\">History</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每次回溯输入历史，光标定位于输入内容末尾</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineOption</span> <span class=\"literal\">-HistorySearchCursorMovesToEnd</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"快捷键设置\"><a href=\"#快捷键设置\" class=\"headerlink\" title=\"快捷键设置\"></a>快捷键设置</h2><p>同样在 <code>$profile</code> 中：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 设置 Tab 为菜单补全和 Intellisense</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> <span class=\"string\">&quot;Tab&quot;</span> <span class=\"literal\">-Function</span> MenuComplete</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadlineKeyHandler</span> <span class=\"literal\">-Key</span> <span class=\"string\">&quot;Ctrl+d&quot;</span> <span class=\"literal\">-Function</span> ViExit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置 Ctrl+z 为撤销</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> <span class=\"string\">&quot;Ctrl+z&quot;</span> <span class=\"literal\">-Function</span> Undo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置向上键为后向搜索历史记录</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> UpArrow <span class=\"literal\">-Function</span> HistorySearchBackward</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置向下键为前向搜索历史纪录</span></span><br><span class=\"line\"><span class=\"built_in\">Set-PSReadLineKeyHandler</span> <span class=\"literal\">-Key</span> DownArrow <span class=\"literal\">-Function</span> HistorySearchForward</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>到此 Windows Terminal / PowerShell 的优化就差不多了，基本上终端该有的功能一个都不差。</p>\n<p><img src=\"/2022/06/25/Windows-Terminal-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8C%97/ps_finish.png\" alt=\"ps_finish\"></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】<a href=\"https://zh.wikipedia.org/wiki/Windows_Terminal\">https://zh.wikipedia.org/wiki/Windows_Terminal</a><br>【2】<a href=\"https://zhuanlan.zhihu.com/p/137595941\">https://zhuanlan.zhihu.com/p/137595941</a><br>【3】<a href=\"https://ohmyposh.dev/docs/installation/windows\">https://ohmyposh.dev/docs/installation/windows</a></p>\n"},{"title":"Windows 多网卡链路聚合","date":"2022-07-23T03:00:31.000Z","_content":"\n> 本文在 Windows 11 Pro 22621.436 下测试有效\n\n# 同时使用多个网络适配器的难题\n\n在 Windows 系统下，系统默认采用仅**某个特定的网络适配器**进行连接（即便你的设备上存在着多个可同时联网的网卡）\n\n如我的笔记本上就内置了一张 Intel AX200，连接 5G WiFi 时可达到 585 Mbps 的速度。而如果我使用手机进行 USB 网络共享则可以达到 425 Mbps。\n\n如何将两者的速度同时利用起来以达到理论最快的网络呢？\n\n# NIC Teaming （链路聚合）\n\n想要实现多个网卡同时使用，最好的解决办法就是链路聚合。\n\n有关链路聚合的概念可以在[这里](https://techlibrary.hpe.com/docs/enterprise/servers/icsp/7.5.1/webhelp/content/s_nicteaming_about.html#:~:text=NIC%20teaming%20is%20the%20process,network%20device%20called%20a%20bond.)看到，在这里不做解释。\n\n## 实现 （NetSwitchTeam）\n\n1. 在==具有管理员权限的== `Windows PowerShell` 窗口中，先执行 `Get-NetAdapter -Physical` 来获取当前设备上的**物理**网卡列表。\n  ![ga](g_a.png)\n\n2. 执行以下指令来创建 “多路网络适配器复用器”（Network Adapter Multiplexor）\n\n  ```powershell\n    New-NetSwitchTeam -Name \"SWT01\" -TeamMembers \"WLAN\",\"USB\"\n  ```\n  > `Name` 可自定名称；\n  `TeamMembers` 需指定为上图中的任意网络适配器名称\n\n  ![g](gst.png)\n\n3. 接下来转到 Windows 自带的网络设置界面\n\n  ![wllj](wllj.png)\n\n  此时网络连接的速度为 1292 Mbps，存在明显的叠加效果。 \n\n## 问题\n\n  - 出于未知原因，有时候链路聚合后存在无法获取 ip 的问题。\n    可通过 `Remove-NetSwitchTeam -Name \"{名称}\"` 来恢复先前状态。\n\n# 参考链接\n【1】 https://www.wyr.me/post/659\n【2】 https://blog.csdn.net/ytlzq0228/article/details/118071224\n【3】 https://www.mr-fu.com/11014/","source":"_posts/Windows-多网卡链路聚合.md","raw":"---\ntitle: Windows 多网卡链路聚合\ndate: 2022-07-23 11:00:31\ntags: \n  - Windows\n  - Networking\n---\n\n> 本文在 Windows 11 Pro 22621.436 下测试有效\n\n# 同时使用多个网络适配器的难题\n\n在 Windows 系统下，系统默认采用仅**某个特定的网络适配器**进行连接（即便你的设备上存在着多个可同时联网的网卡）\n\n如我的笔记本上就内置了一张 Intel AX200，连接 5G WiFi 时可达到 585 Mbps 的速度。而如果我使用手机进行 USB 网络共享则可以达到 425 Mbps。\n\n如何将两者的速度同时利用起来以达到理论最快的网络呢？\n\n# NIC Teaming （链路聚合）\n\n想要实现多个网卡同时使用，最好的解决办法就是链路聚合。\n\n有关链路聚合的概念可以在[这里](https://techlibrary.hpe.com/docs/enterprise/servers/icsp/7.5.1/webhelp/content/s_nicteaming_about.html#:~:text=NIC%20teaming%20is%20the%20process,network%20device%20called%20a%20bond.)看到，在这里不做解释。\n\n## 实现 （NetSwitchTeam）\n\n1. 在==具有管理员权限的== `Windows PowerShell` 窗口中，先执行 `Get-NetAdapter -Physical` 来获取当前设备上的**物理**网卡列表。\n  ![ga](g_a.png)\n\n2. 执行以下指令来创建 “多路网络适配器复用器”（Network Adapter Multiplexor）\n\n  ```powershell\n    New-NetSwitchTeam -Name \"SWT01\" -TeamMembers \"WLAN\",\"USB\"\n  ```\n  > `Name` 可自定名称；\n  `TeamMembers` 需指定为上图中的任意网络适配器名称\n\n  ![g](gst.png)\n\n3. 接下来转到 Windows 自带的网络设置界面\n\n  ![wllj](wllj.png)\n\n  此时网络连接的速度为 1292 Mbps，存在明显的叠加效果。 \n\n## 问题\n\n  - 出于未知原因，有时候链路聚合后存在无法获取 ip 的问题。\n    可通过 `Remove-NetSwitchTeam -Name \"{名称}\"` 来恢复先前状态。\n\n# 参考链接\n【1】 https://www.wyr.me/post/659\n【2】 https://blog.csdn.net/ytlzq0228/article/details/118071224\n【3】 https://www.mr-fu.com/11014/","slug":"Windows-多网卡链路聚合","published":1,"updated":"2023-08-05T06:14:33.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewux000n2qbhfxsehgug","content":"<blockquote>\n<p>本文在 Windows 11 Pro 22621.436 下测试有效</p>\n</blockquote>\n<h1 id=\"同时使用多个网络适配器的难题\"><a href=\"#同时使用多个网络适配器的难题\" class=\"headerlink\" title=\"同时使用多个网络适配器的难题\"></a>同时使用多个网络适配器的难题</h1><p>在 Windows 系统下，系统默认采用仅<strong>某个特定的网络适配器</strong>进行连接（即便你的设备上存在着多个可同时联网的网卡）</p>\n<p>如我的笔记本上就内置了一张 Intel AX200，连接 5G WiFi 时可达到 585 Mbps 的速度。而如果我使用手机进行 USB 网络共享则可以达到 425 Mbps。</p>\n<p>如何将两者的速度同时利用起来以达到理论最快的网络呢？</p>\n<h1 id=\"NIC-Teaming-（链路聚合）\"><a href=\"#NIC-Teaming-（链路聚合）\" class=\"headerlink\" title=\"NIC Teaming （链路聚合）\"></a>NIC Teaming （链路聚合）</h1><p>想要实现多个网卡同时使用，最好的解决办法就是链路聚合。</p>\n<p>有关链路聚合的概念可以在<a href=\"https://techlibrary.hpe.com/docs/enterprise/servers/icsp/7.5.1/webhelp/content/s_nicteaming_about.html#:~:text=NIC%20teaming%20is%20the%20process,network%20device%20called%20a%20bond.\">这里</a>看到，在这里不做解释。</p>\n<h2 id=\"实现-（NetSwitchTeam）\"><a href=\"#实现-（NetSwitchTeam）\" class=\"headerlink\" title=\"实现 （NetSwitchTeam）\"></a>实现 （NetSwitchTeam）</h2><ol>\n<li><p>在==具有管理员权限的== <code>Windows PowerShell</code> 窗口中，先执行 <code>Get-NetAdapter -Physical</code> 来获取当前设备上的<strong>物理</strong>网卡列表。<br><img src=\"/2022/07/23/Windows-%E5%A4%9A%E7%BD%91%E5%8D%A1%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/g_a.png\" alt=\"ga\"></p>\n</li>\n<li><p>执行以下指令来创建 “多路网络适配器复用器”（Network Adapter Multiplexor）</p>\n</li>\n</ol>\n  <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-NetSwitchTeam</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;SWT01&quot;</span> <span class=\"literal\">-TeamMembers</span> <span class=\"string\">&quot;WLAN&quot;</span>,<span class=\"string\">&quot;USB&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Name</code> 可自定名称；<br>  <code>TeamMembers</code> 需指定为上图中的任意网络适配器名称</p>\n</blockquote>\n<p>  <img src=\"/2022/07/23/Windows-%E5%A4%9A%E7%BD%91%E5%8D%A1%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/gst.png\" alt=\"g\"></p>\n<ol start=\"3\">\n<li>接下来转到 Windows 自带的网络设置界面</li>\n</ol>\n<p>  <img src=\"/2022/07/23/Windows-%E5%A4%9A%E7%BD%91%E5%8D%A1%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/wllj.png\" alt=\"wllj\"></p>\n<p>  此时网络连接的速度为 1292 Mbps，存在明显的叠加效果。 </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>出于未知原因，有时候链路聚合后存在无法获取 ip 的问题。<br>可通过 <code>Remove-NetSwitchTeam -Name &quot;&#123;名称&#125;&quot;</code> 来恢复先前状态。</li>\n</ul>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】 <a href=\"https://www.wyr.me/post/659\">https://www.wyr.me/post/659</a><br>【2】 <a href=\"https://blog.csdn.net/ytlzq0228/article/details/118071224\">https://blog.csdn.net/ytlzq0228/article/details/118071224</a><br>【3】 <a href=\"https://www.mr-fu.com/11014/\">https://www.mr-fu.com/11014/</a></p>\n","site":{"data":{}},"length":397,"excerpt":"","more":"<blockquote>\n<p>本文在 Windows 11 Pro 22621.436 下测试有效</p>\n</blockquote>\n<h1 id=\"同时使用多个网络适配器的难题\"><a href=\"#同时使用多个网络适配器的难题\" class=\"headerlink\" title=\"同时使用多个网络适配器的难题\"></a>同时使用多个网络适配器的难题</h1><p>在 Windows 系统下，系统默认采用仅<strong>某个特定的网络适配器</strong>进行连接（即便你的设备上存在着多个可同时联网的网卡）</p>\n<p>如我的笔记本上就内置了一张 Intel AX200，连接 5G WiFi 时可达到 585 Mbps 的速度。而如果我使用手机进行 USB 网络共享则可以达到 425 Mbps。</p>\n<p>如何将两者的速度同时利用起来以达到理论最快的网络呢？</p>\n<h1 id=\"NIC-Teaming-（链路聚合）\"><a href=\"#NIC-Teaming-（链路聚合）\" class=\"headerlink\" title=\"NIC Teaming （链路聚合）\"></a>NIC Teaming （链路聚合）</h1><p>想要实现多个网卡同时使用，最好的解决办法就是链路聚合。</p>\n<p>有关链路聚合的概念可以在<a href=\"https://techlibrary.hpe.com/docs/enterprise/servers/icsp/7.5.1/webhelp/content/s_nicteaming_about.html#:~:text=NIC%20teaming%20is%20the%20process,network%20device%20called%20a%20bond.\">这里</a>看到，在这里不做解释。</p>\n<h2 id=\"实现-（NetSwitchTeam）\"><a href=\"#实现-（NetSwitchTeam）\" class=\"headerlink\" title=\"实现 （NetSwitchTeam）\"></a>实现 （NetSwitchTeam）</h2><ol>\n<li><p>在==具有管理员权限的== <code>Windows PowerShell</code> 窗口中，先执行 <code>Get-NetAdapter -Physical</code> 来获取当前设备上的<strong>物理</strong>网卡列表。<br><img src=\"/2022/07/23/Windows-%E5%A4%9A%E7%BD%91%E5%8D%A1%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/g_a.png\" alt=\"ga\"></p>\n</li>\n<li><p>执行以下指令来创建 “多路网络适配器复用器”（Network Adapter Multiplexor）</p>\n</li>\n</ol>\n  <figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">New-NetSwitchTeam</span> <span class=\"literal\">-Name</span> <span class=\"string\">&quot;SWT01&quot;</span> <span class=\"literal\">-TeamMembers</span> <span class=\"string\">&quot;WLAN&quot;</span>,<span class=\"string\">&quot;USB&quot;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Name</code> 可自定名称；<br>  <code>TeamMembers</code> 需指定为上图中的任意网络适配器名称</p>\n</blockquote>\n<p>  <img src=\"/2022/07/23/Windows-%E5%A4%9A%E7%BD%91%E5%8D%A1%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/gst.png\" alt=\"g\"></p>\n<ol start=\"3\">\n<li>接下来转到 Windows 自带的网络设置界面</li>\n</ol>\n<p>  <img src=\"/2022/07/23/Windows-%E5%A4%9A%E7%BD%91%E5%8D%A1%E9%93%BE%E8%B7%AF%E8%81%9A%E5%90%88/wllj.png\" alt=\"wllj\"></p>\n<p>  此时网络连接的速度为 1292 Mbps，存在明显的叠加效果。 </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><ul>\n<li>出于未知原因，有时候链路聚合后存在无法获取 ip 的问题。<br>可通过 <code>Remove-NetSwitchTeam -Name &quot;&#123;名称&#125;&quot;</code> 来恢复先前状态。</li>\n</ul>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>【1】 <a href=\"https://www.wyr.me/post/659\">https://www.wyr.me/post/659</a><br>【2】 <a href=\"https://blog.csdn.net/ytlzq0228/article/details/118071224\">https://blog.csdn.net/ytlzq0228/article/details/118071224</a><br>【3】 <a href=\"https://www.mr-fu.com/11014/\">https://www.mr-fu.com/11014/</a></p>\n"},{"title":"Windows10更改用户名","date":"2022-01-08T15:31:09.000Z","_content":"\n## 前言\n\n众所周知,在Windows 10中是无法直接更改你的用户名的。(设置里面根本找不到)\n![setttingsofuseraccount](./Windows10%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D/setttingsofuseraccount.png)\n\n故有以下保留方法来修改用户名。\n\n## How？\n\n打开`cmd`或`windows terminal`, 输入`netplwiz`直接回车。  \n在新出现的窗口里选中你要修改的账户就可以修改其属性了，好耶！\n\n## 除此之外\n\n修改完后记得重启，至少在我的电脑上出现了设置无法打开的bug。\n\n参考：  \n[1] [windows - 更改用户账户名称](https://blog.csdn.net/weixin_44198965/article/details/115689689)\n","source":"_posts/Windows10更改用户名.md","raw":"---\ntitle: Windows10更改用户名\ndate: 2022-01-08 23:31:09\ntags: \n    - Windows\n---\n\n## 前言\n\n众所周知,在Windows 10中是无法直接更改你的用户名的。(设置里面根本找不到)\n![setttingsofuseraccount](./Windows10%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D/setttingsofuseraccount.png)\n\n故有以下保留方法来修改用户名。\n\n## How？\n\n打开`cmd`或`windows terminal`, 输入`netplwiz`直接回车。  \n在新出现的窗口里选中你要修改的账户就可以修改其属性了，好耶！\n\n## 除此之外\n\n修改完后记得重启，至少在我的电脑上出现了设置无法打开的bug。\n\n参考：  \n[1] [windows - 更改用户账户名称](https://blog.csdn.net/weixin_44198965/article/details/115689689)\n","slug":"Windows10更改用户名","published":1,"updated":"2023-08-05T06:14:33.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewux000q2qbh57l88xqv","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>众所周知,在Windows 10中是无法直接更改你的用户名的。(设置里面根本找不到)<br><img src=\"/2022/01/08/Windows10%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D/setttingsofuseraccount.png\" alt=\"setttingsofuseraccount\"></p>\n<p>故有以下保留方法来修改用户名。</p>\n<h2 id=\"How？\"><a href=\"#How？\" class=\"headerlink\" title=\"How？\"></a>How？</h2><p>打开<code>cmd</code>或<code>windows terminal</code>, 输入<code>netplwiz</code>直接回车。<br>在新出现的窗口里选中你要修改的账户就可以修改其属性了，好耶！</p>\n<h2 id=\"除此之外\"><a href=\"#除此之外\" class=\"headerlink\" title=\"除此之外\"></a>除此之外</h2><p>修改完后记得重启，至少在我的电脑上出现了设置无法打开的bug。</p>\n<p>参考：<br>[1] <a href=\"https://blog.csdn.net/weixin_44198965/article/details/115689689\">windows - 更改用户账户名称</a></p>\n","site":{"data":{}},"length":132,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>众所周知,在Windows 10中是无法直接更改你的用户名的。(设置里面根本找不到)<br><img src=\"/2022/01/08/Windows10%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D/setttingsofuseraccount.png\" alt=\"setttingsofuseraccount\"></p>\n<p>故有以下保留方法来修改用户名。</p>\n<h2 id=\"How？\"><a href=\"#How？\" class=\"headerlink\" title=\"How？\"></a>How？</h2><p>打开<code>cmd</code>或<code>windows terminal</code>, 输入<code>netplwiz</code>直接回车。<br>在新出现的窗口里选中你要修改的账户就可以修改其属性了，好耶！</p>\n<h2 id=\"除此之外\"><a href=\"#除此之外\" class=\"headerlink\" title=\"除此之外\"></a>除此之外</h2><p>修改完后记得重启，至少在我的电脑上出现了设置无法打开的bug。</p>\n<p>参考：<br>[1] <a href=\"https://blog.csdn.net/weixin_44198965/article/details/115689689\">windows - 更改用户账户名称</a></p>\n"},{"title":"Windows创建隐藏管理员账户","date":"2022-01-25T09:49:13.000Z","_content":"\n## 前言\n\n本来是想直接用Administrator来登录RDP的, 奈何实在猜不到社区电脑的密码，只会自己动手整一个隐藏账户了。\n\n## 新建用户账户\n\n按 `Win` + `R` 打开运行窗口，输入熟悉的 `cmd` 并回车。\n\n![CMD](wt.png)\n\n一口气执行以下命令\n```cmd\n    net user rdp$ 123456 /add\n    net localgroup Administrators rdp$ /add\n\n    {rdp$} 可切换为你中意的其他用户名\n```\n如果一切正常的话，你输完一句底下就应该蹦一句 `命令成功完成`。如果没有? 请检查你的输入。\n\n>   淦！我把我的用户名输错了，我现在想删除账户怎么办？  \n    请将 `net user rdp$ 123456 /add` 中的 `/add` 改为 `/del`并执行\n\n## 隐藏的前期准备\n\n再召唤一次运行窗口，这次输入 `regedit`。然后在左边的导航窗口内一路找到 `HKEY_LOCAL_MACHINE\\SAM\\SAM`。\n\n你可能会疑惑这 `SAM` 底下就只有一个默认键值，其他什么都没有。  \n所以，在 `SAM` 上按右键（第二个 `SAM`\n\n![regeditperm](regeditperm.png)\n\n点击 `权限`，在新弹出的窗口中把你现在账户（大概率是Administrator 的 `完全控制` 和 `读取` 给勾上。接着点确定，最后把注册表编辑器重启。你就可以看到 `SAM` 的内容了。\n\n## 开始隐藏\n\n`SAM` 内长这个样子：\n\n![reglist](reglist.png)\n\n在 `Names` 文件夹下找到你新创建的账户名称，点一下并记下窗口右边的默认值的类型（即`0x1f4`之类的）。再以相同方式记下你不想隐藏或要保留的账户的类型值。  \n\n现在你应该记住两个类型值，并且能够分清楚哪个类型值对应哪个账户。\n\n在 `Users` 文件夹下找到这两个类型值所对应的文件夹名称（如`000001F4`）  \n\n打开你想要保留的账户的类型值所对应的文件夹，找到里面的`F`值，双击打开，之后像这样 全部复制\n\n![binvalue](binvalue.png)\n\n在打开你想要隐藏的账户的类型值所对应的文件夹，找到里面的`F`值，双击打开，像刚刚那样。全部粘贴进去。\n\n### 好，目前隐藏账户的工作已经完成一半了\n\n接下来将对着你想要隐藏的账户的类型值所对应的文件夹（形似`000001XX`）按右键，选择导出。  \n（别放奇奇怪怪的位置一会还要用到  \n对于 `Names` 下的要隐藏的账户文件夹（即你创建的那个用户名）也是一样要导出的。\n\n切换到命令提示符，将先前创建好的账户删掉。（不会请重新阅读以上部分  \n最后找到导出的两个 `reg` 文件，双击它们重新导入。\n\n### 完成！\n\n参考链接：  \n[1] https://www.w3xue.com/exp/article/20192/22237.html","source":"_posts/Windows创建隐藏管理员账户.md","raw":"---\ntitle: Windows创建隐藏管理员账户\ndate: 2022-01-25 17:49:13\ntags: \n    - Windows\n---\n\n## 前言\n\n本来是想直接用Administrator来登录RDP的, 奈何实在猜不到社区电脑的密码，只会自己动手整一个隐藏账户了。\n\n## 新建用户账户\n\n按 `Win` + `R` 打开运行窗口，输入熟悉的 `cmd` 并回车。\n\n![CMD](wt.png)\n\n一口气执行以下命令\n```cmd\n    net user rdp$ 123456 /add\n    net localgroup Administrators rdp$ /add\n\n    {rdp$} 可切换为你中意的其他用户名\n```\n如果一切正常的话，你输完一句底下就应该蹦一句 `命令成功完成`。如果没有? 请检查你的输入。\n\n>   淦！我把我的用户名输错了，我现在想删除账户怎么办？  \n    请将 `net user rdp$ 123456 /add` 中的 `/add` 改为 `/del`并执行\n\n## 隐藏的前期准备\n\n再召唤一次运行窗口，这次输入 `regedit`。然后在左边的导航窗口内一路找到 `HKEY_LOCAL_MACHINE\\SAM\\SAM`。\n\n你可能会疑惑这 `SAM` 底下就只有一个默认键值，其他什么都没有。  \n所以，在 `SAM` 上按右键（第二个 `SAM`\n\n![regeditperm](regeditperm.png)\n\n点击 `权限`，在新弹出的窗口中把你现在账户（大概率是Administrator 的 `完全控制` 和 `读取` 给勾上。接着点确定，最后把注册表编辑器重启。你就可以看到 `SAM` 的内容了。\n\n## 开始隐藏\n\n`SAM` 内长这个样子：\n\n![reglist](reglist.png)\n\n在 `Names` 文件夹下找到你新创建的账户名称，点一下并记下窗口右边的默认值的类型（即`0x1f4`之类的）。再以相同方式记下你不想隐藏或要保留的账户的类型值。  \n\n现在你应该记住两个类型值，并且能够分清楚哪个类型值对应哪个账户。\n\n在 `Users` 文件夹下找到这两个类型值所对应的文件夹名称（如`000001F4`）  \n\n打开你想要保留的账户的类型值所对应的文件夹，找到里面的`F`值，双击打开，之后像这样 全部复制\n\n![binvalue](binvalue.png)\n\n在打开你想要隐藏的账户的类型值所对应的文件夹，找到里面的`F`值，双击打开，像刚刚那样。全部粘贴进去。\n\n### 好，目前隐藏账户的工作已经完成一半了\n\n接下来将对着你想要隐藏的账户的类型值所对应的文件夹（形似`000001XX`）按右键，选择导出。  \n（别放奇奇怪怪的位置一会还要用到  \n对于 `Names` 下的要隐藏的账户文件夹（即你创建的那个用户名）也是一样要导出的。\n\n切换到命令提示符，将先前创建好的账户删掉。（不会请重新阅读以上部分  \n最后找到导出的两个 `reg` 文件，双击它们重新导入。\n\n### 完成！\n\n参考链接：  \n[1] https://www.w3xue.com/exp/article/20192/22237.html","slug":"Windows创建隐藏管理员账户","published":1,"updated":"2023-08-05T06:14:33.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewuy000s2qbh4dbhfykd","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本来是想直接用Administrator来登录RDP的, 奈何实在猜不到社区电脑的密码，只会自己动手整一个隐藏账户了。</p>\n<h2 id=\"新建用户账户\"><a href=\"#新建用户账户\" class=\"headerlink\" title=\"新建用户账户\"></a>新建用户账户</h2><p>按 <code>Win</code> + <code>R</code> 打开运行窗口，输入熟悉的 <code>cmd</code> 并回车。</p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/wt.png\" alt=\"CMD\"></p>\n<p>一口气执行以下命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">net</span> user rdp$ <span class=\"number\">123456</span> /add</span><br><span class=\"line\"><span class=\"built_in\">net</span> localgroup Administrators rdp$ /add</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;rdp$&#125; 可切换为你中意的其他用户名</span><br></pre></td></tr></table></figure>\n<p>如果一切正常的话，你输完一句底下就应该蹦一句 <code>命令成功完成</code>。如果没有? 请检查你的输入。</p>\n<blockquote>\n<p>  淦！我把我的用户名输错了，我现在想删除账户怎么办？<br>    请将 <code>net user rdp$ 123456 /add</code> 中的 <code>/add</code> 改为 <code>/del</code>并执行</p>\n</blockquote>\n<h2 id=\"隐藏的前期准备\"><a href=\"#隐藏的前期准备\" class=\"headerlink\" title=\"隐藏的前期准备\"></a>隐藏的前期准备</h2><p>再召唤一次运行窗口，这次输入 <code>regedit</code>。然后在左边的导航窗口内一路找到 <code>HKEY_LOCAL_MACHINE\\SAM\\SAM</code>。</p>\n<p>你可能会疑惑这 <code>SAM</code> 底下就只有一个默认键值，其他什么都没有。<br>所以，在 <code>SAM</code> 上按右键（第二个 <code>SAM</code></p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/regeditperm.png\" alt=\"regeditperm\"></p>\n<p>点击 <code>权限</code>，在新弹出的窗口中把你现在账户（大概率是Administrator 的 <code>完全控制</code> 和 <code>读取</code> 给勾上。接着点确定，最后把注册表编辑器重启。你就可以看到 <code>SAM</code> 的内容了。</p>\n<h2 id=\"开始隐藏\"><a href=\"#开始隐藏\" class=\"headerlink\" title=\"开始隐藏\"></a>开始隐藏</h2><p><code>SAM</code> 内长这个样子：</p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/reglist.png\" alt=\"reglist\"></p>\n<p>在 <code>Names</code> 文件夹下找到你新创建的账户名称，点一下并记下窗口右边的默认值的类型（即<code>0x1f4</code>之类的）。再以相同方式记下你不想隐藏或要保留的账户的类型值。  </p>\n<p>现在你应该记住两个类型值，并且能够分清楚哪个类型值对应哪个账户。</p>\n<p>在 <code>Users</code> 文件夹下找到这两个类型值所对应的文件夹名称（如<code>000001F4</code>）  </p>\n<p>打开你想要保留的账户的类型值所对应的文件夹，找到里面的<code>F</code>值，双击打开，之后像这样 全部复制</p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/binvalue.png\" alt=\"binvalue\"></p>\n<p>在打开你想要隐藏的账户的类型值所对应的文件夹，找到里面的<code>F</code>值，双击打开，像刚刚那样。全部粘贴进去。</p>\n<h3 id=\"好，目前隐藏账户的工作已经完成一半了\"><a href=\"#好，目前隐藏账户的工作已经完成一半了\" class=\"headerlink\" title=\"好，目前隐藏账户的工作已经完成一半了\"></a>好，目前隐藏账户的工作已经完成一半了</h3><p>接下来将对着你想要隐藏的账户的类型值所对应的文件夹（形似<code>000001XX</code>）按右键，选择导出。<br>（别放奇奇怪怪的位置一会还要用到<br>对于 <code>Names</code> 下的要隐藏的账户文件夹（即你创建的那个用户名）也是一样要导出的。</p>\n<p>切换到命令提示符，将先前创建好的账户删掉。（不会请重新阅读以上部分<br>最后找到导出的两个 <code>reg</code> 文件，双击它们重新导入。</p>\n<h3 id=\"完成！\"><a href=\"#完成！\" class=\"headerlink\" title=\"完成！\"></a>完成！</h3><p>参考链接：<br>[1] <a href=\"https://www.w3xue.com/exp/article/20192/22237.html\">https://www.w3xue.com/exp/article/20192/22237.html</a></p>\n","site":{"data":{}},"length":696,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本来是想直接用Administrator来登录RDP的, 奈何实在猜不到社区电脑的密码，只会自己动手整一个隐藏账户了。</p>\n<h2 id=\"新建用户账户\"><a href=\"#新建用户账户\" class=\"headerlink\" title=\"新建用户账户\"></a>新建用户账户</h2><p>按 <code>Win</code> + <code>R</code> 打开运行窗口，输入熟悉的 <code>cmd</code> 并回车。</p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/wt.png\" alt=\"CMD\"></p>\n<p>一口气执行以下命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">net</span> user rdp$ <span class=\"number\">123456</span> /add</span><br><span class=\"line\"><span class=\"built_in\">net</span> localgroup Administrators rdp$ /add</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;rdp$&#125; 可切换为你中意的其他用户名</span><br></pre></td></tr></table></figure>\n<p>如果一切正常的话，你输完一句底下就应该蹦一句 <code>命令成功完成</code>。如果没有? 请检查你的输入。</p>\n<blockquote>\n<p>  淦！我把我的用户名输错了，我现在想删除账户怎么办？<br>    请将 <code>net user rdp$ 123456 /add</code> 中的 <code>/add</code> 改为 <code>/del</code>并执行</p>\n</blockquote>\n<h2 id=\"隐藏的前期准备\"><a href=\"#隐藏的前期准备\" class=\"headerlink\" title=\"隐藏的前期准备\"></a>隐藏的前期准备</h2><p>再召唤一次运行窗口，这次输入 <code>regedit</code>。然后在左边的导航窗口内一路找到 <code>HKEY_LOCAL_MACHINE\\SAM\\SAM</code>。</p>\n<p>你可能会疑惑这 <code>SAM</code> 底下就只有一个默认键值，其他什么都没有。<br>所以，在 <code>SAM</code> 上按右键（第二个 <code>SAM</code></p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/regeditperm.png\" alt=\"regeditperm\"></p>\n<p>点击 <code>权限</code>，在新弹出的窗口中把你现在账户（大概率是Administrator 的 <code>完全控制</code> 和 <code>读取</code> 给勾上。接着点确定，最后把注册表编辑器重启。你就可以看到 <code>SAM</code> 的内容了。</p>\n<h2 id=\"开始隐藏\"><a href=\"#开始隐藏\" class=\"headerlink\" title=\"开始隐藏\"></a>开始隐藏</h2><p><code>SAM</code> 内长这个样子：</p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/reglist.png\" alt=\"reglist\"></p>\n<p>在 <code>Names</code> 文件夹下找到你新创建的账户名称，点一下并记下窗口右边的默认值的类型（即<code>0x1f4</code>之类的）。再以相同方式记下你不想隐藏或要保留的账户的类型值。  </p>\n<p>现在你应该记住两个类型值，并且能够分清楚哪个类型值对应哪个账户。</p>\n<p>在 <code>Users</code> 文件夹下找到这两个类型值所对应的文件夹名称（如<code>000001F4</code>）  </p>\n<p>打开你想要保留的账户的类型值所对应的文件夹，找到里面的<code>F</code>值，双击打开，之后像这样 全部复制</p>\n<p><img src=\"/2022/01/25/Windows%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/binvalue.png\" alt=\"binvalue\"></p>\n<p>在打开你想要隐藏的账户的类型值所对应的文件夹，找到里面的<code>F</code>值，双击打开，像刚刚那样。全部粘贴进去。</p>\n<h3 id=\"好，目前隐藏账户的工作已经完成一半了\"><a href=\"#好，目前隐藏账户的工作已经完成一半了\" class=\"headerlink\" title=\"好，目前隐藏账户的工作已经完成一半了\"></a>好，目前隐藏账户的工作已经完成一半了</h3><p>接下来将对着你想要隐藏的账户的类型值所对应的文件夹（形似<code>000001XX</code>）按右键，选择导出。<br>（别放奇奇怪怪的位置一会还要用到<br>对于 <code>Names</code> 下的要隐藏的账户文件夹（即你创建的那个用户名）也是一样要导出的。</p>\n<p>切换到命令提示符，将先前创建好的账户删掉。（不会请重新阅读以上部分<br>最后找到导出的两个 <code>reg</code> 文件，双击它们重新导入。</p>\n<h3 id=\"完成！\"><a href=\"#完成！\" class=\"headerlink\" title=\"完成！\"></a>完成！</h3><p>参考链接：<br>[1] <a href=\"https://www.w3xue.com/exp/article/20192/22237.html\">https://www.w3xue.com/exp/article/20192/22237.html</a></p>\n"},{"title":"Pandavan 上配置 Clash 教程","date":"2021-08-15T11:20:02.000Z","excerpt":"小内存的设备还是不建议使用很容易把整个路由器卡死。像这种东西还是更推荐在软路由上安装。","_content":"\n本次使用的设备是 **极路由 B70** 已刷入最新breed与pandavan.\n\n## clash配置文件生成\n\n此文件用于在路由器上的clash配置所需,我使用的机场运营商支持yaml的配置文件直接下载.文件长这样:\n\n```yaml\n    #!MANAGED-CONFIG https://cp.antigfw.net/link/aizid1SSNZnHmkph?clash=1\n\n#---------------------------------------------------#\n## 上次更新于：2021-08-15 07:25:20\n#---------------------------------------------------#\n\nport: 7890\nsocks-port: 7891\nredir-port: 7892\nallow-lan: false\nmode: rule\nlog-level: silent\nexternal-controller: '0.0.0.0:9090'\nsecret: ''\ndns:\n  enable: true\n  ipv6: false\n  listen: '0.0.0.0:53'\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  nameserver:\n    - 114.114.114.114\n    - 'tcp://223.5.5.5'\n  fallback:\n    - 'tls://223.5.5.5:853'\n    - 'https://223.5.5.5/dns-query'\n  fallback-filter:\n    geoip: true\n    ipcidr:\n      - 240.0.0.0/4\nproxies:\n  -\n    name: '中新IEPL [1倍] B - 50004 单端口'\n    type: ss\n    server: csg.zsdcloud.xxx\n    port: 50xxx\n    cipher: aes-128-gcm\n    password: ************\n    udp: true\n  -\n    name: '中日IEPL [1倍] A - 50003 单端口'\n    type: ss\n    server: cjp.zsdcloud.xxx\n    port: 50xxx\n    cipher: aes-128-gcm\n    password: ************\n    udp: true\n  -\n    name: '中日IEPL [1倍] B - 50003 单端口'\n    type: ss\n    server: cjp.zsdcloud.xx\n    port: 50xxx\n    cipher: aes-128-gcm\n    password: ************\n    udp: true\n    ...\nproxy-groups:\n  -\n    name: 🔰国外流量\n    type: select\n    proxies:\n      - '3【必看！！！节点名称的1倍、0.1倍、10倍是流量倍率，实际消耗1G流量计算为1G、0.1G、10G。】 - 567 单端口'\n      ...\n  -\n    name: 🚀直接连接\n    type: select\n    proxies:\n      - DIRECT\n\n\nrules:\n  - DOMAIN-SUFFIX,smtp,DIRECT\n  - DOMAIN-KEYWORD,aria2,DIRECT\n  ...\n\n```\n\n先复制备用\n\n## 路由器端设置\n\n* 登入路由器[192.168.123.1](192.168.123.1)\n\n* 如图所示,点击左侧菜单栏的\"搭建web环境\", 后在页面上方的标签栏里找到 clash 并点击\n  ![ ](/images/clashsetup/1.png)\n  \n* ![ ](/images/clashsetup/2.png)\n  \n  * 先将红色框内的四个开关打开\n\n  * 将配置文件的内容复制到蓝色框指向位置内\n\n> 记得检查绿色框内的当前clash版本,如没有则更换  \n  至于\"分流工作模式\" 我使用的是大陆白名单 + clash内部分流  \n","source":"_posts/pandavan上配置clash教程.md","raw":"---\ntitle: pandavan 上配置 clash 教程\ndate: 2021-08-15 19:20:02\ntags: \n  - Router\nexcerpt: 小内存的设备还是不建议使用很容易把整个路由器卡死。像这种东西还是更推荐在软路由上安装。\n---\n\n本次使用的设备是 **极路由 B70** 已刷入最新breed与pandavan.\n\n## clash配置文件生成\n\n此文件用于在路由器上的clash配置所需,我使用的机场运营商支持yaml的配置文件直接下载.文件长这样:\n\n```yaml\n    #!MANAGED-CONFIG https://cp.antigfw.net/link/aizid1SSNZnHmkph?clash=1\n\n#---------------------------------------------------#\n## 上次更新于：2021-08-15 07:25:20\n#---------------------------------------------------#\n\nport: 7890\nsocks-port: 7891\nredir-port: 7892\nallow-lan: false\nmode: rule\nlog-level: silent\nexternal-controller: '0.0.0.0:9090'\nsecret: ''\ndns:\n  enable: true\n  ipv6: false\n  listen: '0.0.0.0:53'\n  enhanced-mode: fake-ip\n  fake-ip-range: 198.18.0.1/16\n  nameserver:\n    - 114.114.114.114\n    - 'tcp://223.5.5.5'\n  fallback:\n    - 'tls://223.5.5.5:853'\n    - 'https://223.5.5.5/dns-query'\n  fallback-filter:\n    geoip: true\n    ipcidr:\n      - 240.0.0.0/4\nproxies:\n  -\n    name: '中新IEPL [1倍] B - 50004 单端口'\n    type: ss\n    server: csg.zsdcloud.xxx\n    port: 50xxx\n    cipher: aes-128-gcm\n    password: ************\n    udp: true\n  -\n    name: '中日IEPL [1倍] A - 50003 单端口'\n    type: ss\n    server: cjp.zsdcloud.xxx\n    port: 50xxx\n    cipher: aes-128-gcm\n    password: ************\n    udp: true\n  -\n    name: '中日IEPL [1倍] B - 50003 单端口'\n    type: ss\n    server: cjp.zsdcloud.xx\n    port: 50xxx\n    cipher: aes-128-gcm\n    password: ************\n    udp: true\n    ...\nproxy-groups:\n  -\n    name: 🔰国外流量\n    type: select\n    proxies:\n      - '3【必看！！！节点名称的1倍、0.1倍、10倍是流量倍率，实际消耗1G流量计算为1G、0.1G、10G。】 - 567 单端口'\n      ...\n  -\n    name: 🚀直接连接\n    type: select\n    proxies:\n      - DIRECT\n\n\nrules:\n  - DOMAIN-SUFFIX,smtp,DIRECT\n  - DOMAIN-KEYWORD,aria2,DIRECT\n  ...\n\n```\n\n先复制备用\n\n## 路由器端设置\n\n* 登入路由器[192.168.123.1](192.168.123.1)\n\n* 如图所示,点击左侧菜单栏的\"搭建web环境\", 后在页面上方的标签栏里找到 clash 并点击\n  ![ ](/images/clashsetup/1.png)\n  \n* ![ ](/images/clashsetup/2.png)\n  \n  * 先将红色框内的四个开关打开\n\n  * 将配置文件的内容复制到蓝色框指向位置内\n\n> 记得检查绿色框内的当前clash版本,如没有则更换  \n  至于\"分流工作模式\" 我使用的是大陆白名单 + clash内部分流  \n","slug":"pandavan上配置clash教程","published":1,"updated":"2023-09-23T01:41:12.203Z","_id":"clkysewuz000u2qbhfh3y0v9h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>本次使用的设备是 <strong>极路由 B70</strong> 已刷入最新breed与pandavan.</p>\n<h2 id=\"clash配置文件生成\"><a href=\"#clash配置文件生成\" class=\"headerlink\" title=\"clash配置文件生成\"></a>clash配置文件生成</h2><p>此文件用于在路由器上的clash配置所需,我使用的机场运营商支持yaml的配置文件直接下载.文件长这样:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">#!MANAGED-CONFIG https://cp.antigfw.net/link/aizid1SSNZnHmkph?clash=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"><span class=\"comment\">## 上次更新于：2021-08-15 07:25:20</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"attr\">socks-port:</span> <span class=\"number\">7891</span></span><br><span class=\"line\"><span class=\"attr\">redir-port:</span> <span class=\"number\">7892</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">rule</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">silent</span></span><br><span class=\"line\"><span class=\"attr\">external-controller:</span> <span class=\"string\">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ipv6:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">listen:</span> <span class=\"string\">&#x27;0.0.0.0:53&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">enhanced-mode:</span> <span class=\"string\">fake-ip</span></span><br><span class=\"line\">  <span class=\"attr\">fake-ip-range:</span> <span class=\"number\">198.18</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">/16</span></span><br><span class=\"line\">  <span class=\"attr\">nameserver:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;tcp://223.5.5.5&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">fallback:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;tls://223.5.5.5:853&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;https://223.5.5.5/dns-query&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">fallback-filter:</span></span><br><span class=\"line\">    <span class=\"attr\">geoip:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">ipcidr:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">240.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/4</span></span><br><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;中新IEPL [1倍] B - 50004 单端口&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">csg.zsdcloud.xxx</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">50xxx</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">aes-128-gcm</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">************</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;中日IEPL [1倍] A - 50003 单端口&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">cjp.zsdcloud.xxx</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">50xxx</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">aes-128-gcm</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">************</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;中日IEPL [1倍] B - 50003 单端口&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">cjp.zsdcloud.xx</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">50xxx</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">aes-128-gcm</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">************</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">proxy-groups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">🔰国外流量</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">select</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;3【必看！！！节点名称的1倍、0.1倍、10倍是流量倍率，实际消耗1G流量计算为1G、0.1G、10G。】 - 567 单端口&#x27;</span></span><br><span class=\"line\">      <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">🚀直接连接</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">select</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">DIRECT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,smtp,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,aria2,DIRECT</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先复制备用</p>\n<h2 id=\"路由器端设置\"><a href=\"#路由器端设置\" class=\"headerlink\" title=\"路由器端设置\"></a>路由器端设置</h2><ul>\n<li><p>登入路由器<a href=\"192.168.123.1\">192.168.123.1</a></p>\n</li>\n<li><p>如图所示,点击左侧菜单栏的”搭建web环境”, 后在页面上方的标签栏里找到 clash 并点击<br><img src=\"/images/clashsetup/1.png\" alt=\" \"></p>\n</li>\n<li><p><img src=\"/images/clashsetup/2.png\" alt=\" \"></p>\n<ul>\n<li><p>先将红色框内的四个开关打开</p>\n</li>\n<li><p>将配置文件的内容复制到蓝色框指向位置内</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>记得检查绿色框内的当前clash版本,如没有则更换<br>  至于”分流工作模式” 我使用的是大陆白名单 + clash内部分流  </p>\n</blockquote>\n","site":{"data":{}},"length":409,"more":"<p>本次使用的设备是 <strong>极路由 B70</strong> 已刷入最新breed与pandavan.</p>\n<h2 id=\"clash配置文件生成\"><a href=\"#clash配置文件生成\" class=\"headerlink\" title=\"clash配置文件生成\"></a>clash配置文件生成</h2><p>此文件用于在路由器上的clash配置所需,我使用的机场运营商支持yaml的配置文件直接下载.文件长这样:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">#!MANAGED-CONFIG https://cp.antigfw.net/link/aizid1SSNZnHmkph?clash=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"><span class=\"comment\">## 上次更新于：2021-08-15 07:25:20</span></span><br><span class=\"line\"><span class=\"comment\">#---------------------------------------------------#</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">port:</span> <span class=\"number\">7890</span></span><br><span class=\"line\"><span class=\"attr\">socks-port:</span> <span class=\"number\">7891</span></span><br><span class=\"line\"><span class=\"attr\">redir-port:</span> <span class=\"number\">7892</span></span><br><span class=\"line\"><span class=\"attr\">allow-lan:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">mode:</span> <span class=\"string\">rule</span></span><br><span class=\"line\"><span class=\"attr\">log-level:</span> <span class=\"string\">silent</span></span><br><span class=\"line\"><span class=\"attr\">external-controller:</span> <span class=\"string\">&#x27;0.0.0.0:9090&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">secret:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">dns:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">ipv6:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">listen:</span> <span class=\"string\">&#x27;0.0.0.0:53&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">enhanced-mode:</span> <span class=\"string\">fake-ip</span></span><br><span class=\"line\">  <span class=\"attr\">fake-ip-range:</span> <span class=\"number\">198.18</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"string\">/16</span></span><br><span class=\"line\">  <span class=\"attr\">nameserver:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"number\">114.114</span><span class=\"number\">.114</span><span class=\"number\">.114</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;tcp://223.5.5.5&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">fallback:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;tls://223.5.5.5:853&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">&#x27;https://223.5.5.5/dns-query&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">fallback-filter:</span></span><br><span class=\"line\">    <span class=\"attr\">geoip:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">ipcidr:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"number\">240.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"string\">/4</span></span><br><span class=\"line\"><span class=\"attr\">proxies:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;中新IEPL [1倍] B - 50004 单端口&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">csg.zsdcloud.xxx</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">50xxx</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">aes-128-gcm</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">************</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;中日IEPL [1倍] A - 50003 单端口&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">cjp.zsdcloud.xxx</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">50xxx</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">aes-128-gcm</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">************</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">&#x27;中日IEPL [1倍] B - 50003 单端口&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">ss</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"string\">cjp.zsdcloud.xx</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"string\">50xxx</span></span><br><span class=\"line\">    <span class=\"attr\">cipher:</span> <span class=\"string\">aes-128-gcm</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">************</span></span><br><span class=\"line\">    <span class=\"attr\">udp:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"attr\">proxy-groups:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">🔰国外流量</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">select</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;3【必看！！！节点名称的1倍、0.1倍、10倍是流量倍率，实际消耗1G流量计算为1G、0.1G、10G。】 - 567 单端口&#x27;</span></span><br><span class=\"line\">      <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">🚀直接连接</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">select</span></span><br><span class=\"line\">    <span class=\"attr\">proxies:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">DIRECT</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-SUFFIX,smtp,DIRECT</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">DOMAIN-KEYWORD,aria2,DIRECT</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>先复制备用</p>\n<h2 id=\"路由器端设置\"><a href=\"#路由器端设置\" class=\"headerlink\" title=\"路由器端设置\"></a>路由器端设置</h2><ul>\n<li><p>登入路由器<a href=\"192.168.123.1\">192.168.123.1</a></p>\n</li>\n<li><p>如图所示,点击左侧菜单栏的”搭建web环境”, 后在页面上方的标签栏里找到 clash 并点击<br><img src=\"/images/clashsetup/1.png\" alt=\" \"></p>\n</li>\n<li><p><img src=\"/images/clashsetup/2.png\" alt=\" \"></p>\n<ul>\n<li><p>先将红色框内的四个开关打开</p>\n</li>\n<li><p>将配置文件的内容复制到蓝色框指向位置内</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>记得检查绿色框内的当前clash版本,如没有则更换<br>  至于”分流工作模式” 我使用的是大陆白名单 + clash内部分流  </p>\n</blockquote>\n"},{"title":"使用GPG签名commit记录","date":"2022-01-29T03:16:10.000Z","excerpt":"不好好使用 GPG 签名你的 commit 可是有被别人冒用身份的风险哦（不过也没人会专程来冒充我就是了","_content":"\n## 前言\n\n以前完全不签名的我，今天看到这个消息  \n![asd](fake.png)\n\n看来还是有必要好好学习一下的。\n\n## 下载安装 GPG4win\n\n到[这里](https://gpg4win.org/download.html)下载 GPG4win。\n\n注意安装的时候**一定**要把`Kleopatra`给勾选上，否则需使用 Cli 进行配置。  \n![gpg](gpg_install.png)\n\n## 配置密钥\n\n安装完后打开`Kleopatra`, 点击`新建密钥对`。\n\n![kleo_gen_setting](kleo_gen_setting.png)\n\n在弹出的新窗口中,输入名称(可随意, Github 不会管的)和电子邮件地址(电子邮件地址必须与注册 Github 的一致)\n\n> `使用密码句保护生成的密钥` 相当于针对 GPG 签名的最后一把锁 | 按自己情况勾选\n\n填好后, 点击高级设置\n\n![kleo_advanced](kleo_advanced.png)\n\n- 将密钥类型设置为`RSA`\n- 将密钥长度设置为`2048` (两个都是)\n- 有效期按自己喜好设置\n\n最后点击`下一步`你的密钥就生成完成了\n\n## 向 Github 添加密钥\n\n在 Kleopatra 主界面中, 右键单击你刚刚生成的密钥, 选择`导出...`\n\n![export_key](export_key.png)\n\n将`asc`后缀的公钥保存好, 打开 Github 的`settings`页面, 点击`Add SSH Key`把你的公钥添加进去\n\n## 本地 git 设置\n\n先得去获取你 GPG 密钥的指纹, 再打开 Kleopatra, 右键你的密钥选择`细节`\n\n![kleo_fingerprint](kleo_fingerprint.png)\n\n将`指纹`复制下来即可\n\n之后的操作就相当简单了, 如下\n\n打开`git cli` 输入:\n\n```bash\n    git config --global user.signkey {指纹(去掉空格)}\n    git config --global user.gpgsign true\n    // 这会对所有仓库生效\n    git config user.gpgsign true\n    // 仅对该仓库生效\n```\n\n### 错误处理\n\n`No Secret Key`\n![no_secret_key](no_secret_key.png)\n\n这是由于 git 默认使用的 gpg 程序并非我们先前安装的那一个，故采用\n`git config --global gpg.program \"{安装目录\\bin\\gpg.exe}\"`\n来设置 gpg.program。\n\n### 其他\n\n- 设置密钥密码过期时间\n\n  打开 Kleopatra，选择`设置` > `配置Kleopatra` > `GnuPG` > `Private Key` > `Expire cached PINs after N Seconds`\n\n  ![expire_setting](expire_setting.png)\n\n  填入`604800`即可，单位为秒，默认为`0`，即永不过期。\n\n## 参考链接\n\n[1] https://www.liesauer.net/blog/post/sign-git-commit-with-gpg-under-windows.html  \n[2] https://blog.sdlsj.net/archives/git/windows-sign-git-commit-with-gpg/\n","source":"_posts/使用GPG签名commit记录.md","raw":"---\ntitle: 使用GPG签名commit记录\ndate: 2022-01-29 11:16:10\ntags: \n  - git\nexcerpt: 不好好使用 GPG 签名你的 commit 可是有被别人冒用身份的风险哦（不过也没人会专程来冒充我就是了\n---\n\n## 前言\n\n以前完全不签名的我，今天看到这个消息  \n![asd](fake.png)\n\n看来还是有必要好好学习一下的。\n\n## 下载安装 GPG4win\n\n到[这里](https://gpg4win.org/download.html)下载 GPG4win。\n\n注意安装的时候**一定**要把`Kleopatra`给勾选上，否则需使用 Cli 进行配置。  \n![gpg](gpg_install.png)\n\n## 配置密钥\n\n安装完后打开`Kleopatra`, 点击`新建密钥对`。\n\n![kleo_gen_setting](kleo_gen_setting.png)\n\n在弹出的新窗口中,输入名称(可随意, Github 不会管的)和电子邮件地址(电子邮件地址必须与注册 Github 的一致)\n\n> `使用密码句保护生成的密钥` 相当于针对 GPG 签名的最后一把锁 | 按自己情况勾选\n\n填好后, 点击高级设置\n\n![kleo_advanced](kleo_advanced.png)\n\n- 将密钥类型设置为`RSA`\n- 将密钥长度设置为`2048` (两个都是)\n- 有效期按自己喜好设置\n\n最后点击`下一步`你的密钥就生成完成了\n\n## 向 Github 添加密钥\n\n在 Kleopatra 主界面中, 右键单击你刚刚生成的密钥, 选择`导出...`\n\n![export_key](export_key.png)\n\n将`asc`后缀的公钥保存好, 打开 Github 的`settings`页面, 点击`Add SSH Key`把你的公钥添加进去\n\n## 本地 git 设置\n\n先得去获取你 GPG 密钥的指纹, 再打开 Kleopatra, 右键你的密钥选择`细节`\n\n![kleo_fingerprint](kleo_fingerprint.png)\n\n将`指纹`复制下来即可\n\n之后的操作就相当简单了, 如下\n\n打开`git cli` 输入:\n\n```bash\n    git config --global user.signkey {指纹(去掉空格)}\n    git config --global user.gpgsign true\n    // 这会对所有仓库生效\n    git config user.gpgsign true\n    // 仅对该仓库生效\n```\n\n### 错误处理\n\n`No Secret Key`\n![no_secret_key](no_secret_key.png)\n\n这是由于 git 默认使用的 gpg 程序并非我们先前安装的那一个，故采用\n`git config --global gpg.program \"{安装目录\\bin\\gpg.exe}\"`\n来设置 gpg.program。\n\n### 其他\n\n- 设置密钥密码过期时间\n\n  打开 Kleopatra，选择`设置` > `配置Kleopatra` > `GnuPG` > `Private Key` > `Expire cached PINs after N Seconds`\n\n  ![expire_setting](expire_setting.png)\n\n  填入`604800`即可，单位为秒，默认为`0`，即永不过期。\n\n## 参考链接\n\n[1] https://www.liesauer.net/blog/post/sign-git-commit-with-gpg-under-windows.html  \n[2] https://blog.sdlsj.net/archives/git/windows-sign-git-commit-with-gpg/\n","slug":"使用GPG签名commit记录","published":1,"updated":"2023-09-23T01:41:12.205Z","_id":"clkysewv0000v2qbhcd3509ry","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前完全不签名的我，今天看到这个消息<br><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/fake.png\" alt=\"asd\"></p>\n<p>看来还是有必要好好学习一下的。</p>\n<h2 id=\"下载安装-GPG4win\"><a href=\"#下载安装-GPG4win\" class=\"headerlink\" title=\"下载安装 GPG4win\"></a>下载安装 GPG4win</h2><p>到<a href=\"https://gpg4win.org/download.html\">这里</a>下载 GPG4win。</p>\n<p>注意安装的时候<strong>一定</strong>要把<code>Kleopatra</code>给勾选上，否则需使用 Cli 进行配置。<br><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/gpg_install.png\" alt=\"gpg\"></p>\n<h2 id=\"配置密钥\"><a href=\"#配置密钥\" class=\"headerlink\" title=\"配置密钥\"></a>配置密钥</h2><p>安装完后打开<code>Kleopatra</code>, 点击<code>新建密钥对</code>。</p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/kleo_gen_setting.png\" alt=\"kleo_gen_setting\"></p>\n<p>在弹出的新窗口中,输入名称(可随意, Github 不会管的)和电子邮件地址(电子邮件地址必须与注册 Github 的一致)</p>\n<blockquote>\n<p><code>使用密码句保护生成的密钥</code> 相当于针对 GPG 签名的最后一把锁 | 按自己情况勾选</p>\n</blockquote>\n<p>填好后, 点击高级设置</p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/kleo_advanced.png\" alt=\"kleo_advanced\"></p>\n<ul>\n<li>将密钥类型设置为<code>RSA</code></li>\n<li>将密钥长度设置为<code>2048</code> (两个都是)</li>\n<li>有效期按自己喜好设置</li>\n</ul>\n<p>最后点击<code>下一步</code>你的密钥就生成完成了</p>\n<h2 id=\"向-Github-添加密钥\"><a href=\"#向-Github-添加密钥\" class=\"headerlink\" title=\"向 Github 添加密钥\"></a>向 Github 添加密钥</h2><p>在 Kleopatra 主界面中, 右键单击你刚刚生成的密钥, 选择<code>导出...</code></p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/export_key.png\" alt=\"export_key\"></p>\n<p>将<code>asc</code>后缀的公钥保存好, 打开 Github 的<code>settings</code>页面, 点击<code>Add SSH Key</code>把你的公钥添加进去</p>\n<h2 id=\"本地-git-设置\"><a href=\"#本地-git-设置\" class=\"headerlink\" title=\"本地 git 设置\"></a>本地 git 设置</h2><p>先得去获取你 GPG 密钥的指纹, 再打开 Kleopatra, 右键你的密钥选择<code>细节</code></p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/kleo_fingerprint.png\" alt=\"kleo_fingerprint\"></p>\n<p>将<code>指纹</code>复制下来即可</p>\n<p>之后的操作就相当简单了, 如下</p>\n<p>打开<code>git cli</code> 输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.signkey &#123;指纹(去掉空格)&#125;</span><br><span class=\"line\">git config --global user.gpgsign <span class=\"literal\">true</span></span><br><span class=\"line\">// 这会对所有仓库生效</span><br><span class=\"line\">git config user.gpgsign <span class=\"literal\">true</span></span><br><span class=\"line\">// 仅对该仓库生效</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p><code>No Secret Key</code><br><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/no_secret_key.png\" alt=\"no_secret_key\"></p>\n<p>这是由于 git 默认使用的 gpg 程序并非我们先前安装的那一个，故采用<br><code>git config --global gpg.program &quot;&#123;安装目录\\bin\\gpg.exe&#125;&quot;</code><br>来设置 gpg.program。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>设置密钥密码过期时间</p>\n<p>打开 Kleopatra，选择<code>设置</code> &gt; <code>配置Kleopatra</code> &gt; <code>GnuPG</code> &gt; <code>Private Key</code> &gt; <code>Expire cached PINs after N Seconds</code></p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/expire_setting.png\" alt=\"expire_setting\"></p>\n<p>填入<code>604800</code>即可，单位为秒，默认为<code>0</code>，即永不过期。</p>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://www.liesauer.net/blog/post/sign-git-commit-with-gpg-under-windows.html\">https://www.liesauer.net/blog/post/sign-git-commit-with-gpg-under-windows.html</a><br>[2] <a href=\"https://blog.sdlsj.net/archives/git/windows-sign-git-commit-with-gpg/\">https://blog.sdlsj.net/archives/git/windows-sign-git-commit-with-gpg/</a></p>\n","site":{"data":{}},"length":508,"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以前完全不签名的我，今天看到这个消息<br><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/fake.png\" alt=\"asd\"></p>\n<p>看来还是有必要好好学习一下的。</p>\n<h2 id=\"下载安装-GPG4win\"><a href=\"#下载安装-GPG4win\" class=\"headerlink\" title=\"下载安装 GPG4win\"></a>下载安装 GPG4win</h2><p>到<a href=\"https://gpg4win.org/download.html\">这里</a>下载 GPG4win。</p>\n<p>注意安装的时候<strong>一定</strong>要把<code>Kleopatra</code>给勾选上，否则需使用 Cli 进行配置。<br><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/gpg_install.png\" alt=\"gpg\"></p>\n<h2 id=\"配置密钥\"><a href=\"#配置密钥\" class=\"headerlink\" title=\"配置密钥\"></a>配置密钥</h2><p>安装完后打开<code>Kleopatra</code>, 点击<code>新建密钥对</code>。</p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/kleo_gen_setting.png\" alt=\"kleo_gen_setting\"></p>\n<p>在弹出的新窗口中,输入名称(可随意, Github 不会管的)和电子邮件地址(电子邮件地址必须与注册 Github 的一致)</p>\n<blockquote>\n<p><code>使用密码句保护生成的密钥</code> 相当于针对 GPG 签名的最后一把锁 | 按自己情况勾选</p>\n</blockquote>\n<p>填好后, 点击高级设置</p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/kleo_advanced.png\" alt=\"kleo_advanced\"></p>\n<ul>\n<li>将密钥类型设置为<code>RSA</code></li>\n<li>将密钥长度设置为<code>2048</code> (两个都是)</li>\n<li>有效期按自己喜好设置</li>\n</ul>\n<p>最后点击<code>下一步</code>你的密钥就生成完成了</p>\n<h2 id=\"向-Github-添加密钥\"><a href=\"#向-Github-添加密钥\" class=\"headerlink\" title=\"向 Github 添加密钥\"></a>向 Github 添加密钥</h2><p>在 Kleopatra 主界面中, 右键单击你刚刚生成的密钥, 选择<code>导出...</code></p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/export_key.png\" alt=\"export_key\"></p>\n<p>将<code>asc</code>后缀的公钥保存好, 打开 Github 的<code>settings</code>页面, 点击<code>Add SSH Key</code>把你的公钥添加进去</p>\n<h2 id=\"本地-git-设置\"><a href=\"#本地-git-设置\" class=\"headerlink\" title=\"本地 git 设置\"></a>本地 git 设置</h2><p>先得去获取你 GPG 密钥的指纹, 再打开 Kleopatra, 右键你的密钥选择<code>细节</code></p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/kleo_fingerprint.png\" alt=\"kleo_fingerprint\"></p>\n<p>将<code>指纹</code>复制下来即可</p>\n<p>之后的操作就相当简单了, 如下</p>\n<p>打开<code>git cli</code> 输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.signkey &#123;指纹(去掉空格)&#125;</span><br><span class=\"line\">git config --global user.gpgsign <span class=\"literal\">true</span></span><br><span class=\"line\">// 这会对所有仓库生效</span><br><span class=\"line\">git config user.gpgsign <span class=\"literal\">true</span></span><br><span class=\"line\">// 仅对该仓库生效</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p><code>No Secret Key</code><br><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/no_secret_key.png\" alt=\"no_secret_key\"></p>\n<p>这是由于 git 默认使用的 gpg 程序并非我们先前安装的那一个，故采用<br><code>git config --global gpg.program &quot;&#123;安装目录\\bin\\gpg.exe&#125;&quot;</code><br>来设置 gpg.program。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>设置密钥密码过期时间</p>\n<p>打开 Kleopatra，选择<code>设置</code> &gt; <code>配置Kleopatra</code> &gt; <code>GnuPG</code> &gt; <code>Private Key</code> &gt; <code>Expire cached PINs after N Seconds</code></p>\n<p><img src=\"/2022/01/29/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8Dcommit%E8%AE%B0%E5%BD%95/expire_setting.png\" alt=\"expire_setting\"></p>\n<p>填入<code>604800</code>即可，单位为秒，默认为<code>0</code>，即永不过期。</p>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://www.liesauer.net/blog/post/sign-git-commit-with-gpg-under-windows.html\">https://www.liesauer.net/blog/post/sign-git-commit-with-gpg-under-windows.html</a><br>[2] <a href=\"https://blog.sdlsj.net/archives/git/windows-sign-git-commit-with-gpg/\">https://blog.sdlsj.net/archives/git/windows-sign-git-commit-with-gpg/</a></p>\n"},{"title":"使用John the Ripper破解压缩文件密码","date":"2022-02-03T08:18:28.000Z","_content":"\n## 前言\n\n春节已至，正想找几本书来提升一下自己。好不容易找到的pdf却又被`ZipCrypto`加密，只好去网上碰碰运气，结果发现了这个工具，叫做[John The Ripper](https://www.openwall.com/john/)，它是一个非常强大的破解~~压缩文件~~密码的工具。\n\n## 准备工作\n\n- 被加密的压缩文件 （zip、rar均可）  \n  本文中假设为 `D:\\encrypted.zip`\n\n- John The Ripper 预编译可执行文件，可以通过[这个链接](https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win64.zip)下载 1.9.0版本 （Windows）  \n\n## 获取加密压缩包的哈希值\n\n解压 John The Ripper 压缩包，在 `..\\john-1.9.0-jumbo-1-win64\\run` 目录下启动使用 `cmd` 或者 `Windows Terminal` 执行以下命令：\n\n```bash\n    .\\zip2john.exe \"D:\\encrypted.zip\" > \"D:\\encrypted.zip.hash\"\n```\n\n> 如果是 `rar` 文件则使用 `rar2john.exe`\n\n执行后会在你指定的目录下生成一个 `encrypted.zip.hash` 文件，有着几倍于源压缩文件的大小。\n\n如果你使用`Windows Terminal`执行上述操作, 则导出的文件可能采用UTF-16编码，需要转换为UTF-8编码才能进行破解。\n\n我这里采用VSC进行编码转换。右击哈希文件使用VSC打开，点击右下角\"UTF-16LE\"，在弹出来的选项中选择\"通过编码保存\"，最后选择`UTF-8 utf-8`即可。\n\n![change_encode](change_encode.png)\n\n## 通过哈希值查找密码\n\n在先前的终端中输入以下命令：\n\n```bash\n    .\\john.exe \"D:\\encrypted.zip.hash\"\n```\n\n破解就会开始了。\n\n![crack](crack.png)\n\n如图所示，文件名前面的字符（绿色标记）就是压缩文件密码。至此破解已完成。\n\n## 破解相关\n\n破解所需时间与密码位数关系大致如下：  \n**(密码仅由数字和字母组成)**\n\n> E[6位密码] = 0.5 × (62^6 / (2.6 × 10^8)) = 218 s\n  E[7位密码] = 0.5 × (62^7 / (2.6 × 10^8)) = 13545 s = 3.76 小时\n  E[8位密码] = 0.5 × (62^8 / (2.6 × 10^8)) = 839770 s = 9.71 天\n  E[9位密码] = 0.5 × (62^9 / (2.6 × 10^8)) = 21834011 s = 252.71 天\n  E[10位密码] = 0.5 × (62^10 / (2.6 × 10^8)) = 1,353,708,655 s = 42.93 年\n\n*(所以太长的就还是不要考虑了*\n\n##### 电子书是...\n\n书是从[板栗](http://blogss.cn/)上整的。是二次收费分发，所以就直接破解掉。\n\n## 参考链接\n\n[1] <https://zhuanlan.zhihu.com/p/129855130>\n[2] <https://dfir.science/2014/07/how-to-cracking-zip-and-rar-protected.html>\n","source":"_posts/使用John-The-Ripper破解压缩文件密码.md","raw":"---\ntitle: 使用John The Ripper破解压缩文件密码\ndate: 2022-02-03 16:18:28\ntags: \n  - crack\n---\n\n## 前言\n\n春节已至，正想找几本书来提升一下自己。好不容易找到的pdf却又被`ZipCrypto`加密，只好去网上碰碰运气，结果发现了这个工具，叫做[John The Ripper](https://www.openwall.com/john/)，它是一个非常强大的破解~~压缩文件~~密码的工具。\n\n## 准备工作\n\n- 被加密的压缩文件 （zip、rar均可）  \n  本文中假设为 `D:\\encrypted.zip`\n\n- John The Ripper 预编译可执行文件，可以通过[这个链接](https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win64.zip)下载 1.9.0版本 （Windows）  \n\n## 获取加密压缩包的哈希值\n\n解压 John The Ripper 压缩包，在 `..\\john-1.9.0-jumbo-1-win64\\run` 目录下启动使用 `cmd` 或者 `Windows Terminal` 执行以下命令：\n\n```bash\n    .\\zip2john.exe \"D:\\encrypted.zip\" > \"D:\\encrypted.zip.hash\"\n```\n\n> 如果是 `rar` 文件则使用 `rar2john.exe`\n\n执行后会在你指定的目录下生成一个 `encrypted.zip.hash` 文件，有着几倍于源压缩文件的大小。\n\n如果你使用`Windows Terminal`执行上述操作, 则导出的文件可能采用UTF-16编码，需要转换为UTF-8编码才能进行破解。\n\n我这里采用VSC进行编码转换。右击哈希文件使用VSC打开，点击右下角\"UTF-16LE\"，在弹出来的选项中选择\"通过编码保存\"，最后选择`UTF-8 utf-8`即可。\n\n![change_encode](change_encode.png)\n\n## 通过哈希值查找密码\n\n在先前的终端中输入以下命令：\n\n```bash\n    .\\john.exe \"D:\\encrypted.zip.hash\"\n```\n\n破解就会开始了。\n\n![crack](crack.png)\n\n如图所示，文件名前面的字符（绿色标记）就是压缩文件密码。至此破解已完成。\n\n## 破解相关\n\n破解所需时间与密码位数关系大致如下：  \n**(密码仅由数字和字母组成)**\n\n> E[6位密码] = 0.5 × (62^6 / (2.6 × 10^8)) = 218 s\n  E[7位密码] = 0.5 × (62^7 / (2.6 × 10^8)) = 13545 s = 3.76 小时\n  E[8位密码] = 0.5 × (62^8 / (2.6 × 10^8)) = 839770 s = 9.71 天\n  E[9位密码] = 0.5 × (62^9 / (2.6 × 10^8)) = 21834011 s = 252.71 天\n  E[10位密码] = 0.5 × (62^10 / (2.6 × 10^8)) = 1,353,708,655 s = 42.93 年\n\n*(所以太长的就还是不要考虑了*\n\n##### 电子书是...\n\n书是从[板栗](http://blogss.cn/)上整的。是二次收费分发，所以就直接破解掉。\n\n## 参考链接\n\n[1] <https://zhuanlan.zhihu.com/p/129855130>\n[2] <https://dfir.science/2014/07/how-to-cracking-zip-and-rar-protected.html>\n","slug":"使用John-The-Ripper破解压缩文件密码","published":1,"updated":"2023-08-05T06:14:33.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewv0000x2qbh2xdu2jjb","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>春节已至，正想找几本书来提升一下自己。好不容易找到的pdf却又被<code>ZipCrypto</code>加密，只好去网上碰碰运气，结果发现了这个工具，叫做<a href=\"https://www.openwall.com/john/\">John The Ripper</a>，它是一个非常强大的破解<del>压缩文件</del>密码的工具。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p>被加密的压缩文件 （zip、rar均可）<br>本文中假设为 <code>D:\\encrypted.zip</code></p>\n</li>\n<li><p>John The Ripper 预编译可执行文件，可以通过<a href=\"https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win64.zip\">这个链接</a>下载 1.9.0版本 （Windows）  </p>\n</li>\n</ul>\n<h2 id=\"获取加密压缩包的哈希值\"><a href=\"#获取加密压缩包的哈希值\" class=\"headerlink\" title=\"获取加密压缩包的哈希值\"></a>获取加密压缩包的哈希值</h2><p>解压 John The Ripper 压缩包，在 <code>..\\john-1.9.0-jumbo-1-win64\\run</code> 目录下启动使用 <code>cmd</code> 或者 <code>Windows Terminal</code> 执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\zip2john.exe <span class=\"string\">&quot;D:\\encrypted.zip&quot;</span> &gt; <span class=\"string\">&quot;D:\\encrypted.zip.hash&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是 <code>rar</code> 文件则使用 <code>rar2john.exe</code></p>\n</blockquote>\n<p>执行后会在你指定的目录下生成一个 <code>encrypted.zip.hash</code> 文件，有着几倍于源压缩文件的大小。</p>\n<p>如果你使用<code>Windows Terminal</code>执行上述操作, 则导出的文件可能采用UTF-16编码，需要转换为UTF-8编码才能进行破解。</p>\n<p>我这里采用VSC进行编码转换。右击哈希文件使用VSC打开，点击右下角”UTF-16LE”，在弹出来的选项中选择”通过编码保存”，最后选择<code>UTF-8 utf-8</code>即可。</p>\n<p><img src=\"/2022/02/03/%E4%BD%BF%E7%94%A8John-The-Ripper%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81/change_encode.png\" alt=\"change_encode\"></p>\n<h2 id=\"通过哈希值查找密码\"><a href=\"#通过哈希值查找密码\" class=\"headerlink\" title=\"通过哈希值查找密码\"></a>通过哈希值查找密码</h2><p>在先前的终端中输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\john.exe <span class=\"string\">&quot;D:\\encrypted.zip.hash&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>破解就会开始了。</p>\n<p><img src=\"/2022/02/03/%E4%BD%BF%E7%94%A8John-The-Ripper%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81/crack.png\" alt=\"crack\"></p>\n<p>如图所示，文件名前面的字符（绿色标记）就是压缩文件密码。至此破解已完成。</p>\n<h2 id=\"破解相关\"><a href=\"#破解相关\" class=\"headerlink\" title=\"破解相关\"></a>破解相关</h2><p>破解所需时间与密码位数关系大致如下：<br><strong>(密码仅由数字和字母组成)</strong></p>\n<blockquote>\n<p>E[6位密码] = 0.5 × (62^6 / (2.6 × 10^8)) = 218 s<br>  E[7位密码] = 0.5 × (62^7 / (2.6 × 10^8)) = 13545 s = 3.76 小时<br>  E[8位密码] = 0.5 × (62^8 / (2.6 × 10^8)) = 839770 s = 9.71 天<br>  E[9位密码] = 0.5 × (62^9 / (2.6 × 10^8)) = 21834011 s = 252.71 天<br>  E[10位密码] = 0.5 × (62^10 / (2.6 × 10^8)) = 1,353,708,655 s = 42.93 年</p>\n</blockquote>\n<p><em>(所以太长的就还是不要考虑了</em></p>\n<h5 id=\"电子书是…\"><a href=\"#电子书是…\" class=\"headerlink\" title=\"电子书是…\"></a>电子书是…</h5><p>书是从<a href=\"http://blogss.cn/\">板栗</a>上整的。是二次收费分发，所以就直接破解掉。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/129855130\">https://zhuanlan.zhihu.com/p/129855130</a><br>[2] <a href=\"https://dfir.science/2014/07/how-to-cracking-zip-and-rar-protected.html\">https://dfir.science/2014/07/how-to-cracking-zip-and-rar-protected.html</a></p>\n","site":{"data":{}},"length":548,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>春节已至，正想找几本书来提升一下自己。好不容易找到的pdf却又被<code>ZipCrypto</code>加密，只好去网上碰碰运气，结果发现了这个工具，叫做<a href=\"https://www.openwall.com/john/\">John The Ripper</a>，它是一个非常强大的破解<del>压缩文件</del>密码的工具。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p>被加密的压缩文件 （zip、rar均可）<br>本文中假设为 <code>D:\\encrypted.zip</code></p>\n</li>\n<li><p>John The Ripper 预编译可执行文件，可以通过<a href=\"https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win64.zip\">这个链接</a>下载 1.9.0版本 （Windows）  </p>\n</li>\n</ul>\n<h2 id=\"获取加密压缩包的哈希值\"><a href=\"#获取加密压缩包的哈希值\" class=\"headerlink\" title=\"获取加密压缩包的哈希值\"></a>获取加密压缩包的哈希值</h2><p>解压 John The Ripper 压缩包，在 <code>..\\john-1.9.0-jumbo-1-win64\\run</code> 目录下启动使用 <code>cmd</code> 或者 <code>Windows Terminal</code> 执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\zip2john.exe <span class=\"string\">&quot;D:\\encrypted.zip&quot;</span> &gt; <span class=\"string\">&quot;D:\\encrypted.zip.hash&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果是 <code>rar</code> 文件则使用 <code>rar2john.exe</code></p>\n</blockquote>\n<p>执行后会在你指定的目录下生成一个 <code>encrypted.zip.hash</code> 文件，有着几倍于源压缩文件的大小。</p>\n<p>如果你使用<code>Windows Terminal</code>执行上述操作, 则导出的文件可能采用UTF-16编码，需要转换为UTF-8编码才能进行破解。</p>\n<p>我这里采用VSC进行编码转换。右击哈希文件使用VSC打开，点击右下角”UTF-16LE”，在弹出来的选项中选择”通过编码保存”，最后选择<code>UTF-8 utf-8</code>即可。</p>\n<p><img src=\"/2022/02/03/%E4%BD%BF%E7%94%A8John-The-Ripper%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81/change_encode.png\" alt=\"change_encode\"></p>\n<h2 id=\"通过哈希值查找密码\"><a href=\"#通过哈希值查找密码\" class=\"headerlink\" title=\"通过哈希值查找密码\"></a>通过哈希值查找密码</h2><p>在先前的终端中输入以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.\\john.exe <span class=\"string\">&quot;D:\\encrypted.zip.hash&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>破解就会开始了。</p>\n<p><img src=\"/2022/02/03/%E4%BD%BF%E7%94%A8John-The-Ripper%E7%A0%B4%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E5%AF%86%E7%A0%81/crack.png\" alt=\"crack\"></p>\n<p>如图所示，文件名前面的字符（绿色标记）就是压缩文件密码。至此破解已完成。</p>\n<h2 id=\"破解相关\"><a href=\"#破解相关\" class=\"headerlink\" title=\"破解相关\"></a>破解相关</h2><p>破解所需时间与密码位数关系大致如下：<br><strong>(密码仅由数字和字母组成)</strong></p>\n<blockquote>\n<p>E[6位密码] = 0.5 × (62^6 / (2.6 × 10^8)) = 218 s<br>  E[7位密码] = 0.5 × (62^7 / (2.6 × 10^8)) = 13545 s = 3.76 小时<br>  E[8位密码] = 0.5 × (62^8 / (2.6 × 10^8)) = 839770 s = 9.71 天<br>  E[9位密码] = 0.5 × (62^9 / (2.6 × 10^8)) = 21834011 s = 252.71 天<br>  E[10位密码] = 0.5 × (62^10 / (2.6 × 10^8)) = 1,353,708,655 s = 42.93 年</p>\n</blockquote>\n<p><em>(所以太长的就还是不要考虑了</em></p>\n<h5 id=\"电子书是…\"><a href=\"#电子书是…\" class=\"headerlink\" title=\"电子书是…\"></a>电子书是…</h5><p>书是从<a href=\"http://blogss.cn/\">板栗</a>上整的。是二次收费分发，所以就直接破解掉。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/129855130\">https://zhuanlan.zhihu.com/p/129855130</a><br>[2] <a href=\"https://dfir.science/2014/07/how-to-cracking-zip-and-rar-protected.html\">https://dfir.science/2014/07/how-to-cracking-zip-and-rar-protected.html</a></p>\n"},{"title":"在 Termux 上部署 VSCode Codespace","date":"2021-09-06T01:54:31.000Z","_content":"\n## 前言\n\nVSCode 作为一款轻量级的代码编辑器, 将其部署在移动平台上来运行简单代码是再好不过的选择了.\n\n## 安装步骤\n\n打开你在[F-droid](https://f-droid.org/en/packages/com.termux/)或[GPlay](https://play.google.com/store/apps/details?id=com.termux&hl=zh&gl=US)商店上下载的 Termux.\n\n1. 更换镜像源 (可选)\n\n   > 以下参考 Tuna 站的[教程](https://mirrors.tuna.tsinghua.edu.cn/help/termux/)\n\n   - 输入 `termux-change-repo` 在图形界面下手动使用方向键来选择要切换到的源.\n\n   - 使用如下命令来切换源\n\n     ```shell\n         sed -i 's@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@' $PREFIX/etc/apt/sources.list\n\n         sed -i 's@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@' $PREFIX/etc/apt/sources.list.d/game.list\n\n         sed -i 's@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@' $PREFIX/etc/apt/sources.list.d/science.list\n\n         apt update && apt upgrade\n     ```\n\n   - 手动修改 (不推荐)\n\n2. 升级程序包\n\n    ```shell\n        pkg update\n    ```\n\n3. 安装 code-server 必要依赖\n\n    ```shell\n        pkg install -y python nodejs yarn\n    ```\n\n    > **参见你自己的情况!**\n\n    如 `python` 无效就试试 `python3`\n\n3. 安装 code-server\n\n    ```shell\n        yarn global add code-server\n    ```\n\n    > 该步骤需要较长时间, 请耐心等待\n\n4. 修复 VSCode 依赖的 spdlog\n\n    ```shell\n        cd ~/.config/yarn/global/node_modules/code-server/lib/vscode/node_modules/spdlog/\n        nano binding.gyp\n    ```\n\n    使用 `nano` 或 `vim` 编辑 binging.gyp 文件  \n    将 `\"target_name\": \"spdlog\"`一行的下面添加 `\"libraries\": [ \"-latomic\" ]`\n\n    修改过后的文件如下所示:\n\n    ```gyp\n        \"targets\": [{\n            \"target_name\": \"spdlog\",\n            \"libraries\": [ \"-latomic\" ],\n            \"sources\": [\n                    \"src/main.cc\",\n                    \"src/logger.cc\"\n            ],\n    ```\n\n    别忘了保存退出\n\n5. 重新编译 spdlog\n\n    > 不用`cd`,在当前目录执行即可\n\n    ```shell\n        npm install\n    ```\n\n6. 启动 code-server\n\n    ```shell\n        cd ~\n        code-server --auth none --disable-telemetry\n    ```\n\n    之后就可以在浏览器访问 http://localhost:8080 来打开 VSCode 了\n\n## 其他配置\n\n- 在其它设备上也使用 VSCode  \n  当然不是让你再重装一遍,而是使用如下启动方式\n\n    ```shell\n        code-server --bind-addr 0.0.0.0:8080 --disable-telemetry\n    ```\n\n    登陆密码可以在 `~/.config/code-server/config.yaml` 找到\n\n- 启用 HTTPS 功能\n\n    ```shell\n        pkg install openssl-tool\n        code-server --bind-addr 0.0.0.0:8080 --cert --disable-telemetry\n    ```\n\n    Termux便会针对VSC自动生成https证书了\n\n## 后记 2022/04/09\n\n在酷安上出现一款`Code FA`的软件, 可以在移动设备上一键部署基于Ubuntu的VSCode，还提供了与其无缝衔接的已包装好的远程桌面。使用起来效果确实不错。  \n下载链接：https://www.coolapk.com/apk/com.nightmare.code 或 https://nightmare.fun/YanTool/resources/VSCode/\n\n原作者博文：https://www.imgeek.org/article/825360015\n","source":"_posts/在termux上部署VSCode Codespace.md","raw":"---\ntitle: 在 Termux 上部署 VSCode Codespace\ndate: 2021-09-06 09:54:31\ntags: \n    - Web\n    - Termux\n    - VSC\n---\n\n## 前言\n\nVSCode 作为一款轻量级的代码编辑器, 将其部署在移动平台上来运行简单代码是再好不过的选择了.\n\n## 安装步骤\n\n打开你在[F-droid](https://f-droid.org/en/packages/com.termux/)或[GPlay](https://play.google.com/store/apps/details?id=com.termux&hl=zh&gl=US)商店上下载的 Termux.\n\n1. 更换镜像源 (可选)\n\n   > 以下参考 Tuna 站的[教程](https://mirrors.tuna.tsinghua.edu.cn/help/termux/)\n\n   - 输入 `termux-change-repo` 在图形界面下手动使用方向键来选择要切换到的源.\n\n   - 使用如下命令来切换源\n\n     ```shell\n         sed -i 's@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@' $PREFIX/etc/apt/sources.list\n\n         sed -i 's@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@' $PREFIX/etc/apt/sources.list.d/game.list\n\n         sed -i 's@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@' $PREFIX/etc/apt/sources.list.d/science.list\n\n         apt update && apt upgrade\n     ```\n\n   - 手动修改 (不推荐)\n\n2. 升级程序包\n\n    ```shell\n        pkg update\n    ```\n\n3. 安装 code-server 必要依赖\n\n    ```shell\n        pkg install -y python nodejs yarn\n    ```\n\n    > **参见你自己的情况!**\n\n    如 `python` 无效就试试 `python3`\n\n3. 安装 code-server\n\n    ```shell\n        yarn global add code-server\n    ```\n\n    > 该步骤需要较长时间, 请耐心等待\n\n4. 修复 VSCode 依赖的 spdlog\n\n    ```shell\n        cd ~/.config/yarn/global/node_modules/code-server/lib/vscode/node_modules/spdlog/\n        nano binding.gyp\n    ```\n\n    使用 `nano` 或 `vim` 编辑 binging.gyp 文件  \n    将 `\"target_name\": \"spdlog\"`一行的下面添加 `\"libraries\": [ \"-latomic\" ]`\n\n    修改过后的文件如下所示:\n\n    ```gyp\n        \"targets\": [{\n            \"target_name\": \"spdlog\",\n            \"libraries\": [ \"-latomic\" ],\n            \"sources\": [\n                    \"src/main.cc\",\n                    \"src/logger.cc\"\n            ],\n    ```\n\n    别忘了保存退出\n\n5. 重新编译 spdlog\n\n    > 不用`cd`,在当前目录执行即可\n\n    ```shell\n        npm install\n    ```\n\n6. 启动 code-server\n\n    ```shell\n        cd ~\n        code-server --auth none --disable-telemetry\n    ```\n\n    之后就可以在浏览器访问 http://localhost:8080 来打开 VSCode 了\n\n## 其他配置\n\n- 在其它设备上也使用 VSCode  \n  当然不是让你再重装一遍,而是使用如下启动方式\n\n    ```shell\n        code-server --bind-addr 0.0.0.0:8080 --disable-telemetry\n    ```\n\n    登陆密码可以在 `~/.config/code-server/config.yaml` 找到\n\n- 启用 HTTPS 功能\n\n    ```shell\n        pkg install openssl-tool\n        code-server --bind-addr 0.0.0.0:8080 --cert --disable-telemetry\n    ```\n\n    Termux便会针对VSC自动生成https证书了\n\n## 后记 2022/04/09\n\n在酷安上出现一款`Code FA`的软件, 可以在移动设备上一键部署基于Ubuntu的VSCode，还提供了与其无缝衔接的已包装好的远程桌面。使用起来效果确实不错。  \n下载链接：https://www.coolapk.com/apk/com.nightmare.code 或 https://nightmare.fun/YanTool/resources/VSCode/\n\n原作者博文：https://www.imgeek.org/article/825360015\n","slug":"在termux上部署VSCode Codespace","published":1,"updated":"2023-08-05T06:14:33.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewv1000z2qbh6ulvdcqd","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>VSCode 作为一款轻量级的代码编辑器, 将其部署在移动平台上来运行简单代码是再好不过的选择了.</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><p>打开你在<a href=\"https://f-droid.org/en/packages/com.termux/\">F-droid</a>或<a href=\"https://play.google.com/store/apps/details?id=com.termux&hl=zh&gl=US\">GPlay</a>商店上下载的 Termux.</p>\n<ol>\n<li><p>更换镜像源 (可选)</p>\n<blockquote>\n<p>以下参考 Tuna 站的<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/termux/\">教程</a></p>\n</blockquote>\n<ul>\n<li><p>输入 <code>termux-change-repo</code> 在图形界面下手动使用方向键来选择要切换到的源.</p>\n</li>\n<li><p>使用如下命令来切换源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27; $PREFIX/etc/apt/sources.list.d/game.list</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27; $PREFIX/etc/apt/sources.list.d/science.list</span><br><span class=\"line\"></span><br><span class=\"line\">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure></li>\n<li><p>手动修改 (不推荐)</p>\n</li>\n</ul>\n</li>\n<li><p>升级程序包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg update</span><br></pre></td></tr></table></figure></li>\n<li><p>安装 code-server 必要依赖</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install -y python nodejs yarn</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>参见你自己的情况!</strong></p>\n</blockquote>\n<p> 如 <code>python</code> 无效就试试 <code>python3</code></p>\n</li>\n<li><p>安装 code-server</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add code-server</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该步骤需要较长时间, 请耐心等待</p>\n</blockquote>\n</li>\n<li><p>修复 VSCode 依赖的 spdlog</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.config/yarn/global/node_modules/code-server/lib/vscode/node_modules/spdlog/</span><br><span class=\"line\">nano binding.gyp</span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>nano</code> 或 <code>vim</code> 编辑 binging.gyp 文件<br> 将 <code>&quot;target_name&quot;: &quot;spdlog&quot;</code>一行的下面添加 <code>&quot;libraries&quot;: [ &quot;-latomic&quot; ]</code></p>\n<p> 修改过后的文件如下所示:</p>\n <figure class=\"highlight gyp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;targets&quot;</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target_name&quot;</span>: <span class=\"string\">&quot;spdlog&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;libraries&quot;</span>: [ <span class=\"string\">&quot;-latomic&quot;</span> ],</span><br><span class=\"line\">    <span class=\"string\">&quot;sources&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;src/main.cc&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;src/logger.cc&quot;</span></span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<p> 别忘了保存退出</p>\n</li>\n<li><p>重新编译 spdlog</p>\n<blockquote>\n<p>不用<code>cd</code>,在当前目录执行即可</p>\n</blockquote>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 code-server</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">code-server --auth none --disable-telemetry</span><br></pre></td></tr></table></figure>\n\n<p> 之后就可以在浏览器访问 <a href=\"http://localhost:8080/\">http://localhost:8080</a> 来打开 VSCode 了</p>\n</li>\n</ol>\n<h2 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h2><ul>\n<li><p>在其它设备上也使用 VSCode<br>当然不是让你再重装一遍,而是使用如下启动方式</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-server --bind-addr 0.0.0.0:8080 --disable-telemetry</span><br></pre></td></tr></table></figure>\n\n<p>  登陆密码可以在 <code>~/.config/code-server/config.yaml</code> 找到</p>\n</li>\n<li><p>启用 HTTPS 功能</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssl-tool</span><br><span class=\"line\">code-server --bind-addr 0.0.0.0:8080 --cert --disable-telemetry</span><br></pre></td></tr></table></figure>\n\n<p>  Termux便会针对VSC自动生成https证书了</p>\n</li>\n</ul>\n<h2 id=\"后记-2022-04-09\"><a href=\"#后记-2022-04-09\" class=\"headerlink\" title=\"后记 2022/04/09\"></a>后记 2022/04/09</h2><p>在酷安上出现一款<code>Code FA</code>的软件, 可以在移动设备上一键部署基于Ubuntu的VSCode，还提供了与其无缝衔接的已包装好的远程桌面。使用起来效果确实不错。<br>下载链接：<a href=\"https://www.coolapk.com/apk/com.nightmare.code\">https://www.coolapk.com/apk/com.nightmare.code</a> 或 <a href=\"https://nightmare.fun/YanTool/resources/VSCode/\">https://nightmare.fun/YanTool/resources/VSCode/</a></p>\n<p>原作者博文：<a href=\"https://www.imgeek.org/article/825360015\">https://www.imgeek.org/article/825360015</a></p>\n","site":{"data":{}},"length":559,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>VSCode 作为一款轻量级的代码编辑器, 将其部署在移动平台上来运行简单代码是再好不过的选择了.</p>\n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2><p>打开你在<a href=\"https://f-droid.org/en/packages/com.termux/\">F-droid</a>或<a href=\"https://play.google.com/store/apps/details?id=com.termux&hl=zh&gl=US\">GPlay</a>商店上下载的 Termux.</p>\n<ol>\n<li><p>更换镜像源 (可选)</p>\n<blockquote>\n<p>以下参考 Tuna 站的<a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/termux/\">教程</a></p>\n</blockquote>\n<ul>\n<li><p>输入 <code>termux-change-repo</code> 在图形界面下手动使用方向键来选择要切换到的源.</p>\n</li>\n<li><p>使用如下命令来切换源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &#x27;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&#x27; $PREFIX/etc/apt/sources.list</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&#x27; $PREFIX/etc/apt/sources.list.d/game.list</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&#x27; $PREFIX/etc/apt/sources.list.d/science.list</span><br><span class=\"line\"></span><br><span class=\"line\">apt update &amp;&amp; apt upgrade</span><br></pre></td></tr></table></figure></li>\n<li><p>手动修改 (不推荐)</p>\n</li>\n</ul>\n</li>\n<li><p>升级程序包</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg update</span><br></pre></td></tr></table></figure></li>\n<li><p>安装 code-server 必要依赖</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install -y python nodejs yarn</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>参见你自己的情况!</strong></p>\n</blockquote>\n<p> 如 <code>python</code> 无效就试试 <code>python3</code></p>\n</li>\n<li><p>安装 code-server</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn global add code-server</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该步骤需要较长时间, 请耐心等待</p>\n</blockquote>\n</li>\n<li><p>修复 VSCode 依赖的 spdlog</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/.config/yarn/global/node_modules/code-server/lib/vscode/node_modules/spdlog/</span><br><span class=\"line\">nano binding.gyp</span><br></pre></td></tr></table></figure>\n\n<p> 使用 <code>nano</code> 或 <code>vim</code> 编辑 binging.gyp 文件<br> 将 <code>&quot;target_name&quot;: &quot;spdlog&quot;</code>一行的下面添加 <code>&quot;libraries&quot;: [ &quot;-latomic&quot; ]</code></p>\n<p> 修改过后的文件如下所示:</p>\n <figure class=\"highlight gyp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;targets&quot;</span>: [&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;target_name&quot;</span>: <span class=\"string\">&quot;spdlog&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;libraries&quot;</span>: [ <span class=\"string\">&quot;-latomic&quot;</span> ],</span><br><span class=\"line\">    <span class=\"string\">&quot;sources&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;src/main.cc&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;src/logger.cc&quot;</span></span><br><span class=\"line\">    ],</span><br></pre></td></tr></table></figure>\n\n<p> 别忘了保存退出</p>\n</li>\n<li><p>重新编译 spdlog</p>\n<blockquote>\n<p>不用<code>cd</code>,在当前目录执行即可</p>\n</blockquote>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure></li>\n<li><p>启动 code-server</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">code-server --auth none --disable-telemetry</span><br></pre></td></tr></table></figure>\n\n<p> 之后就可以在浏览器访问 <a href=\"http://localhost:8080/\">http://localhost:8080</a> 来打开 VSCode 了</p>\n</li>\n</ol>\n<h2 id=\"其他配置\"><a href=\"#其他配置\" class=\"headerlink\" title=\"其他配置\"></a>其他配置</h2><ul>\n<li><p>在其它设备上也使用 VSCode<br>当然不是让你再重装一遍,而是使用如下启动方式</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">code-server --bind-addr 0.0.0.0:8080 --disable-telemetry</span><br></pre></td></tr></table></figure>\n\n<p>  登陆密码可以在 <code>~/.config/code-server/config.yaml</code> 找到</p>\n</li>\n<li><p>启用 HTTPS 功能</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssl-tool</span><br><span class=\"line\">code-server --bind-addr 0.0.0.0:8080 --cert --disable-telemetry</span><br></pre></td></tr></table></figure>\n\n<p>  Termux便会针对VSC自动生成https证书了</p>\n</li>\n</ul>\n<h2 id=\"后记-2022-04-09\"><a href=\"#后记-2022-04-09\" class=\"headerlink\" title=\"后记 2022/04/09\"></a>后记 2022/04/09</h2><p>在酷安上出现一款<code>Code FA</code>的软件, 可以在移动设备上一键部署基于Ubuntu的VSCode，还提供了与其无缝衔接的已包装好的远程桌面。使用起来效果确实不错。<br>下载链接：<a href=\"https://www.coolapk.com/apk/com.nightmare.code\">https://www.coolapk.com/apk/com.nightmare.code</a> 或 <a href=\"https://nightmare.fun/YanTool/resources/VSCode/\">https://nightmare.fun/YanTool/resources/VSCode/</a></p>\n<p>原作者博文：<a href=\"https://www.imgeek.org/article/825360015\">https://www.imgeek.org/article/825360015</a></p>\n"},{"title":"如何在中 Git 回退版本并提交","date":"2022-01-18T13:43:19.000Z","_content":"\n## 前言\n\ngit作为版本控制工具，回退是必不可少的操作之一。 可很多时候都只是知道有却不会上手操作，与其每次都去查Google不如自己写一篇记录下好了。\n\n## 操作命令\n\n```bash\n    git reset --hard {位置}\n```\n\n看起来相当简单的命令, 解析一下:\n\n-   `--hard` 彻底回退, 本地的文件会改变 (相应的还存在着一个`\"soft\"`)\n\n-   `{位置}` 可以用`HEAD^`之类或者提交的SHA值来代替\n\n## 那我不仅要本地文件回退还要再提交\n\n如果你直接提交 ->\n\n(截图没了) 反正就是不能正常提交的样子, git会贴心的提示你云端库比你本地库要新, 还问你要不要拉取...\n\n### 正解\n\n应该使用\n\n```bash\n    git push --force\n```\n\n>   如果出现无法拉取的奇怪问题, 则执行:  \n    `git fetch --all`  \n    `git reset --hard oringin/{分支名}`\n\n## 后记\n\n我想我还是附上这个链接 [Oh Shit, Git?!](https://ohshitgit.com/zh)  \n对于来这里查看指南的各位还是相当有用的。\n\n## 参考链接\n\n[1] https://blog.csdn.net/xue251248603/article/details/78964011  \n[2] https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192  \n[3] https://blog.csdn.net/yangfengjueqi/article/details/61668381\n","source":"_posts/如何在中git回退版本并提交.md","raw":"---\ntitle: 如何在中 git 回退版本并提交\ndate: 2022-01-18 21:43:19\ntags: \n    - git\n---\n\n## 前言\n\ngit作为版本控制工具，回退是必不可少的操作之一。 可很多时候都只是知道有却不会上手操作，与其每次都去查Google不如自己写一篇记录下好了。\n\n## 操作命令\n\n```bash\n    git reset --hard {位置}\n```\n\n看起来相当简单的命令, 解析一下:\n\n-   `--hard` 彻底回退, 本地的文件会改变 (相应的还存在着一个`\"soft\"`)\n\n-   `{位置}` 可以用`HEAD^`之类或者提交的SHA值来代替\n\n## 那我不仅要本地文件回退还要再提交\n\n如果你直接提交 ->\n\n(截图没了) 反正就是不能正常提交的样子, git会贴心的提示你云端库比你本地库要新, 还问你要不要拉取...\n\n### 正解\n\n应该使用\n\n```bash\n    git push --force\n```\n\n>   如果出现无法拉取的奇怪问题, 则执行:  \n    `git fetch --all`  \n    `git reset --hard oringin/{分支名}`\n\n## 后记\n\n我想我还是附上这个链接 [Oh Shit, Git?!](https://ohshitgit.com/zh)  \n对于来这里查看指南的各位还是相当有用的。\n\n## 参考链接\n\n[1] https://blog.csdn.net/xue251248603/article/details/78964011  \n[2] https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192  \n[3] https://blog.csdn.net/yangfengjueqi/article/details/61668381\n","slug":"如何在中git回退版本并提交","published":1,"updated":"2023-08-05T06:14:33.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewv200122qbhgodf44tl","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>git作为版本控制工具，回退是必不可少的操作之一。 可很多时候都只是知道有却不会上手操作，与其每次都去查Google不如自己写一篇记录下好了。</p>\n<h2 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &#123;位置&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看起来相当简单的命令, 解析一下:</p>\n<ul>\n<li><p>  <code>--hard</code> 彻底回退, 本地的文件会改变 (相应的还存在着一个<code>&quot;soft&quot;</code>)</p>\n</li>\n<li><p>  <code>&#123;位置&#125;</code> 可以用<code>HEAD^</code>之类或者提交的SHA值来代替</p>\n</li>\n</ul>\n<h2 id=\"那我不仅要本地文件回退还要再提交\"><a href=\"#那我不仅要本地文件回退还要再提交\" class=\"headerlink\" title=\"那我不仅要本地文件回退还要再提交\"></a>那我不仅要本地文件回退还要再提交</h2><p>如果你直接提交 -&gt;</p>\n<p>(截图没了) 反正就是不能正常提交的样子, git会贴心的提示你云端库比你本地库要新, 还问你要不要拉取…</p>\n<h3 id=\"正解\"><a href=\"#正解\" class=\"headerlink\" title=\"正解\"></a>正解</h3><p>应该使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  如果出现无法拉取的奇怪问题, 则执行:<br>    <code>git fetch --all</code><br>    <code>git reset --hard oringin/&#123;分支名&#125;</code></p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>我想我还是附上这个链接 <a href=\"https://ohshitgit.com/zh\">Oh Shit, Git?!</a><br>对于来这里查看指南的各位还是相当有用的。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://blog.csdn.net/xue251248603/article/details/78964011\">https://blog.csdn.net/xue251248603/article/details/78964011</a><br>[2] <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192\">https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192</a><br>[3] <a href=\"https://blog.csdn.net/yangfengjueqi/article/details/61668381\">https://blog.csdn.net/yangfengjueqi/article/details/61668381</a></p>\n","site":{"data":{}},"length":287,"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>git作为版本控制工具，回退是必不可少的操作之一。 可很多时候都只是知道有却不会上手操作，与其每次都去查Google不如自己写一篇记录下好了。</p>\n<h2 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &#123;位置&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看起来相当简单的命令, 解析一下:</p>\n<ul>\n<li><p>  <code>--hard</code> 彻底回退, 本地的文件会改变 (相应的还存在着一个<code>&quot;soft&quot;</code>)</p>\n</li>\n<li><p>  <code>&#123;位置&#125;</code> 可以用<code>HEAD^</code>之类或者提交的SHA值来代替</p>\n</li>\n</ul>\n<h2 id=\"那我不仅要本地文件回退还要再提交\"><a href=\"#那我不仅要本地文件回退还要再提交\" class=\"headerlink\" title=\"那我不仅要本地文件回退还要再提交\"></a>那我不仅要本地文件回退还要再提交</h2><p>如果你直接提交 -&gt;</p>\n<p>(截图没了) 反正就是不能正常提交的样子, git会贴心的提示你云端库比你本地库要新, 还问你要不要拉取…</p>\n<h3 id=\"正解\"><a href=\"#正解\" class=\"headerlink\" title=\"正解\"></a>正解</h3><p>应该使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>  如果出现无法拉取的奇怪问题, 则执行:<br>    <code>git fetch --all</code><br>    <code>git reset --hard oringin/&#123;分支名&#125;</code></p>\n</blockquote>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>我想我还是附上这个链接 <a href=\"https://ohshitgit.com/zh\">Oh Shit, Git?!</a><br>对于来这里查看指南的各位还是相当有用的。</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://blog.csdn.net/xue251248603/article/details/78964011\">https://blog.csdn.net/xue251248603/article/details/78964011</a><br>[2] <a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192\">https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192</a><br>[3] <a href=\"https://blog.csdn.net/yangfengjueqi/article/details/61668381\">https://blog.csdn.net/yangfengjueqi/article/details/61668381</a></p>\n"},{"title":"解决Windows蓝牙连接不稳定问题","date":"2022-05-24T13:45:03.000Z","_content":"\n在日常使用WIndows蓝牙连接耳机使用时，经常会出现音频突然出现中断随后变得断断续续或直接失去与设备连接的情况。\n\n## 导致原因\n\n- 有其他设备（如手机）正尝试连接到目前已连接至Windows的设备\n\n- Windows蓝牙适配器的电源设置不正确\n\n## 解决方式\n\n> 本文仅针对后一种问题\n\n- 打开Windows设备管理器界面\n\n- 找到相应的蓝牙适配器（注意：不是已经连接的蓝牙设备，是**适配器**）\n\n![bl_adapter](bl_adapter.png)\n\n- 在“电源管理”选项卡中，选择关闭“允许关闭此设备以节约电源”\n\n![power_setting](power_setting.png)\n\n- 至此问题解决\n\n## 参考链接\n\n[1] https://blog.csdn.net/weixin_51229662/article/details/118640811\n","source":"_posts/解决Windows蓝牙连接不稳定问题.md","raw":"---\ntitle: 解决Windows蓝牙连接不稳定问题\ndate: 2022-05-24 21:45:03\ntags: \n    - Windows\n    - Bluetooth\n---\n\n在日常使用WIndows蓝牙连接耳机使用时，经常会出现音频突然出现中断随后变得断断续续或直接失去与设备连接的情况。\n\n## 导致原因\n\n- 有其他设备（如手机）正尝试连接到目前已连接至Windows的设备\n\n- Windows蓝牙适配器的电源设置不正确\n\n## 解决方式\n\n> 本文仅针对后一种问题\n\n- 打开Windows设备管理器界面\n\n- 找到相应的蓝牙适配器（注意：不是已经连接的蓝牙设备，是**适配器**）\n\n![bl_adapter](bl_adapter.png)\n\n- 在“电源管理”选项卡中，选择关闭“允许关闭此设备以节约电源”\n\n![power_setting](power_setting.png)\n\n- 至此问题解决\n\n## 参考链接\n\n[1] https://blog.csdn.net/weixin_51229662/article/details/118640811\n","slug":"解决Windows蓝牙连接不稳定问题","published":1,"updated":"2023-08-05T06:14:33.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewv200132qbhbfuogq2i","content":"<p>在日常使用WIndows蓝牙连接耳机使用时，经常会出现音频突然出现中断随后变得断断续续或直接失去与设备连接的情况。</p>\n<h2 id=\"导致原因\"><a href=\"#导致原因\" class=\"headerlink\" title=\"导致原因\"></a>导致原因</h2><ul>\n<li><p>有其他设备（如手机）正尝试连接到目前已连接至Windows的设备</p>\n</li>\n<li><p>Windows蓝牙适配器的电源设置不正确</p>\n</li>\n</ul>\n<h2 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h2><blockquote>\n<p>本文仅针对后一种问题</p>\n</blockquote>\n<ul>\n<li><p>打开Windows设备管理器界面</p>\n</li>\n<li><p>找到相应的蓝牙适配器（注意：不是已经连接的蓝牙设备，是<strong>适配器</strong>）</p>\n</li>\n</ul>\n<p><img src=\"/2022/05/24/%E8%A7%A3%E5%86%B3Windows%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/bl_adapter.png\" alt=\"bl_adapter\"></p>\n<ul>\n<li>在“电源管理”选项卡中，选择关闭“允许关闭此设备以节约电源”</li>\n</ul>\n<p><img src=\"/2022/05/24/%E8%A7%A3%E5%86%B3Windows%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/power_setting.png\" alt=\"power_setting\"></p>\n<ul>\n<li>至此问题解决</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://blog.csdn.net/weixin_51229662/article/details/118640811\">https://blog.csdn.net/weixin_51229662/article/details/118640811</a></p>\n","site":{"data":{}},"length":186,"excerpt":"","more":"<p>在日常使用WIndows蓝牙连接耳机使用时，经常会出现音频突然出现中断随后变得断断续续或直接失去与设备连接的情况。</p>\n<h2 id=\"导致原因\"><a href=\"#导致原因\" class=\"headerlink\" title=\"导致原因\"></a>导致原因</h2><ul>\n<li><p>有其他设备（如手机）正尝试连接到目前已连接至Windows的设备</p>\n</li>\n<li><p>Windows蓝牙适配器的电源设置不正确</p>\n</li>\n</ul>\n<h2 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h2><blockquote>\n<p>本文仅针对后一种问题</p>\n</blockquote>\n<ul>\n<li><p>打开Windows设备管理器界面</p>\n</li>\n<li><p>找到相应的蓝牙适配器（注意：不是已经连接的蓝牙设备，是<strong>适配器</strong>）</p>\n</li>\n</ul>\n<p><img src=\"/2022/05/24/%E8%A7%A3%E5%86%B3Windows%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/bl_adapter.png\" alt=\"bl_adapter\"></p>\n<ul>\n<li>在“电源管理”选项卡中，选择关闭“允许关闭此设备以节约电源”</li>\n</ul>\n<p><img src=\"/2022/05/24/%E8%A7%A3%E5%86%B3Windows%E8%93%9D%E7%89%99%E8%BF%9E%E6%8E%A5%E4%B8%8D%E7%A8%B3%E5%AE%9A%E9%97%AE%E9%A2%98/power_setting.png\" alt=\"power_setting\"></p>\n<ul>\n<li>至此问题解决</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://blog.csdn.net/weixin_51229662/article/details/118640811\">https://blog.csdn.net/weixin_51229662/article/details/118640811</a></p>\n"},{"title":"记 Rime 输入法在 Manjaro 上的部署及配置","date":"2023-03-31T15:49:12.000Z","excerpt":"Rime 这么棒的输入法引擎不尝试下吗？","_content":"\n## 前言\n\n大概是半年前从 Arch Linux 切换到了 Manjaro 并将其作为 Linux 主力开发系统，而使用的桌面环境——Gnome却对 [fcitx](https://fcitx-im.org/wiki/Fcitx/zh-hans) 的支持并不是很好。要在 Gnome Extension 上安装 IM-KDE 插件还要捣鼓其他设置。听说新的 Gnome（Gnome 43）将 ibus 集成进了 Gnome Desktop ，于是就换掉 fcitx 同时体验一下早有耳闻的 [rime](https://rime.im/) 输入法。\n\n## 安装\n\n1. Manjaro ibus 支持包安装\n\n    启动 “Manjaro Hello” 程序，点击最下方的 “Application/应用程序”，选择这个\n\n    ![manjaro-hello-install](manjaro-hello-install.png)\n\n    然后点击 “UPDATE SYSTEM/升级系统”进行安装。\n\n2. Rime 本体安装\n\n    终端输入\n\n    ```bash\n    yay -S ibus-rime\n    # sudo pacman -S ibus-rime 一样的\n\n    ```\n\n    这样会安装 rime 本体及朙月拼音、地球拼音、注音、五笔等默认输入方案。\n\n    > 具体方案可以到 `~/.config/ibus/rime` 下查看。其他输入方案在[这里](https://github.com/rime/plum#packages)\n\n    重启后，打开 gnome 设置。在键盘选项卡里的“Input Source/输入法”下添加 rime 输入法，并将其他的输入法统统移除。（不包括默认的英文）\n\n    <!-- ![manjaro-hello-install](add-im.png) -->\n\n    ![manjaro-hello-install](keyboard-add.png)\n\n3. Rime 配置\n\n    - `~/.config/ibus/rime` 在下文中称作“配置文件路径”\n\n    ---\n\n    我的配置（仅有 flypy）可以在[这里](https://github.com/NekoRectifier/dot-files/tree/main/.local/share/fcitx5/rime)下载\n\n    1. 「可选」安装 [东风破/Plum](https://github.com/rime/plum) （Rime 配置工具）\n\n        ```bash\n        curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash\n        ```\n\n    > 安装时需要终端全局代理或者使用 [Proxychains](https://github.com/haad/proxychains)类工具。\n\n    2. 「可选」安装其他方案包\n\n        如果你喜欢的方案（如双拼）不在默认的输入方案内，你可能需要使用 plum 来手动安装。\n\n        在执行上条命令的目录下找到 `plum/` 文件夹，进入后输入 `./rime-install double-pinyin`。plum 就会寻找 rime 的配置路径并且将双拼方案添加到 `~/.config/ibus/rime` 路径下。\n\n    3. 配置文件修改\n\n        - 配置文件原理\n\n            配置文件路径内的文件会在按下“部署”时进行编译，并在 `build/` 目录下输出编译后配置。\n            如果配置文件错误，会将有问题的文件移动至 `trash/` 文件夹。\n\n        - 「全局」快捷键\n\n        在 `default.yaml` 里面设置\n\n        ![kdb](kbd.png)\n\n        `key_binder` 定义了翻页及常见的双键快捷键  \n        `ascii_composer` 定义了单键快捷键\n\n        - 「全局」样式设置\n\n        ![rime](rime.png)\n\n        这里定义了 Rime 输入法的部分样式（或者说在 Linux 平台上是大多数）  \n        `horizontal` 定义候选词列表的展示方向。`true` 为水平。\n\n        - 「方案」默认英文（ascii）输入模式\n\n        ![double_pinyin](double_pinyin.png)\n\n        将 `switches` 内的 `ascii_mode` 下 `reset` 的值设为 `1` 即可开启默认恢复英文输入模式的选项。  \n        \n        > 注：一般来说，在Windows上习惯的的中英文切换是通过 ctrl + space 或者 shift 实现在中文/英文的切换。但是在 rime 下有两种输入模式，即 ascii（英文）和用于中文输入的中文模式。在这里更加推荐在 fcitx-configtools 里设置一个 `Keyboard (US)` 选项作为英文输入法，再将 rime 设为默认中文输入模式。如图所示：\n        ![fcitx-configuration](image.png)\n\n        基本上修改如上几项就可以恢复一般输入法的输入体验了。\n\n## 参考链接\n\n[1] <https://zhuanlan.zhihu.com/p/471436833>  \n[2] <https://zhuanlan.zhihu.com/p/91129641>  \n[3] <https://www.cnblogs.com/meetrice/p/5556238.html>  \n[4] <https://github.com/rime/plum#packages>\n","source":"_posts/记-Rime-输入法在-Manjaro-上的部署及配置.md","raw":"---\ntitle: 记 Rime 输入法在 Manjaro 上的部署及配置\ndate: 2023-03-31 23:49:12\ntags: \n  - Linux\n  - Software\nexcerpt: Rime 这么棒的输入法引擎不尝试下吗？\n---\n\n## 前言\n\n大概是半年前从 Arch Linux 切换到了 Manjaro 并将其作为 Linux 主力开发系统，而使用的桌面环境——Gnome却对 [fcitx](https://fcitx-im.org/wiki/Fcitx/zh-hans) 的支持并不是很好。要在 Gnome Extension 上安装 IM-KDE 插件还要捣鼓其他设置。听说新的 Gnome（Gnome 43）将 ibus 集成进了 Gnome Desktop ，于是就换掉 fcitx 同时体验一下早有耳闻的 [rime](https://rime.im/) 输入法。\n\n## 安装\n\n1. Manjaro ibus 支持包安装\n\n    启动 “Manjaro Hello” 程序，点击最下方的 “Application/应用程序”，选择这个\n\n    ![manjaro-hello-install](manjaro-hello-install.png)\n\n    然后点击 “UPDATE SYSTEM/升级系统”进行安装。\n\n2. Rime 本体安装\n\n    终端输入\n\n    ```bash\n    yay -S ibus-rime\n    # sudo pacman -S ibus-rime 一样的\n\n    ```\n\n    这样会安装 rime 本体及朙月拼音、地球拼音、注音、五笔等默认输入方案。\n\n    > 具体方案可以到 `~/.config/ibus/rime` 下查看。其他输入方案在[这里](https://github.com/rime/plum#packages)\n\n    重启后，打开 gnome 设置。在键盘选项卡里的“Input Source/输入法”下添加 rime 输入法，并将其他的输入法统统移除。（不包括默认的英文）\n\n    <!-- ![manjaro-hello-install](add-im.png) -->\n\n    ![manjaro-hello-install](keyboard-add.png)\n\n3. Rime 配置\n\n    - `~/.config/ibus/rime` 在下文中称作“配置文件路径”\n\n    ---\n\n    我的配置（仅有 flypy）可以在[这里](https://github.com/NekoRectifier/dot-files/tree/main/.local/share/fcitx5/rime)下载\n\n    1. 「可选」安装 [东风破/Plum](https://github.com/rime/plum) （Rime 配置工具）\n\n        ```bash\n        curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash\n        ```\n\n    > 安装时需要终端全局代理或者使用 [Proxychains](https://github.com/haad/proxychains)类工具。\n\n    2. 「可选」安装其他方案包\n\n        如果你喜欢的方案（如双拼）不在默认的输入方案内，你可能需要使用 plum 来手动安装。\n\n        在执行上条命令的目录下找到 `plum/` 文件夹，进入后输入 `./rime-install double-pinyin`。plum 就会寻找 rime 的配置路径并且将双拼方案添加到 `~/.config/ibus/rime` 路径下。\n\n    3. 配置文件修改\n\n        - 配置文件原理\n\n            配置文件路径内的文件会在按下“部署”时进行编译，并在 `build/` 目录下输出编译后配置。\n            如果配置文件错误，会将有问题的文件移动至 `trash/` 文件夹。\n\n        - 「全局」快捷键\n\n        在 `default.yaml` 里面设置\n\n        ![kdb](kbd.png)\n\n        `key_binder` 定义了翻页及常见的双键快捷键  \n        `ascii_composer` 定义了单键快捷键\n\n        - 「全局」样式设置\n\n        ![rime](rime.png)\n\n        这里定义了 Rime 输入法的部分样式（或者说在 Linux 平台上是大多数）  \n        `horizontal` 定义候选词列表的展示方向。`true` 为水平。\n\n        - 「方案」默认英文（ascii）输入模式\n\n        ![double_pinyin](double_pinyin.png)\n\n        将 `switches` 内的 `ascii_mode` 下 `reset` 的值设为 `1` 即可开启默认恢复英文输入模式的选项。  \n        \n        > 注：一般来说，在Windows上习惯的的中英文切换是通过 ctrl + space 或者 shift 实现在中文/英文的切换。但是在 rime 下有两种输入模式，即 ascii（英文）和用于中文输入的中文模式。在这里更加推荐在 fcitx-configtools 里设置一个 `Keyboard (US)` 选项作为英文输入法，再将 rime 设为默认中文输入模式。如图所示：\n        ![fcitx-configuration](image.png)\n\n        基本上修改如上几项就可以恢复一般输入法的输入体验了。\n\n## 参考链接\n\n[1] <https://zhuanlan.zhihu.com/p/471436833>  \n[2] <https://zhuanlan.zhihu.com/p/91129641>  \n[3] <https://www.cnblogs.com/meetrice/p/5556238.html>  \n[4] <https://github.com/rime/plum#packages>\n","slug":"记-Rime-输入法在-Manjaro-上的部署及配置","published":1,"updated":"2023-08-05T06:14:33.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkysewv300152qbh5u543nna","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>大概是半年前从 Arch Linux 切换到了 Manjaro 并将其作为 Linux 主力开发系统，而使用的桌面环境——Gnome却对 <a href=\"https://fcitx-im.org/wiki/Fcitx/zh-hans\">fcitx</a> 的支持并不是很好。要在 Gnome Extension 上安装 IM-KDE 插件还要捣鼓其他设置。听说新的 Gnome（Gnome 43）将 ibus 集成进了 Gnome Desktop ，于是就换掉 fcitx 同时体验一下早有耳闻的 <a href=\"https://rime.im/\">rime</a> 输入法。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>Manjaro ibus 支持包安装</p>\n<p> 启动 “Manjaro Hello” 程序，点击最下方的 “Application/应用程序”，选择这个</p>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/manjaro-hello-install.png\" alt=\"manjaro-hello-install\"></p>\n<p> 然后点击 “UPDATE SYSTEM/升级系统”进行安装。</p>\n</li>\n<li><p>Rime 本体安装</p>\n<p> 终端输入</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S ibus-rime</span><br><span class=\"line\"><span class=\"comment\"># sudo pacman -S ibus-rime 一样的</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 这样会安装 rime 本体及朙月拼音、地球拼音、注音、五笔等默认输入方案。</p>\n<blockquote>\n<p>具体方案可以到 <code>~/.config/ibus/rime</code> 下查看。其他输入方案在<a href=\"https://github.com/rime/plum#packages\">这里</a></p>\n</blockquote>\n<p> 重启后，打开 gnome 设置。在键盘选项卡里的“Input Source/输入法”下添加 rime 输入法，并将其他的输入法统统移除。（不包括默认的英文）</p>\n <!-- ![manjaro-hello-install](add-im.png) -->\n\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/keyboard-add.png\" alt=\"manjaro-hello-install\"></p>\n</li>\n<li><p>Rime 配置</p>\n<ul>\n<li><code>~/.config/ibus/rime</code> 在下文中称作“配置文件路径”</li>\n</ul>\n<hr>\n<p> 我的配置（仅有 flypy）可以在<a href=\"https://github.com/NekoRectifier/dot-files/tree/main/.local/share/fcitx5/rime\">这里</a>下载</p>\n<ol>\n<li><p>「可选」安装 <a href=\"https://github.com/rime/plum\">东风破/Plum</a> （Rime 配置工具）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>安装时需要终端全局代理或者使用 <a href=\"https://github.com/haad/proxychains\">Proxychains</a>类工具。</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>「可选」安装其他方案包</p>\n<p> 如果你喜欢的方案（如双拼）不在默认的输入方案内，你可能需要使用 plum 来手动安装。</p>\n<p> 在执行上条命令的目录下找到 <code>plum/</code> 文件夹，进入后输入 <code>./rime-install double-pinyin</code>。plum 就会寻找 rime 的配置路径并且将双拼方案添加到 <code>~/.config/ibus/rime</code> 路径下。</p>\n</li>\n<li><p>配置文件修改</p>\n<ul>\n<li><p>配置文件原理</p>\n<p>  配置文件路径内的文件会在按下“部署”时进行编译，并在 <code>build/</code> 目录下输出编译后配置。<br>  如果配置文件错误，会将有问题的文件移动至 <code>trash/</code> 文件夹。</p>\n</li>\n<li><p>「全局」快捷键</p>\n</li>\n</ul>\n<p> 在 <code>default.yaml</code> 里面设置</p>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/kbd.png\" alt=\"kdb\"></p>\n<p> <code>key_binder</code> 定义了翻页及常见的双键快捷键<br> <code>ascii_composer</code> 定义了单键快捷键</p>\n<ul>\n<li>「全局」样式设置</li>\n</ul>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/rime.png\" alt=\"rime\"></p>\n<p> 这里定义了 Rime 输入法的部分样式（或者说在 Linux 平台上是大多数）<br> <code>horizontal</code> 定义候选词列表的展示方向。<code>true</code> 为水平。</p>\n<ul>\n<li>「方案」默认英文（ascii）输入模式</li>\n</ul>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/double_pinyin.png\" alt=\"double_pinyin\"></p>\n<p> 将 <code>switches</code> 内的 <code>ascii_mode</code> 下 <code>reset</code> 的值设为 <code>1</code> 即可开启默认恢复英文输入模式的选项。  </p>\n<blockquote>\n<p>注：一般来说，在Windows上习惯的的中英文切换是通过 ctrl + space 或者 shift 实现在中文/英文的切换。但是在 rime 下有两种输入模式，即 ascii（英文）和用于中文输入的中文模式。在这里更加推荐在 fcitx-configtools 里设置一个 <code>Keyboard (US)</code> 选项作为英文输入法，再将 rime 设为默认中文输入模式。如图所示：<br> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/image.png\" alt=\"fcitx-configuration\"></p>\n</blockquote>\n<p> 基本上修改如上几项就可以恢复一般输入法的输入体验了。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/471436833\">https://zhuanlan.zhihu.com/p/471436833</a><br>[2] <a href=\"https://zhuanlan.zhihu.com/p/91129641\">https://zhuanlan.zhihu.com/p/91129641</a><br>[3] <a href=\"https://www.cnblogs.com/meetrice/p/5556238.html\">https://www.cnblogs.com/meetrice/p/5556238.html</a><br>[4] <a href=\"https://github.com/rime/plum#packages\">https://github.com/rime/plum#packages</a></p>\n","site":{"data":{}},"length":809,"more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>大概是半年前从 Arch Linux 切换到了 Manjaro 并将其作为 Linux 主力开发系统，而使用的桌面环境——Gnome却对 <a href=\"https://fcitx-im.org/wiki/Fcitx/zh-hans\">fcitx</a> 的支持并不是很好。要在 Gnome Extension 上安装 IM-KDE 插件还要捣鼓其他设置。听说新的 Gnome（Gnome 43）将 ibus 集成进了 Gnome Desktop ，于是就换掉 fcitx 同时体验一下早有耳闻的 <a href=\"https://rime.im/\">rime</a> 输入法。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>Manjaro ibus 支持包安装</p>\n<p> 启动 “Manjaro Hello” 程序，点击最下方的 “Application/应用程序”，选择这个</p>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/manjaro-hello-install.png\" alt=\"manjaro-hello-install\"></p>\n<p> 然后点击 “UPDATE SYSTEM/升级系统”进行安装。</p>\n</li>\n<li><p>Rime 本体安装</p>\n<p> 终端输入</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S ibus-rime</span><br><span class=\"line\"><span class=\"comment\"># sudo pacman -S ibus-rime 一样的</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p> 这样会安装 rime 本体及朙月拼音、地球拼音、注音、五笔等默认输入方案。</p>\n<blockquote>\n<p>具体方案可以到 <code>~/.config/ibus/rime</code> 下查看。其他输入方案在<a href=\"https://github.com/rime/plum#packages\">这里</a></p>\n</blockquote>\n<p> 重启后，打开 gnome 设置。在键盘选项卡里的“Input Source/输入法”下添加 rime 输入法，并将其他的输入法统统移除。（不包括默认的英文）</p>\n <!-- ![manjaro-hello-install](add-im.png) -->\n\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/keyboard-add.png\" alt=\"manjaro-hello-install\"></p>\n</li>\n<li><p>Rime 配置</p>\n<ul>\n<li><code>~/.config/ibus/rime</code> 在下文中称作“配置文件路径”</li>\n</ul>\n<hr>\n<p> 我的配置（仅有 flypy）可以在<a href=\"https://github.com/NekoRectifier/dot-files/tree/main/.local/share/fcitx5/rime\">这里</a>下载</p>\n<ol>\n<li><p>「可选」安装 <a href=\"https://github.com/rime/plum\">东风破/Plum</a> （Rime 配置工具）</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash</span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>安装时需要终端全局代理或者使用 <a href=\"https://github.com/haad/proxychains\">Proxychains</a>类工具。</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>「可选」安装其他方案包</p>\n<p> 如果你喜欢的方案（如双拼）不在默认的输入方案内，你可能需要使用 plum 来手动安装。</p>\n<p> 在执行上条命令的目录下找到 <code>plum/</code> 文件夹，进入后输入 <code>./rime-install double-pinyin</code>。plum 就会寻找 rime 的配置路径并且将双拼方案添加到 <code>~/.config/ibus/rime</code> 路径下。</p>\n</li>\n<li><p>配置文件修改</p>\n<ul>\n<li><p>配置文件原理</p>\n<p>  配置文件路径内的文件会在按下“部署”时进行编译，并在 <code>build/</code> 目录下输出编译后配置。<br>  如果配置文件错误，会将有问题的文件移动至 <code>trash/</code> 文件夹。</p>\n</li>\n<li><p>「全局」快捷键</p>\n</li>\n</ul>\n<p> 在 <code>default.yaml</code> 里面设置</p>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/kbd.png\" alt=\"kdb\"></p>\n<p> <code>key_binder</code> 定义了翻页及常见的双键快捷键<br> <code>ascii_composer</code> 定义了单键快捷键</p>\n<ul>\n<li>「全局」样式设置</li>\n</ul>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/rime.png\" alt=\"rime\"></p>\n<p> 这里定义了 Rime 输入法的部分样式（或者说在 Linux 平台上是大多数）<br> <code>horizontal</code> 定义候选词列表的展示方向。<code>true</code> 为水平。</p>\n<ul>\n<li>「方案」默认英文（ascii）输入模式</li>\n</ul>\n<p> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/double_pinyin.png\" alt=\"double_pinyin\"></p>\n<p> 将 <code>switches</code> 内的 <code>ascii_mode</code> 下 <code>reset</code> 的值设为 <code>1</code> 即可开启默认恢复英文输入模式的选项。  </p>\n<blockquote>\n<p>注：一般来说，在Windows上习惯的的中英文切换是通过 ctrl + space 或者 shift 实现在中文/英文的切换。但是在 rime 下有两种输入模式，即 ascii（英文）和用于中文输入的中文模式。在这里更加推荐在 fcitx-configtools 里设置一个 <code>Keyboard (US)</code> 选项作为英文输入法，再将 rime 设为默认中文输入模式。如图所示：<br> <img src=\"/2023/03/31/%E8%AE%B0-Rime-%E8%BE%93%E5%85%A5%E6%B3%95%E5%9C%A8-Manjaro-%E4%B8%8A%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8F%8A%E9%85%8D%E7%BD%AE/image.png\" alt=\"fcitx-configuration\"></p>\n</blockquote>\n<p> 基本上修改如上几项就可以恢复一般输入法的输入体验了。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/471436833\">https://zhuanlan.zhihu.com/p/471436833</a><br>[2] <a href=\"https://zhuanlan.zhihu.com/p/91129641\">https://zhuanlan.zhihu.com/p/91129641</a><br>[3] <a href=\"https://www.cnblogs.com/meetrice/p/5556238.html\">https://www.cnblogs.com/meetrice/p/5556238.html</a><br>[4] <a href=\"https://github.com/rime/plum#packages\">https://github.com/rime/plum#packages</a></p>\n"},{"title":"在2023年试图 Root 一台 Redmi K20-Pro","date":"2023-10-10T13:48:38.000Z","excerpt":"在 “搞机” 逐渐销声匿迹的当下，还有什么可靠的 Root 方式呢？","_content":"\n# 前言\n\n先前终究还是按耐不住入了二手 iPhone 12 mini，在投入到以卖软件体验为生的苹果的怀抱之后的确少了很多事。再也不用为了各种刷机包和内核着急，也不用再去苦苦寻找大大小小用来提升使用体验的小软件。而且苹果，无论在生态还是动画，使用体验等东西上，可以算得上是让手机回到了它本质的“工具”属性。这样的日子很好，很舒服——直到今天。  \n\n**我需要一台能够模拟位置的设备来实现签到，代跑之类的工作。**  \n\n我看着手边的 iPhone，于是只能把放在抽屉里的 K20 Pro 拿出来，想想其他方法。\n\n# 步骤\n\n## 恢复\n\n凭借着上次刷机的记忆，大概是要把系统恢复到 MIUI 12.5 去以作为各个刷机包的基础底包。于是在[这里](https://www.123pan.com/s/Cff7Vv-M0qnH.html)下载刷机包文件，解压 zip，然后 `./flash-all.sh` 就可以喝水等着完事了。\n\n## 选择系统\n\n实际上在做出 crDroid OS 的选择之前，我尝试了\n\n- 水龙 13 的官改系统\n- CherishOS\n- MIUI 国际版 12.5\n\n对我来说都不太行，并不是说这些系统不好，也可能只是我手上这台有点问题。这些刷机包你可以在[这里](https://www.123pan.com/s/Cff7Vv-w0qnH.html)获取。  \n才刷完crDroid OS，开机之后的给人的体验确实很不一样。简洁的开机动画，干净的桌面，中意的艺术风格，动画也十分流畅，又同时保留了原生原汁原味的 UI 设计。  \n所以我想，就它了。\n\n## Root\n\n> “如果说，刷这个系统的代价就是没有 Root。那么如何决定这个系统的去留还是一个有待商榷的问题。”\n\n是的，这就是我在刷了这个系统（Android 13）后的想法，在 Android 13 上，目前主流的 Rec（TWRP & OrangeFox）都不支持 `/data` 分区解密。而且 我的 `rec` 分区貌似还出了问题，fastboot 刷入的 Rec 无法正常启动。只能靠 `fastboot boot rec.img` 临时用一用。\n\n就在我因为 Magisk 需要刷入 zip 包，可我黑苹果系统上的 fastboot 又不能正常走 sideload 而发愁时，[KernalSU](https://kernelsu.org/guide/what-is-kernelsu.html)出现了。\n\n> 官网解释：  \n> KernelSU is a root solution for Android GKI devices, it works in kernel mode and grant root permission to userspace application directly in kernel space.\n\n抱着试一试的心态，我下载了 KernalSU 的[管理器](https://www.coolapk.com/apk/me.weishu.kernelsu)。结果打开一看：\n\n![kernalsu-manager](kernalsu-manager.png)\n\n不知道出于什么原因，KernalSU 自己就是激活状态。竟然有这种好事，于是顺手安了个 [Zygisk on KernalSU](https://github.com/Dr-TSNG/ZygiskOnKernelSU) 和 Lsposed。（要安装 Lsposed 使用给 magisk 的 zygisk 模式的 zip 包就好，是可以直接使用的）\n\n![lsposed-activated](lsposed-activated.png)\n\n我的系统信息如下：\n\n![system-info](system-version.png)\n\n# 额外\n\n## Fake Location 安装及破解\n\nRoot 的问题解决以后，就要开始想办法解决模拟定位的问题了。\n模拟位置由 FakeLocation 就能搞定，不过可惜的是，这是一款付费软件。所以还需要 [NFG Multi Crack](https://github.com/rockz5555/NFG-Multi-Crack/releases) 来破解掉它。\n\n> NFG 并不能处理 Fake Location 的最新版本破解，因此需要下载 1.3.1.6 版本。  \n> 这是对破解支持的最好的一个版本。 \n\n1. 在 LSP 管理器中激活 NFG 模块，同时作用域中也要包括 “系统框架” 和 “Fake Location”。\n\n2. 打开 NFG 点击 Fake Location 项目右侧的 “关闭” 按钮来激活破解\n\n3. 打开 Fake Location\n\n![](crack.png)\n\n# 参考链接 🔗\n【1】<https://kernelsu.com/lsposed-install>  \n【2】<https://www.youtube.com/watch?v=XX5XgdlAS8E>  \n【3】<https://www.bilibili.com/read/cv22932367>\n","source":"_posts/在2023年试图-root-一台-Redmi-K20-Pro.md","raw":"---\ntitle: 在2023年试图 root 一台 Redmi K20-Pro\ndate: 2023-10-10 21:48:38\ntags: \n  - Root\n  - Android\nexcerpt: 在 “搞机” 逐渐销声匿迹的当下，还有什么可靠的 Root 方式呢？\n---\n\n# 前言\n\n先前终究还是按耐不住入了二手 iPhone 12 mini，在投入到以卖软件体验为生的苹果的怀抱之后的确少了很多事。再也不用为了各种刷机包和内核着急，也不用再去苦苦寻找大大小小用来提升使用体验的小软件。而且苹果，无论在生态还是动画，使用体验等东西上，可以算得上是让手机回到了它本质的“工具”属性。这样的日子很好，很舒服——直到今天。  \n\n**我需要一台能够模拟位置的设备来实现签到，代跑之类的工作。**  \n\n我看着手边的 iPhone，于是只能把放在抽屉里的 K20 Pro 拿出来，想想其他方法。\n\n# 步骤\n\n## 恢复\n\n凭借着上次刷机的记忆，大概是要把系统恢复到 MIUI 12.5 去以作为各个刷机包的基础底包。于是在[这里](https://www.123pan.com/s/Cff7Vv-M0qnH.html)下载刷机包文件，解压 zip，然后 `./flash-all.sh` 就可以喝水等着完事了。\n\n## 选择系统\n\n实际上在做出 crDroid OS 的选择之前，我尝试了\n\n- 水龙 13 的官改系统\n- CherishOS\n- MIUI 国际版 12.5\n\n对我来说都不太行，并不是说这些系统不好，也可能只是我手上这台有点问题。这些刷机包你可以在[这里](https://www.123pan.com/s/Cff7Vv-w0qnH.html)获取。  \n才刷完crDroid OS，开机之后的给人的体验确实很不一样。简洁的开机动画，干净的桌面，中意的艺术风格，动画也十分流畅，又同时保留了原生原汁原味的 UI 设计。  \n所以我想，就它了。\n\n## Root\n\n> “如果说，刷这个系统的代价就是没有 Root。那么如何决定这个系统的去留还是一个有待商榷的问题。”\n\n是的，这就是我在刷了这个系统（Android 13）后的想法，在 Android 13 上，目前主流的 Rec（TWRP & OrangeFox）都不支持 `/data` 分区解密。而且 我的 `rec` 分区貌似还出了问题，fastboot 刷入的 Rec 无法正常启动。只能靠 `fastboot boot rec.img` 临时用一用。\n\n就在我因为 Magisk 需要刷入 zip 包，可我黑苹果系统上的 fastboot 又不能正常走 sideload 而发愁时，[KernalSU](https://kernelsu.org/guide/what-is-kernelsu.html)出现了。\n\n> 官网解释：  \n> KernelSU is a root solution for Android GKI devices, it works in kernel mode and grant root permission to userspace application directly in kernel space.\n\n抱着试一试的心态，我下载了 KernalSU 的[管理器](https://www.coolapk.com/apk/me.weishu.kernelsu)。结果打开一看：\n\n![kernalsu-manager](kernalsu-manager.png)\n\n不知道出于什么原因，KernalSU 自己就是激活状态。竟然有这种好事，于是顺手安了个 [Zygisk on KernalSU](https://github.com/Dr-TSNG/ZygiskOnKernelSU) 和 Lsposed。（要安装 Lsposed 使用给 magisk 的 zygisk 模式的 zip 包就好，是可以直接使用的）\n\n![lsposed-activated](lsposed-activated.png)\n\n我的系统信息如下：\n\n![system-info](system-version.png)\n\n# 额外\n\n## Fake Location 安装及破解\n\nRoot 的问题解决以后，就要开始想办法解决模拟定位的问题了。\n模拟位置由 FakeLocation 就能搞定，不过可惜的是，这是一款付费软件。所以还需要 [NFG Multi Crack](https://github.com/rockz5555/NFG-Multi-Crack/releases) 来破解掉它。\n\n> NFG 并不能处理 Fake Location 的最新版本破解，因此需要下载 1.3.1.6 版本。  \n> 这是对破解支持的最好的一个版本。 \n\n1. 在 LSP 管理器中激活 NFG 模块，同时作用域中也要包括 “系统框架” 和 “Fake Location”。\n\n2. 打开 NFG 点击 Fake Location 项目右侧的 “关闭” 按钮来激活破解\n\n3. 打开 Fake Location\n\n![](crack.png)\n\n# 参考链接 🔗\n【1】<https://kernelsu.com/lsposed-install>  \n【2】<https://www.youtube.com/watch?v=XX5XgdlAS8E>  \n【3】<https://www.bilibili.com/read/cv22932367>\n","slug":"在2023年试图-root-一台-Redmi-K20-Pro","published":1,"updated":"2023-10-10T14:49:35.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnlvmfmc0000snskeq6vgvpq","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>先前终究还是按耐不住入了二手 iPhone 12 mini，在投入到以卖软件体验为生的苹果的怀抱之后的确少了很多事。再也不用为了各种刷机包和内核着急，也不用再去苦苦寻找大大小小用来提升使用体验的小软件。而且苹果，无论在生态还是动画，使用体验等东西上，可以算得上是让手机回到了它本质的“工具”属性。这样的日子很好，很舒服——直到今天。  </p>\n<p><strong>我需要一台能够模拟位置的设备来实现签到，代跑之类的工作。</strong>  </p>\n<p>我看着手边的 iPhone，于是只能把放在抽屉里的 K20 Pro 拿出来，想想其他方法。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><p>凭借着上次刷机的记忆，大概是要把系统恢复到 MIUI 12.5 去以作为各个刷机包的基础底包。于是在<a href=\"https://www.123pan.com/s/Cff7Vv-M0qnH.html\">这里</a>下载刷机包文件，解压 zip，然后 <code>./flash-all.sh</code> 就可以喝水等着完事了。</p>\n<h2 id=\"选择系统\"><a href=\"#选择系统\" class=\"headerlink\" title=\"选择系统\"></a>选择系统</h2><p>实际上在做出 crDroid OS 的选择之前，我尝试了</p>\n<ul>\n<li>水龙 13 的官改系统</li>\n<li>CherishOS</li>\n<li>MIUI 国际版 12.5</li>\n</ul>\n<p>对我来说都不太行，并不是说这些系统不好，也可能只是我手上这台有点问题。这些刷机包你可以在<a href=\"https://www.123pan.com/s/Cff7Vv-w0qnH.html\">这里</a>获取。<br>才刷完crDroid OS，开机之后的给人的体验确实很不一样。简洁的开机动画，干净的桌面，中意的艺术风格，动画也十分流畅，又同时保留了原生原汁原味的 UI 设计。<br>所以我想，就它了。</p>\n<h2 id=\"Root\"><a href=\"#Root\" class=\"headerlink\" title=\"Root\"></a>Root</h2><blockquote>\n<p>“如果说，刷这个系统的代价就是没有 Root。那么如何决定这个系统的去留还是一个有待商榷的问题。”</p>\n</blockquote>\n<p>是的，这就是我在刷了这个系统（Android 13）后的想法，在 Android 13 上，目前主流的 Rec（TWRP &amp; OrangeFox）都不支持 <code>/data</code> 分区解密。而且 我的 <code>rec</code> 分区貌似还出了问题，fastboot 刷入的 Rec 无法正常启动。只能靠 <code>fastboot boot rec.img</code> 临时用一用。</p>\n<p>就在我因为 Magisk 需要刷入 zip 包，可我黑苹果系统上的 fastboot 又不能正常走 sideload 而发愁时，<a href=\"https://kernelsu.org/guide/what-is-kernelsu.html\">KernalSU</a>出现了。</p>\n<blockquote>\n<p>官网解释：<br>KernelSU is a root solution for Android GKI devices, it works in kernel mode and grant root permission to userspace application directly in kernel space.</p>\n</blockquote>\n<p>抱着试一试的心态，我下载了 KernalSU 的<a href=\"https://www.coolapk.com/apk/me.weishu.kernelsu\">管理器</a>。结果打开一看：</p>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/kernalsu-manager.png\" alt=\"kernalsu-manager\"></p>\n<p>不知道出于什么原因，KernalSU 自己就是激活状态。竟然有这种好事，于是顺手安了个 <a href=\"https://github.com/Dr-TSNG/ZygiskOnKernelSU\">Zygisk on KernalSU</a> 和 Lsposed。（要安装 Lsposed 使用给 magisk 的 zygisk 模式的 zip 包就好，是可以直接使用的）</p>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/lsposed-activated.png\" alt=\"lsposed-activated\"></p>\n<p>我的系统信息如下：</p>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/system-version.png\" alt=\"system-info\"></p>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"Fake-Location-安装及破解\"><a href=\"#Fake-Location-安装及破解\" class=\"headerlink\" title=\"Fake Location 安装及破解\"></a>Fake Location 安装及破解</h2><p>Root 的问题解决以后，就要开始想办法解决模拟定位的问题了。<br>模拟位置由 FakeLocation 就能搞定，不过可惜的是，这是一款付费软件。所以还需要 <a href=\"https://github.com/rockz5555/NFG-Multi-Crack/releases\">NFG Multi Crack</a> 来破解掉它。</p>\n<blockquote>\n<p>NFG 并不能处理 Fake Location 的最新版本破解，因此需要下载 1.3.1.6 版本。<br>这是对破解支持的最好的一个版本。 </p>\n</blockquote>\n<ol>\n<li><p>在 LSP 管理器中激活 NFG 模块，同时作用域中也要包括 “系统框架” 和 “Fake Location”。</p>\n</li>\n<li><p>打开 NFG 点击 Fake Location 项目右侧的 “关闭” 按钮来激活破解</p>\n</li>\n<li><p>打开 Fake Location</p>\n</li>\n</ol>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/crack.png\"></p>\n<h1 id=\"参考链接-🔗\"><a href=\"#参考链接-🔗\" class=\"headerlink\" title=\"参考链接 🔗\"></a>参考链接 🔗</h1><p>【1】<a href=\"https://kernelsu.com/lsposed-install\">https://kernelsu.com/lsposed-install</a><br>【2】<a href=\"https://www.youtube.com/watch?v=XX5XgdlAS8E\">https://www.youtube.com/watch?v=XX5XgdlAS8E</a><br>【3】<a href=\"https://www.bilibili.com/read/cv22932367\">https://www.bilibili.com/read/cv22932367</a></p>\n","site":{"data":{}},"length":884,"more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>先前终究还是按耐不住入了二手 iPhone 12 mini，在投入到以卖软件体验为生的苹果的怀抱之后的确少了很多事。再也不用为了各种刷机包和内核着急，也不用再去苦苦寻找大大小小用来提升使用体验的小软件。而且苹果，无论在生态还是动画，使用体验等东西上，可以算得上是让手机回到了它本质的“工具”属性。这样的日子很好，很舒服——直到今天。  </p>\n<p><strong>我需要一台能够模拟位置的设备来实现签到，代跑之类的工作。</strong>  </p>\n<p>我看着手边的 iPhone，于是只能把放在抽屉里的 K20 Pro 拿出来，想想其他方法。</p>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><p>凭借着上次刷机的记忆，大概是要把系统恢复到 MIUI 12.5 去以作为各个刷机包的基础底包。于是在<a href=\"https://www.123pan.com/s/Cff7Vv-M0qnH.html\">这里</a>下载刷机包文件，解压 zip，然后 <code>./flash-all.sh</code> 就可以喝水等着完事了。</p>\n<h2 id=\"选择系统\"><a href=\"#选择系统\" class=\"headerlink\" title=\"选择系统\"></a>选择系统</h2><p>实际上在做出 crDroid OS 的选择之前，我尝试了</p>\n<ul>\n<li>水龙 13 的官改系统</li>\n<li>CherishOS</li>\n<li>MIUI 国际版 12.5</li>\n</ul>\n<p>对我来说都不太行，并不是说这些系统不好，也可能只是我手上这台有点问题。这些刷机包你可以在<a href=\"https://www.123pan.com/s/Cff7Vv-w0qnH.html\">这里</a>获取。<br>才刷完crDroid OS，开机之后的给人的体验确实很不一样。简洁的开机动画，干净的桌面，中意的艺术风格，动画也十分流畅，又同时保留了原生原汁原味的 UI 设计。<br>所以我想，就它了。</p>\n<h2 id=\"Root\"><a href=\"#Root\" class=\"headerlink\" title=\"Root\"></a>Root</h2><blockquote>\n<p>“如果说，刷这个系统的代价就是没有 Root。那么如何决定这个系统的去留还是一个有待商榷的问题。”</p>\n</blockquote>\n<p>是的，这就是我在刷了这个系统（Android 13）后的想法，在 Android 13 上，目前主流的 Rec（TWRP &amp; OrangeFox）都不支持 <code>/data</code> 分区解密。而且 我的 <code>rec</code> 分区貌似还出了问题，fastboot 刷入的 Rec 无法正常启动。只能靠 <code>fastboot boot rec.img</code> 临时用一用。</p>\n<p>就在我因为 Magisk 需要刷入 zip 包，可我黑苹果系统上的 fastboot 又不能正常走 sideload 而发愁时，<a href=\"https://kernelsu.org/guide/what-is-kernelsu.html\">KernalSU</a>出现了。</p>\n<blockquote>\n<p>官网解释：<br>KernelSU is a root solution for Android GKI devices, it works in kernel mode and grant root permission to userspace application directly in kernel space.</p>\n</blockquote>\n<p>抱着试一试的心态，我下载了 KernalSU 的<a href=\"https://www.coolapk.com/apk/me.weishu.kernelsu\">管理器</a>。结果打开一看：</p>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/kernalsu-manager.png\" alt=\"kernalsu-manager\"></p>\n<p>不知道出于什么原因，KernalSU 自己就是激活状态。竟然有这种好事，于是顺手安了个 <a href=\"https://github.com/Dr-TSNG/ZygiskOnKernelSU\">Zygisk on KernalSU</a> 和 Lsposed。（要安装 Lsposed 使用给 magisk 的 zygisk 模式的 zip 包就好，是可以直接使用的）</p>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/lsposed-activated.png\" alt=\"lsposed-activated\"></p>\n<p>我的系统信息如下：</p>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/system-version.png\" alt=\"system-info\"></p>\n<h1 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h1><h2 id=\"Fake-Location-安装及破解\"><a href=\"#Fake-Location-安装及破解\" class=\"headerlink\" title=\"Fake Location 安装及破解\"></a>Fake Location 安装及破解</h2><p>Root 的问题解决以后，就要开始想办法解决模拟定位的问题了。<br>模拟位置由 FakeLocation 就能搞定，不过可惜的是，这是一款付费软件。所以还需要 <a href=\"https://github.com/rockz5555/NFG-Multi-Crack/releases\">NFG Multi Crack</a> 来破解掉它。</p>\n<blockquote>\n<p>NFG 并不能处理 Fake Location 的最新版本破解，因此需要下载 1.3.1.6 版本。<br>这是对破解支持的最好的一个版本。 </p>\n</blockquote>\n<ol>\n<li><p>在 LSP 管理器中激活 NFG 模块，同时作用域中也要包括 “系统框架” 和 “Fake Location”。</p>\n</li>\n<li><p>打开 NFG 点击 Fake Location 项目右侧的 “关闭” 按钮来激活破解</p>\n</li>\n<li><p>打开 Fake Location</p>\n</li>\n</ol>\n<p><img src=\"/2023/10/10/%E5%9C%A82023%E5%B9%B4%E8%AF%95%E5%9B%BE-root-%E4%B8%80%E5%8F%B0-Redmi-K20-Pro/crack.png\"></p>\n<h1 id=\"参考链接-🔗\"><a href=\"#参考链接-🔗\" class=\"headerlink\" title=\"参考链接 🔗\"></a>参考链接 🔗</h1><p>【1】<a href=\"https://kernelsu.com/lsposed-install\">https://kernelsu.com/lsposed-install</a><br>【2】<a href=\"https://www.youtube.com/watch?v=XX5XgdlAS8E\">https://www.youtube.com/watch?v=XX5XgdlAS8E</a><br>【3】<a href=\"https://www.bilibili.com/read/cv22932367\">https://www.bilibili.com/read/cv22932367</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/Android权限请求写法/req.jpg","slug":"req.jpg","post":"clkysewuq00052qbhg68d0hpt","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/bargroup.png","slug":"bargroup.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/colonoperatorandlinspace.png","slug":"colonoperatorandlinspace.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/concatenation.png","slug":"concatenation.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/legend.png","slug":"legend.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/linearidtosubid.png","slug":"linearidtosubid.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/matrixplotting.png","slug":"matrixplotting.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/meshc.png","slug":"meshc.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/meshz.png","slug":"meshz.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/mutlibyelementormartrix.png","slug":"mutlibyelementormartrix.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/plot3.png","slug":"plot3.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/plotmatrix.png","slug":"plotmatrix.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/scattercolor.png","slug":"scattercolor.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/surfc.png","slug":"surfc.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/MATLAB-Cheat-Sheet/xticklabel.png","slug":"xticklabel.png","post":"clkysewuq00062qbhabvib018","modified":0,"renderable":0},{"_id":"source/_posts/Meizu-E3-解锁-刷机指南/meizue3.png","slug":"meizue3.png","post":"clkysewur00092qbh4f3yhoym","modified":0,"renderable":0},{"_id":"source/_posts/Meizu-E3-解锁-刷机指南/orides.png","slug":"orides.png","post":"clkysewur00092qbh4f3yhoym","modified":0,"renderable":0},{"_id":"source/_posts/Office-Word解决卡顿问题/settings.png","slug":"settings.png","post":"clkysewut000d2qbh04ko1wbt","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV-Android部署指南/afterde.png","slug":"afterde.png","post":"clkysewut000e2qbhao219r7n","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV-Android部署指南/build.png","slug":"build.png","post":"clkysewut000e2qbhao219r7n","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV-Android部署指南/importmodule.png","slug":"importmodule.png","post":"clkysewut000e2qbhao219r7n","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV-Android部署指南/nativ.png","slug":"nativ.png","post":"clkysewut000e2qbhao219r7n","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV-Android部署指南/projlist.png","slug":"projlist.png","post":"clkysewut000e2qbhao219r7n","modified":0,"renderable":0},{"_id":"source/_posts/OpenCV-Android部署指南/projstru.png","slug":"projstru.png","post":"clkysewut000e2qbhao219r7n","modified":0,"renderable":0},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/com_mgr.png","slug":"com_mgr.png","post":"clkysewuu000g2qbh5geg6s4r","modified":0,"renderable":0},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/degrade_failed.png","slug":"degrade_failed.png","post":"clkysewuu000g2qbh5geg6s4r","modified":0,"renderable":0},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/file_exe.png","slug":"file_exe.png","post":"clkysewuu000g2qbh5geg6s4r","modified":0,"renderable":0},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/file_right_click.png","slug":"file_right_click.png","post":"clkysewuu000g2qbh5geg6s4r","modified":0,"renderable":0},{"_id":"source/_posts/Redmi-G-2021-BIOS-升降级指南/firmware_disable.png","slug":"firmware_disable.png","post":"clkysewuu000g2qbh5geg6s4r","modified":0,"renderable":0},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/termux-properties.png","slug":"termux-properties.png","post":"clkysewuv000i2qbh6ckj0jc9","modified":0,"renderable":0},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/termux-tmoe.png","slug":"termux-tmoe.png","post":"clkysewuv000i2qbh6ckj0jc9","modified":0,"renderable":0},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/tmoe-con-edit.png","slug":"tmoe-con-edit.png","post":"clkysewuv000i2qbh6ckj0jc9","modified":0,"renderable":0},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/tmp.png","slug":"tmp.png","post":"clkysewuv000i2qbh6ckj0jc9","modified":0,"renderable":0},{"_id":"source/_posts/Termux-X11-在-Debian-11-上的部署与体验/workflow.png","slug":"workflow.png","post":"clkysewuv000i2qbh6ckj0jc9","modified":0,"renderable":0},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/compress_bag.png","slug":"compress_bag.png","post":"clkysewuw000l2qbhefp46g3h","modified":0,"renderable":0},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/exec_map.png","slug":"exec_map.png","post":"clkysewuw000l2qbhefp46g3h","modified":0,"renderable":0},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/extension_settings.png","slug":"extension_settings.png","post":"clkysewuw000l2qbhefp46g3h","modified":0,"renderable":0},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/install_cr.png","slug":"install_cr.png","post":"clkysewuw000l2qbhefp46g3h","modified":0,"renderable":0},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/path_settings.png","slug":"path_settings.png","post":"clkysewuw000l2qbhefp46g3h","modified":0,"renderable":0},{"_id":"source/_posts/Visual-Studio-Code-C-C-基础开发环境配置指南/version_test.png","slug":"version_test.png","post":"clkysewuw000l2qbhefp46g3h","modified":0,"renderable":0},{"_id":"source/_posts/Windows-Terminal-优化指北/Windows_Terminal_v1.0.png","slug":"Windows_Terminal_v1.0.png","post":"clkysewuw000m2qbh5uet5oz4","modified":0,"renderable":0},{"_id":"source/_posts/Windows-Terminal-优化指北/new_ps.png","slug":"new_ps.png","post":"clkysewuw000m2qbh5uet5oz4","modified":0,"renderable":0},{"_id":"source/_posts/Windows-Terminal-优化指北/ori_ps_ver.png","slug":"ori_ps_ver.png","post":"clkysewuw000m2qbh5uet5oz4","modified":0,"renderable":0},{"_id":"source/_posts/Windows-Terminal-优化指北/posh_theme.png","slug":"posh_theme.png","post":"clkysewuw000m2qbh5uet5oz4","modified":0,"renderable":0},{"_id":"source/_posts/Windows-Terminal-优化指北/ps_finish.png","slug":"ps_finish.png","post":"clkysewuw000m2qbh5uet5oz4","modified":0,"renderable":0},{"_id":"source/_posts/Windows-Terminal-优化指北/wt_settings.png","slug":"wt_settings.png","post":"clkysewuw000m2qbh5uet5oz4","modified":0,"renderable":0},{"_id":"source/_posts/Windows-多网卡链路聚合/g_a.png","slug":"g_a.png","post":"clkysewux000n2qbhfxsehgug","modified":0,"renderable":0},{"_id":"source/_posts/Windows-多网卡链路聚合/gst.png","slug":"gst.png","post":"clkysewux000n2qbhfxsehgug","modified":0,"renderable":0},{"_id":"source/_posts/Windows-多网卡链路聚合/wllj.png","slug":"wllj.png","post":"clkysewux000n2qbhfxsehgug","modified":0,"renderable":0},{"_id":"source/_posts/Windows10更改用户名/setttingsofuseraccount.png","slug":"setttingsofuseraccount.png","post":"clkysewux000q2qbh57l88xqv","modified":0,"renderable":0},{"_id":"source/_posts/Windows创建隐藏管理员账户/binvalue.png","slug":"binvalue.png","post":"clkysewuy000s2qbh4dbhfykd","modified":0,"renderable":0},{"_id":"source/_posts/Windows创建隐藏管理员账户/regeditperm.png","slug":"regeditperm.png","post":"clkysewuy000s2qbh4dbhfykd","modified":0,"renderable":0},{"_id":"source/_posts/Windows创建隐藏管理员账户/reglist.png","slug":"reglist.png","post":"clkysewuy000s2qbh4dbhfykd","modified":0,"renderable":0},{"_id":"source/_posts/Windows创建隐藏管理员账户/wt.png","slug":"wt.png","post":"clkysewuy000s2qbh4dbhfykd","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/expire_setting.png","slug":"expire_setting.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/export_key.png","slug":"export_key.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/fake.png","slug":"fake.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/github_add.png","slug":"github_add.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/gpg_install.png","slug":"gpg_install.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/kleo_advanced.png","slug":"kleo_advanced.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/kleo_fingerprint.png","slug":"kleo_fingerprint.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/kleo_gen_setting.png","slug":"kleo_gen_setting.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用GPG签名commit记录/no_secret_key.png","slug":"no_secret_key.png","post":"clkysewv0000v2qbhcd3509ry","modified":0,"renderable":0},{"_id":"source/_posts/使用John-The-Ripper破解压缩文件密码/change_encode.png","slug":"change_encode.png","post":"clkysewv0000x2qbh2xdu2jjb","modified":0,"renderable":0},{"_id":"source/_posts/使用John-The-Ripper破解压缩文件密码/crack.png","slug":"crack.png","post":"clkysewv0000x2qbh2xdu2jjb","modified":0,"renderable":0},{"_id":"source/_posts/解决Windows蓝牙连接不稳定问题/bl_adapter.png","slug":"bl_adapter.png","post":"clkysewv200132qbhbfuogq2i","modified":0,"renderable":0},{"_id":"source/_posts/解决Windows蓝牙连接不稳定问题/power_setting.png","slug":"power_setting.png","post":"clkysewv200132qbhbfuogq2i","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/add-im.png","slug":"add-im.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/double_pinyin.png","slug":"double_pinyin.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/image.png","slug":"image.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/kbd.png","slug":"kbd.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/keyboard-add.png","slug":"keyboard-add.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/manjaro-hello-install.png","slug":"manjaro-hello-install.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/记-Rime-输入法在-Manjaro-上的部署及配置/rime.png","slug":"rime.png","post":"clkysewv300152qbh5u543nna","modified":0,"renderable":0},{"_id":"source/_posts/pandavan上配置clash教程/1.png","slug":"1.png","post":"clkysewuz000u2qbhfh3y0v9h","modified":0,"renderable":0},{"_id":"source/_posts/pandavan上配置clash教程/2.png","slug":"2.png","post":"clkysewuz000u2qbhfh3y0v9h","modified":0,"renderable":0},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/crack.png","slug":"crack.png","post":"clnlvmfmc0000snskeq6vgvpq","modified":0,"renderable":0},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/kernalsu-manager.png","slug":"kernalsu-manager.png","post":"clnlvmfmc0000snskeq6vgvpq","modified":0,"renderable":0},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/lsposed-activated.png","slug":"lsposed-activated.png","post":"clnlvmfmc0000snskeq6vgvpq","modified":0,"renderable":0},{"_id":"source/_posts/在2023年试图-root-一台-Redmi-K20-Pro/system-version.png","slug":"system-version.png","post":"clnlvmfmc0000snskeq6vgvpq","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clkysewuq00052qbhg68d0hpt","tag_id":"clkysewuo00032qbh8emzclux","_id":"clkysewur00082qbhexv72ul4"},{"post_id":"clkysewuk00012qbh4f30chk5","tag_id":"clkysewuo00032qbh8emzclux","_id":"clkysewus000a2qbhftgw8tx9"},{"post_id":"clkysewum00022qbhc56dc912","tag_id":"clkysewur00072qbhbrcjdzk3","_id":"clkysewuv000h2qbhh8bsd5li"},{"post_id":"clkysewum00022qbhc56dc912","tag_id":"clkysewut000c2qbhdvch0o10","_id":"clkysewuv000j2qbhfdns4p1v"},{"post_id":"clkysewuq00062qbhabvib018","tag_id":"clkysewux000o2qbh7qxuhlkg","_id":"clkysewv1000y2qbh7ri36nhz"},{"post_id":"clkysewuq00062qbhabvib018","tag_id":"clkysewuv000k2qbh9yln9nmz","_id":"clkysewv100102qbh5adn5jvp"},{"post_id":"clkysewur00092qbh4f3yhoym","tag_id":"clkysewuo00032qbh8emzclux","_id":"clkysewv300162qbhbijc5nun"},{"post_id":"clkysewur00092qbh4f3yhoym","tag_id":"clkysewv0000w2qbh85yr8hgm","_id":"clkysewv400182qbhbf9zafgc"},{"post_id":"clkysewur00092qbh4f3yhoym","tag_id":"clkysewv100112qbh6v4dhccz","_id":"clkysewv4001a2qbh51sc8au3"},{"post_id":"clkysewus000b2qbhc60saw32","tag_id":"clkysewv200142qbh179aehu1","_id":"clkysewv4001b2qbh4qe3829x"},{"post_id":"clkysewut000d2qbh04ko1wbt","tag_id":"clkysewv400192qbhgl7i24lt","_id":"clkysewv4001d2qbhh8r27hyo"},{"post_id":"clkysewut000e2qbhao219r7n","tag_id":"clkysewuo00032qbh8emzclux","_id":"clkysewv5001f2qbhclm1du4j"},{"post_id":"clkysewut000e2qbhao219r7n","tag_id":"clkysewv4001c2qbhaszl336d","_id":"clkysewv5001g2qbh7xj23s8g"},{"post_id":"clkysewuu000g2qbh5geg6s4r","tag_id":"clkysewv4001e2qbh0rx3ark7","_id":"clkysewv5001i2qbh60wn7se2"},{"post_id":"clkysewuv000i2qbh6ckj0jc9","tag_id":"clkysewv5001h2qbhd8xr5xu7","_id":"clkysewv5001k2qbh5v3lbaco"},{"post_id":"clkysewuw000l2qbhefp46g3h","tag_id":"clkysewv5001j2qbhce73geu7","_id":"clkysewv6001n2qbhew6k3eu4"},{"post_id":"clkysewuw000l2qbhefp46g3h","tag_id":"clkysewv5001l2qbhbp0dg6r7","_id":"clkysewv6001o2qbh9ugu87nf"},{"post_id":"clkysewuw000m2qbh5uet5oz4","tag_id":"clkysewv5001m2qbh8hzq2619","_id":"clkysewv6001r2qbhaykzg6t5"},{"post_id":"clkysewuw000m2qbh5uet5oz4","tag_id":"clkysewv6001p2qbhgjo35jt7","_id":"clkysewv6001s2qbhd2pmbib2"},{"post_id":"clkysewux000n2qbhfxsehgug","tag_id":"clkysewv5001m2qbh8hzq2619","_id":"clkysewv7001v2qbhhob9he52"},{"post_id":"clkysewux000n2qbhfxsehgug","tag_id":"clkysewv6001t2qbh4ti36tmm","_id":"clkysewv7001w2qbh4zl8332s"},{"post_id":"clkysewux000q2qbh57l88xqv","tag_id":"clkysewv5001m2qbh8hzq2619","_id":"clkysewv7001y2qbhhlm5d823"},{"post_id":"clkysewuy000s2qbh4dbhfykd","tag_id":"clkysewv5001m2qbh8hzq2619","_id":"clkysewv700202qbhfd9feec0"},{"post_id":"clkysewuz000u2qbhfh3y0v9h","tag_id":"clkysewv7001z2qbh4gf15oj8","_id":"clkysewv800222qbh59cnacms"},{"post_id":"clkysewv0000v2qbhcd3509ry","tag_id":"clkysewv700212qbh2z9s8fbf","_id":"clkysewv800242qbh2a0k5z3k"},{"post_id":"clkysewv0000x2qbh2xdu2jjb","tag_id":"clkysewv100112qbh6v4dhccz","_id":"clkysewv800262qbh2uoif6uv"},{"post_id":"clkysewv1000z2qbh6ulvdcqd","tag_id":"clkysewv800252qbh1biefdgp","_id":"clkysewv9002a2qbh6dbn6zwx"},{"post_id":"clkysewv1000z2qbh6ulvdcqd","tag_id":"clkysewv5001h2qbhd8xr5xu7","_id":"clkysewv9002b2qbh4ixih80g"},{"post_id":"clkysewv1000z2qbh6ulvdcqd","tag_id":"clkysewv5001j2qbhce73geu7","_id":"clkysewv9002d2qbh7qgvhoai"},{"post_id":"clkysewv200122qbhgodf44tl","tag_id":"clkysewv700212qbh2z9s8fbf","_id":"clkysewv9002e2qbh8d480h8r"},{"post_id":"clkysewv200132qbhbfuogq2i","tag_id":"clkysewv5001m2qbh8hzq2619","_id":"clkysewva002h2qbhg5wodokc"},{"post_id":"clkysewv200132qbhbfuogq2i","tag_id":"clkysewv9002f2qbhfsoo1zv5","_id":"clkysewva002i2qbhf6z30xhj"},{"post_id":"clkysewv300152qbh5u543nna","tag_id":"clkysewuu000f2qbheyep1c68","_id":"clkysewva002j2qbh9t7nb1i1"},{"post_id":"clkysewv300152qbh5u543nna","tag_id":"clkysewva002g2qbhe2oc98jf","_id":"clkysewva002k2qbh0iu1b58a"},{"post_id":"clnlvmfmc0000snskeq6vgvpq","tag_id":"clnlvmfmf0001snsk057hbx9l","_id":"clnlvmfmj0002snsk6eqk6tyc"},{"post_id":"clnlvmfmc0000snskeq6vgvpq","tag_id":"clkysewuo00032qbh8emzclux","_id":"clnlvmfmj0003snsk4cba4srb"}],"Tag":[{"name":"Android","_id":"clkysewuo00032qbh8emzclux"},{"name":"Clion","_id":"clkysewur00072qbhbrcjdzk3"},{"name":"ROS","_id":"clkysewut000c2qbhdvch0o10"},{"name":"Linux","_id":"clkysewuu000f2qbheyep1c68"},{"name":"笔记","_id":"clkysewuv000k2qbh9yln9nmz"},{"name":"MATLAB","_id":"clkysewux000o2qbh7qxuhlkg"},{"name":"刷机","_id":"clkysewv0000w2qbh85yr8hgm"},{"name":"crack","_id":"clkysewv100112qbh6v4dhccz"},{"name":"Oculus","_id":"clkysewv200142qbh179aehu1"},{"name":"Office","_id":"clkysewv400192qbhgl7i24lt"},{"name":"OpenCV","_id":"clkysewv4001c2qbhaszl336d"},{"name":"BIOS","_id":"clkysewv4001e2qbh0rx3ark7"},{"name":"Termux","_id":"clkysewv5001h2qbhd8xr5xu7"},{"name":"VSC","_id":"clkysewv5001j2qbhce73geu7"},{"name":"C/C++","_id":"clkysewv5001l2qbhbp0dg6r7"},{"name":"Windows","_id":"clkysewv5001m2qbh8hzq2619"},{"name":"美化","_id":"clkysewv6001p2qbhgjo35jt7"},{"name":"Networking","_id":"clkysewv6001t2qbh4ti36tmm"},{"name":"Router","_id":"clkysewv7001z2qbh4gf15oj8"},{"name":"git","_id":"clkysewv700212qbh2z9s8fbf"},{"name":"Web","_id":"clkysewv800252qbh1biefdgp"},{"name":"Bluetooth","_id":"clkysewv9002f2qbhfsoo1zv5"},{"name":"Software","_id":"clkysewva002g2qbhe2oc98jf"},{"name":"Root","_id":"clnlvmfmf0001snsk057hbx9l"}]}}